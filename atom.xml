<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L的博客</title>
  <icon>https://www.gravatar.com/avatar/2b65c9d2279c38eab018ee175f630234</icon>
  <subtitle>TO BE YOUR SELF</subtitle>
  <link href="http://damotiansheng.github.io/atom.xml" rel="self"/>
  
  <link href="http://damotiansheng.github.io/"/>
  <updated>2023-07-01T00:45:11.026Z</updated>
  <id>http://damotiansheng.github.io/</id>
  
  <author>
    <name>L</name>
    <email>974361900@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何向hexo博客中插入图片</title>
    <link href="http://damotiansheng.github.io/uncategorized/2023-06-29/%E5%A6%82%E4%BD%95%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2023-06-29/%E5%A6%82%E4%BD%95%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.html</id>
    <published>2023-06-29T13:41:13.000Z</published>
    <updated>2023-07-01T00:45:11.026Z</updated>
    
    <content type="html"><![CDATA[<p>本文演示如何使用hexo + typora 如何方便插入图片到GitHub博客中</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>博客主目录执行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked</span><br><span class="line">npm <span class="keyword">install</span> hexo-image-link</span><br></pre></td></tr></table></figure><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="typora配置"><a href="#typora配置" class="headerlink" title="typora配置"></a>typora配置</h2><p>文件 -&gt; 偏好设置 -&gt; 图像：</p><p><img src="/uncategorized/2023-06-29/%E5%A6%82%E4%BD%95%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20230701084442664.png" alt="image-20230701084442664"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>hexo new test<br>此时在source&#x2F;_posts目录会生成一个test目录和test.md文件，然后拷贝图片到test.md中，图片会自动复制到test目录,复制图片粘贴到Typora中叫“文章名”的文章后，图片引用路径会变成”文章名”&#x2F;xxx.png，将图片前面的””文章名””目录删除掉，替换即可，即变成: “xxx.png”，最后发布即可，这样在typora中看不到图片，但是在网站上可以看到，如果不替换会出现网站无法展示图片，其引用的图片路径包含重复路径的问题</p><p><img src="/uncategorized/2023-06-29/%E5%A6%82%E4%BD%95%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/avatar-1688048937816-8.png" alt="avatar"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文演示如何使用hexo + typora 如何方便插入图片到GitHub博客中&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/tags/hexo/"/>
    
    <category term="typora" scheme="http://damotiansheng.github.io/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>redis集群代理twemproxy源码阅读总结</title>
    <link href="http://damotiansheng.github.io/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93.html"/>
    <id>http://damotiansheng.github.io/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93.html</id>
    <published>2023-06-21T07:29:31.000Z</published>
    <updated>2023-07-01T00:54:48.948Z</updated>
    
    <content type="html"><![CDATA[<p>阅读twemproxy的总结文章,方便后续复看和复用其中的技术</p><span id="more"></span><h2 id="代码全景"><a href="#代码全景" class="headerlink" title="代码全景"></a>代码全景</h2><p>源码笔记：<a href="https://github.com/damotiansheng/Reading-and-comprehense-twemproxy0.5.0.git">https://github.com/damotiansheng/Reading-and-comprehense-twemproxy0.5.0.git</a></p><p>代码规模不大只有1w多行，而且功能划分的比较清晰，包括：</p><ul><li>事件处理： event&#x2F;nc_epoll.c、event&#x2F;nc_event.h、event&#x2F;nc_evport.c、event&#x2F;nc_kqueue.c</li><li>各种Hash函数： hashkit&#x2F;nc_crc16.c、hashkit&#x2F;nc_crc32.c、hashkit&#x2F;nc_fnv.c、hashkit &#x2F;nc_hashkit.h、hashkit&#x2F;nc_hsieh.c、hashkit&#x2F;nc_jenkins.c、hashkit &#x2F;nc_ketama.c、hashkit&#x2F;nc_md5.c、hashkit&#x2F;nc_modula.c、hashkit&#x2F;nc_murmur.c、 -hashkit&#x2F;nc_one_at_a_time.c、hashkit&#x2F;nc_random.c</li><li>协议： proto&#x2F;nc_memcache.c、proto&#x2F;nc_proto.h、proto&#x2F;nc_redis.c</li><li>自定义的数据类型： nc_array.c、nc_array.h、nc_string.c、nc_string.h</li><li>网络通信相关： nc_connection.c、nc_connection.h、nc_client.c、nc_client.h、nc_proxy.c、nc_proxy.h</li><li>信号处理： nc_signal.c、nc_signal.h</li><li>关键数据结构和算法： nc_rbtree.h、nc_rbtree.c、nc_queue.h、nc_request.c、nc_response.c、nc_mbuf.c、 nc_mbuf.h、- nc_message.c、nc_message.h、nc_server.c、nc_server.h</li><li>统计、日志和工具： nc_stats.c、nc_stats.h、nc_log.c、nc_log.h、nc_util.c、nc_util.h</li><li>配置文件： nc_conf.c、nc_conf.h</li><li>主程序： nc.c、nc_core.c、nc_core.h</li></ul><h2 id="一些技术实现"><a href="#一些技术实现" class="headerlink" title="一些技术实现"></a>一些技术实现</h2><ul><li>采用epoll + 回调的单线程工作模式，单线程epoll监听，每个事件触发则调用相应的回调函数</li><li>可监听多个地址，客户端向这些地址发起连接请求，每个地址将请求转发到后端的server池</li></ul><blockquote><p>实现上是通过创建多个socket，监听多个地址，然后加入epoll监听中，单线程epoll_wait监听请求</p></blockquote><ul><li><p>三种连接：proxy：监听客户端连接、client：处理客户端数据连接、server：后端server的连接，每种连接都会保存起读写回调函数，每个连接会用一个conn数据结构表示，相关的读写回调函数会记录在此，每新建一个连接时会加入到时间管理器的监听事件中（每个连接有一个fd），并将该conn赋值给epoll_event.data.ptr，以便事件触发时得到该conn，从而调用到相应的回调函数，proxy连接的回调函数是在conn_get_proxy函数中初始化的，client和server连接的回调函数是在conn_get函数中初始化的</p><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687527555681-361ae102-6032-43b2-8757-9b5879b1372a.png" alt="image.png"></p></li><li><p>事件驱动消息流转：多个in&#x2F;out队列，消息根据当前的处理流程会进入到某个队列中，从后端server得到回包后，会将请求的msg和回包的msg关联起来，然后client连接找到相应的回包并发送给客户端，整个流程是事件驱动的</p></li><li><p>总共2个线程，主线程和stats线程</p></li><li><p>stats线程实现原理：一个简单的http服务，即请求一个http的url，返回stats数据，实现原理：创建一个新的stats线程，epoll_create创建新的事件管理器，创建监听fd，加入epoll的监听事件中并设置回调函数，有请求来了调用相应的回调函数进行处理，默认30秒触发一次</p></li><li><p>超时处理：请求后端server如果配置了超时，则会进行超时处理，具体是发送给后端请求后，如果规定时间没返回，会超时关闭客户端连接，实现上是通过红黑树实现，key是超时的时间，value是连接，每次epoll从红黑树得到最小的时间（最左节点）赋值给ctx-&gt;timeout，然后传入epoll_wait的第四个参数，epoll_wait(ep, event, nevent, timeout)，到达规定时间后epoll_wait会返回，实现对超时事件的处理</p></li></ul><blockquote><p>在redis中，超时事件的实现是通过一个双向链表，每次遍历得到最早超时事件，然后传入epoll_wait的参数中的</p></blockquote><ul><li>事件驱动实现：提供了统一的上层接口，底层封装了epoll、kqueue、evport实现，跟redis事件驱动实现类似</li><li>实现了一些核心数据结构和算法：红黑树、一致性hash算法（用来选择后端server，将请求路由到后端某个server去）、变长字符串、变长数组、队列（实现来源于<a href="https://github.com/freebsd/freebsd-src/blob/master/sys/sys/queue.h">https://github.com/freebsd/freebsd-src/blob/master/sys/sys/queue.h</a>）、使用libyaml库解析这个yaml格式的配置文件</li><li>守护进程实现：nc_daemonize函数</li><li>连接缓冲池技术&amp;连接的LRU管理：每个后端server维护一个s_conn_q连接队列，建立的连接放到该队列中，每次需要建立该server的连接就判断是否超过最大连接数（pool-&gt;server_connections，默认为1），没有则建立新的连接插入队列，超过则从队头取连接conn并插入到队尾（即LRU算法），然后返回这个连接，完成对连接的复用，代码见conn_get函数</li><li>空闲连接队列free_connq，三种连接：proxy，client，server在释放连接时会将连接放到空闲连接队列中，需要建立连接时从该空闲连接队列取连接，而不是重新分配内存，相当于一个空闲连接池，三种连接复用该空闲连接池，简单理解就是一个连接数据结构的缓存池，不用每次重新分配</li><li>消息结构的缓存池技术：读取消息需要先分配msg结构，优先从空闲msg队列free_msgq中获取，相当于一个msg缓冲池</li></ul><h2 id="一次请求的处理流程"><a href="#一次请求的处理流程" class="headerlink" title="一次请求的处理流程"></a>一次请求的处理流程</h2><h3 id="三种连接"><a href="#三种连接" class="headerlink" title="三种连接"></a>三种连接</h3><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687525592931-cfa68891-c888-416a-a473-3e141cdd1f0f.png" alt="img"></p><ul><li>proxy connection， 用来监听用户建立连接的请求，建立连接成功后会对应产生一个客户端连接</li><li>client connection，由建连成功后产生，用户读写数据都是通过 client connection 解析请求后，根据 key 和哈希规则选择一个 server 进行转发</li><li>server connection，转发用户请求到缓存资源并接收和解析响应数据转回 client connection，client connection 将响应返回到用户</li></ul><h3 id="三个队列"><a href="#三个队列" class="headerlink" title="三个队列"></a>三个队列</h3><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687613743378-c68d746c-04ad-45c6-a1f0-9d3065e7bc7c.png" alt="img"><br>上图的 client connection 之所以没有 imsgq 是因为请求解析完可以直接进入 server 的 imsgq</p><ol><li><p>用户通过 proxy connection 建立连接，产生一个 client connection</p></li><li><p>client connection 开始读取用户的请求数据，并将完整的请求根据 key 和设置的哈希规则选择 server, 然后将这个请求存放到 server 的 imsgq</p></li><li><p>接着 server connection 发送 imsgq 请求到远程资源，发送完成之后(写 tcp buffer) 就会将 msg 从 imsgq 迁移到 omsgq，响应回来之后从 omsgq 队列里面找到这个对应的 msg 以及 client connection</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把后端应答回来的msg和客户端msg关联在一起,然后通过req_done函数里面的event_add_out，来触发客户端conn把这些后端回包msg发送出去</span></span><br><span class="line"><span class="comment">// 参数msg是server的回包msg</span></span><br><span class="line">static void</span><br><span class="line">rsp<span class="constructor">_forward(<span class="params">struct</span> <span class="params">context</span> <span class="operator">*</span><span class="params">ctx</span>, <span class="params">struct</span> <span class="params">conn</span> <span class="operator">*</span><span class="params">s_conn</span>, <span class="params">struct</span> <span class="params">msg</span> <span class="operator">*</span><span class="params">msg</span>)</span> &#123;</span><br><span class="line">    rstatus_t status;</span><br><span class="line">    <span class="keyword">struct</span> msg *pmsg;</span><br><span class="line">    <span class="keyword">struct</span> conn *c_conn;</span><br><span class="line">    uint32_t msgsize;</span><br><span class="line"></span><br><span class="line">    <span class="constructor">ASSERT(!<span class="params">s_conn</span>-&gt;<span class="params">client</span> <span class="operator">&amp;&amp;</span> !<span class="params">s_conn</span>-&gt;<span class="params">proxy</span>)</span>;</span><br><span class="line">    msgsize = msg-&gt;mlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* response from server implies that server is ok and heartbeating */</span></span><br><span class="line">    server<span class="constructor">_ok(<span class="params">ctx</span>, <span class="params">s_conn</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* dequeue peer message (request) from server */</span></span><br><span class="line">    pmsg = <span class="constructor">TAILQ_FIRST(&amp;<span class="params">s_conn</span>-&gt;<span class="params">omsg_q</span>)</span>;   <span class="comment">// 取第一个队列元素，先前入队是用TAILQ_INSERT_TAIL(&amp;conn-&gt;omsg_q, msg, s_tqe);</span></span><br><span class="line">    <span class="constructor">ASSERT(<span class="params">pmsg</span> != NULL <span class="operator">&amp;&amp;</span> <span class="params">pmsg</span>-&gt;<span class="params">peer</span> <span class="operator">==</span> NULL)</span>;</span><br><span class="line">    <span class="constructor">ASSERT(<span class="params">pmsg</span>-&gt;<span class="params">request</span> <span class="operator">&amp;&amp;</span> !<span class="params">pmsg</span>-&gt;<span class="params">done</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求msg从server的输出队列中出队</span></span><br><span class="line">    s_conn-&gt;dequeue<span class="constructor">_outq(<span class="params">ctx</span>, <span class="params">s_conn</span>, <span class="params">pmsg</span>)</span>;  <span class="comment">// 调用 req_server_dequeue_omsgq 函数，会调用TAILQ_REMOVE(&amp;conn-&gt;omsg_q, msg, s_tqe);</span></span><br><span class="line">    pmsg-&gt;<span class="keyword">done</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* establish msg &lt;-&gt; pmsg (response &lt;-&gt; request) link */</span></span><br><span class="line"><span class="comment">// 核心逻辑：建立请求msg和回包msg的连接</span></span><br><span class="line"><span class="comment">/* pmsg为接收客户端报文的msg信息，参数msg为后端应答回来的msg信息 */</span></span><br><span class="line"><span class="comment">/* 把接收的客户端msg信息和后端应答回来的msg信息进行关联 */</span></span><br><span class="line"><span class="comment">// 如果2个client复用了同一个server连接，client1先发送了get a, client2接着发送了get b, 在server连接的omsg_q就是(client1_req, client2_req)，但是</span></span><br><span class="line"><span class="comment">// client2的响应先回来，即这里的msg是get b的结果，但是pmsg是取了第一个，即client1，岂不是有问题？</span></span><br><span class="line"><span class="comment">// 没有问题，因为复用同一个server连接，get a和get b是先后发送到同一个server，由于后端是redis，单线程处理，</span></span><br><span class="line"><span class="comment">// 所以get a(client1请求)回包也是先回来，get b（client2请求）的回包后回来，不会出现client2请求先回来的情况</span></span><br><span class="line">    pmsg-&gt;peer = msg;</span><br><span class="line">    msg-&gt;peer = pmsg;</span><br><span class="line"></span><br><span class="line">    msg-&gt;pre<span class="constructor">_coalesce(<span class="params">msg</span>)</span>;</span><br><span class="line"></span><br><span class="line">    c_conn = pmsg-&gt;owner;  <span class="comment">// 找到client的conn</span></span><br><span class="line">    <span class="constructor">ASSERT(<span class="params">c_conn</span>-&gt;<span class="params">client</span> <span class="operator">&amp;&amp;</span> !<span class="params">c_conn</span>-&gt;<span class="params">proxy</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req<span class="constructor">_done(<span class="params">c_conn</span>, TAILQ_FIRST(&amp;<span class="params">c_conn</span>-&gt;<span class="params">omsg_q</span>)</span>)) &#123;</span><br><span class="line">        status = event<span class="constructor">_add_out(<span class="params">ctx</span>-&gt;<span class="params">evb</span>, <span class="params">c_conn</span>)</span>;  <span class="comment">// 注册client连接c_conn的读写事件到事件管理器中进行监听</span></span><br><span class="line">        <span class="keyword">if</span> (status != NC_OK) &#123;</span><br><span class="line">            c_conn-&gt;err = errno;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rsp<span class="constructor">_forward_stats(<span class="params">ctx</span>, <span class="params">s_conn</span>-&gt;<span class="params">owner</span>, <span class="params">msg</span>, <span class="params">msgsize</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后将响应内容放到 client connection 的 omsgq，由 client connection 将数据发送回客户端。</p></li></ol><h3 id="连接的回调函数"><a href="#连接的回调函数" class="headerlink" title="连接的回调函数"></a>连接的回调函数</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">proxy连接：</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv = proxy_recv;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_next = NULL;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_done = NULL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send = NULL;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_next = NULL;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_done = NULL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>close = proxy_close;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>active = NULL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>ref = proxy_ref;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>unref = proxy_unref;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client连接：</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv = msg_recv;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_next = req_recv_next;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_done = req_recv_done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send = msg_send;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_next = rsp_send_next;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_done = rsp_send_done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>close = client_close;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>active = client_active;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>ref = client_ref;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>unref = client_unref;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>enqueue_inq = NULL;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>dequeue_inq = NULL;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>enqueue_outq = req_client_enqueue_omsgq;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>dequeue_outq = req_client_dequeue_omsgq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server连接：</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv = msg_recv;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_next = rsp_recv_next;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>recv_done = rsp_recv_done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send = msg_send;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_next = req_send_next;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>send_done = req_send_done;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>close = server_close;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>active = server_active;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>ref = server_ref;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>unref = server_unref;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>enqueue_inq = req_server_enqueue_imsgq;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>dequeue_inq = req_server_dequeue_imsgq;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>enqueue_outq = req_server_enqueue_omsgq;</span><br><span class="line"><span class="function"><span class="title">conn</span>-&gt;</span>dequeue_outq = req_server_dequeue_omsgq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*             Client+             Proxy           Server+</span><br><span class="line"> *                              (nutcracker)</span><br><span class="line"> *                                   .</span><br><span class="line"> *       msg_recv &#123;read event&#125;       .       msg_recv &#123;read event&#125;</span><br><span class="line"> *         +                         .                         +</span><br><span class="line"> *         |                         .                         |</span><br><span class="line"> *         \                         .                         /</span><br><span class="line"> *         req_recv_next             .             rsp_recv_next</span><br><span class="line"> *           +                       .                       +</span><br><span class="line"> *           |                       .                       |       Rsp</span><br><span class="line"> *           req_recv_done           .           rsp_recv_done      &lt;===</span><br><span class="line"> *             +                     .                     +</span><br><span class="line"> *             |                     .                     |</span><br><span class="line"> *    Req      \                     .                     /</span><br><span class="line"> *    ===&gt;     req_filter*           .           *rsp_filter</span><br><span class="line"> *               +                   .                   +</span><br><span class="line"> *               |                   .                   |</span><br><span class="line"> *               \                   .                   /</span><br><span class="line"> *               req_forward-<span class="comment">//  (a) . (c)  \\-rsp_forward</span></span><br><span class="line"> *                                   .</span><br><span class="line"> *                                   .</span><br><span class="line"> *       msg_send &#123;write event&#125;      .      msg_send &#123;write event&#125;</span><br><span class="line"> *         +                         .                         +</span><br><span class="line"> *         |                         .                         |</span><br><span class="line"> *    Rsp<span class="string">&#x27; \                         .                         /     Req&#x27;</span></span><br><span class="line"> *   &lt;===  rsp_send_next             .             req_send_next     ===&gt;</span><br><span class="line"> *           +                       .                       +</span><br><span class="line"> *           |                       .                       |</span><br><span class="line"> *           \                       .                       /</span><br><span class="line"> *           rsp_send_done-<span class="comment">//    (d) . (b)    //-req_send_done</span></span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * (<span class="function"><span class="title">a</span>) -&gt;</span> (<span class="function"><span class="title">b</span>) -&gt;</span> (<span class="function"><span class="title">c</span>) -&gt;</span> (d) <span class="keyword">is</span> the normal flow of transaction consisting</span><br><span class="line"> * of a single request response, <span class="keyword">where</span> (a) <span class="built_in">and</span> (b) handle request from</span><br><span class="line"> * client, <span class="keyword">while</span> (c) <span class="built_in">and</span> (d) handle the corresponding response from the</span><br><span class="line"> * server.</span><br></pre></td></tr></table></figure><h3 id="请求处理流转"><a href="#请求处理流转" class="headerlink" title="请求处理流转"></a>请求处理流转</h3><p>前文说过三种连接，都注册到了事件管理器中，并保存了读写回调函数（proxy连接只有读函数，因为只需要accept接收client连接请求），当有相应的事件触发，就会调用相应的回调函数进行处理，一个请求的处理流程为：client发起连接请求 -&gt; client发起命令请求 -&gt; server连接可写 -&gt; server连接可读 -&gt; client连接可写，下面按这些事件依次介绍，可以看到msg使用到了三个队列（颜色标识）：</p><h4 id="client发起连接请求"><a href="#client发起连接请求" class="headerlink" title="client发起连接请求"></a>client发起连接请求</h4><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687698911895-abc851aa-abae-41be-a144-24a9d4ac7b3f.png" alt="img"></p><h4 id="client发起命令请求"><a href="#client发起命令请求" class="headerlink" title="client发起命令请求"></a>client发起命令请求</h4><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687700943829-ab596e6a-fb6a-4644-aa9d-b6a381f3d9cb.png" alt="img"></p><h4 id="server连接可写事件触发"><a href="#server连接可写事件触发" class="headerlink" title="server连接可写事件触发"></a>server连接可写事件触发</h4><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687700906970-2bc96907-0be8-4183-9de3-c11674c45629.png" alt="img"></p><h4 id="server返回回包触发可读事件"><a href="#server返回回包触发可读事件" class="headerlink" title="server返回回包触发可读事件"></a>server返回回包触发可读事件</h4><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687700885983-8c58d5af-0498-4e8c-a28e-b9e06cc9a765.png" alt="img"></p><h4 id="client连接可写事件触发"><a href="#client连接可写事件触发" class="headerlink" title="client连接可写事件触发"></a>client连接可写事件触发</h4><p><img src="/twemproxy/2023-06-21/redis%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%90%86twemproxy%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/1687700859673-9e866c5e-4d94-4a2e-a57c-0963abea5401.png" alt="img"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><table><thead><tr><th>文章地址</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.cnblogs.com/foxmailed/p/3623817.html">https://www.cnblogs.com/foxmailed/p/3623817.html</a></td><td>源码解析，请求消息的流转过程和处理过程</td></tr><tr><td><a href="https://idning.github.io/twemproxy-src.html">https://idning.github.io/twemproxy-src.html</a></td><td>内容很全，各个介绍，源码分析</td></tr><tr><td><a href="https://hulkdev.com/posts-meitu-opensource-twemproxy/">https://hulkdev.com/posts-meitu-opensource-twemproxy/</a></td><td>美图多进程 twemproxy 开源实现：<a href="https://github.com/bitleak/twemproxy">https://github.com/bitleak/twemproxy</a></td></tr><tr><td><a href="https://juejin.cn/post/6844903981429293063">https://juejin.cn/post/6844903981429293063</a></td><td>twemproxy源码分析，核心流程介绍</td></tr><tr><td><a href="https://github.com/joeylichang/joeylichang.github.io/blob/master/src/redis/twemproxy.md">https://github.com/joeylichang/joeylichang.github.io/blob/master/src/redis/twemproxy.md</a></td><td>Twemproxy介绍</td></tr><tr><td><a href="https://xie.infoq.cn/article/2ee961483c66a146709e7e861">https://xie.infoq.cn/article/2ee961483c66a146709e7e861</a></td><td>结合nginx架构优化twemproxy</td></tr><tr><td><a href="https://xie.infoq.cn/article/2ee961483c66a146709e7e861">https://xie.infoq.cn/article/2ee961483c66a146709e7e861</a></td><td>二次开发，Nginx master-worker机制引入到twemproxy</td></tr><tr><td><a href="https://github.com/twitter/twemproxy/commit/0060f4a6467903ad66d7fe5721653c327ef9f675#diff-1345cb5f953e43b06356881448bf3cecd997604cfd2240f10e994113892ea88a">https://github.com/twitter/twemproxy/commit/0060f4a6467903ad66d7fe5721653c327ef9f675#diff-1345cb5f953e43b06356881448bf3cecd997604cfd2240f10e994113892ea88a</a></td><td>twemproxy添加ping命令修改</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;阅读twemproxy的总结文章,方便后续复看和复用其中的技术&lt;/p&gt;</summary>
    
    
    
    <category term="twemproxy" scheme="http://damotiansheng.github.io/categories/twemproxy/"/>
    
    
    <category term="twemproxy" scheme="http://damotiansheng.github.io/tags/twemproxy/"/>
    
    <category term="redis" scheme="http://damotiansheng.github.io/tags/redis/"/>
    
    <category term="源码总结系列" scheme="http://damotiansheng.github.io/tags/%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>c与c++相互调用</title>
    <link href="http://damotiansheng.github.io/c-c/2017-05-12/c%E4%B8%8Ec++%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8.html"/>
    <id>http://damotiansheng.github.io/c-c/2017-05-12/c%E4%B8%8Ec++%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8.html</id>
    <published>2017-05-12T05:58:26.000Z</published>
    <updated>2023-06-28T13:34:11.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>实现C++中调用C函数以及C调用C++函数。</p><h2 id="C-中调用C函数的实例"><a href="#C-中调用C函数的实例" class="headerlink" title="C++中调用C函数的实例"></a>C++中调用C函数的实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cHeader.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> C_HEADER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_HEADER</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">( <span class="type">int</span> i )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cHeader.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cHeader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">( <span class="type">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;cHeader %d\n&quot;</span>, i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cHeader.h&quot;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c cHeader<span class="selector-class">.c</span></span><br><span class="line">g++ C++<span class="selector-class">.cpp</span> cHeader<span class="selector-class">.o</span></span><br><span class="line">./<span class="selector-tag">a</span><span class="selector-class">.out</span></span><br><span class="line">cHeader <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="C中调用C-函数的实例"><a href="#C中调用C-函数的实例" class="headerlink" title="C中调用C++函数的实例"></a>C中调用C++函数的实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cppHeader.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CPP_HEADER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CPP_HEADER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">( <span class="type">int</span> i )</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cppHeader.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cppHeader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;  //不能有c++专有的头文件，否则无法编译</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">( <span class="type">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;cppHeader &quot; &lt;&lt; i &lt;&lt; endl; //不能有c++专有的函数，否则无法编译</span></span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;%d\n&quot;</span>, i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.c</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"> <span class="built_in">int</span> i </span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">print(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g++ -<span class="keyword">c</span> cppHeader.cpp</span><br><span class="line">gcc <span class="keyword">c</span>.<span class="keyword">c</span> cppHeader.o  //不能使用g++ <span class="keyword">c</span>.<span class="keyword">c</span> cppHeader.o，否则会出现undefined reference <span class="keyword">to</span> `print(int)&#x27;</span><br><span class="line">./a.out</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>若C调用的C++函数中包含了cout等C++符号，则需要做一个中间接口库，对C++库进行二次封装，实例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// world.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">world</span><span class="params">( <span class="type">int</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;world&quot;</span> &lt;&lt; std::endl;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用nm命令查看导出的函数，发现world被修饰后的完整名称为T _Z5worldi, C++默认会返回一个整型，所以前面有T</span></span><br><span class="line"><span class="comment">nm -D libworld.so </span></span><br><span class="line"><span class="comment">0000000000201050 B __bss_start</span></span><br><span class="line"><span class="comment">                 U __cxa_atexit</span></span><br><span class="line"><span class="comment">                 w __cxa_finalize</span></span><br><span class="line"><span class="comment">0000000000201050 D _edata</span></span><br><span class="line"><span class="comment">0000000000201058 B _end</span></span><br><span class="line"><span class="comment">00000000000009c8 T _fini</span></span><br><span class="line"><span class="comment">                 w __gmon_start__</span></span><br><span class="line"><span class="comment">00000000000007c0 T _init</span></span><br><span class="line"><span class="comment">                 w _ITM_deregisterTMCloneTable</span></span><br><span class="line"><span class="comment">                 w _ITM_registerTMCloneTable</span></span><br><span class="line"><span class="comment">                 w _Jv_RegisterClasses</span></span><br><span class="line"><span class="comment">0000000000000935 T _Z5worldi</span></span><br><span class="line"><span class="comment">                 U _ZNSolsEPFRSoS_E</span></span><br><span class="line"><span class="comment">                 U _ZNSt8ios_base4InitC1Ev</span></span><br><span class="line"><span class="comment">                 U _ZNSt8ios_base4InitD1Ev</span></span><br><span class="line"><span class="comment">                 U _ZSt4cout</span></span><br><span class="line"><span class="comment">                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_</span></span><br><span class="line"><span class="comment">                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mid.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">world</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">// 会以C++风格调用world函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;  <span class="comment">// 即使这是一个C++程序，下列这个函数的实现也要以C约定的风格来搞！</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">m_world</span><span class="params">()</span> <span class="comment">// 会生成C风格函数名</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">world</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用nm命令查看导出的函数，发现world被修饰后的完整名称为U _Z5worldi</span></span><br><span class="line"><span class="comment">nm -D libmid.so </span></span><br><span class="line"><span class="comment">0000000000201048 B __bss_start</span></span><br><span class="line"><span class="comment">                 U __cxa_atexit</span></span><br><span class="line"><span class="comment">                 w __cxa_finalize</span></span><br><span class="line"><span class="comment">0000000000201048 D _edata</span></span><br><span class="line"><span class="comment">0000000000201050 B _end</span></span><br><span class="line"><span class="comment">0000000000000884 T _fini</span></span><br><span class="line"><span class="comment">                 w __gmon_start__</span></span><br><span class="line"><span class="comment">00000000000006b0 T _init</span></span><br><span class="line"><span class="comment">                 w _ITM_deregisterTMCloneTable</span></span><br><span class="line"><span class="comment">                 w _ITM_registerTMCloneTable</span></span><br><span class="line"><span class="comment">                 w _Jv_RegisterClasses</span></span><br><span class="line"><span class="comment">0000000000000815 T m_world</span></span><br><span class="line"><span class="comment">                 U _Z5worldi</span></span><br><span class="line"><span class="comment">                 U _ZNSt8ios_base4InitC1Ev</span></span><br><span class="line"><span class="comment">                 U _ZNSt8ios_base4InitD1Ev</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">m_world</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令编译执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g++ <span class="attr">--shared</span> -fPIC -o libworld<span class="selector-class">.so</span> world<span class="selector-class">.cpp</span></span><br><span class="line">sudo cp libworld<span class="selector-class">.so</span> /lib/</span><br><span class="line">g++ <span class="attr">--shared</span> -fPIC -o libmid<span class="selector-class">.so</span> mid<span class="selector-class">.cpp</span> -lworld</span><br><span class="line">sudo cp libmid<span class="selector-class">.so</span> /lib/</span><br><span class="line">gcc test<span class="selector-class">.c</span> -l mid -o test</span><br><span class="line">./test</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cnblogs.com/this-543273659/archive/2011/08/19/2146022.html">http://www.cnblogs.com/this-543273659/archive/2011/08/19/2146022.html</a><br><a href="https://wenku.baidu.com/view/1a851168aef8941ea66e0510.html">https://wenku.baidu.com/view/1a851168aef8941ea66e0510.html</a><br><a href="http://www.cppblog.com/wolf/articles/77828.html">http://www.cppblog.com/wolf/articles/77828.html</a><br><a href="http://www.jianshu.com/p/8d3eb96e142a#">http://www.jianshu.com/p/8d3eb96e142a#</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;实现C++中调用C函数以及C调用C++函数。&lt;/p&gt;
&lt;h2 id=&quot;C-中调用C函数的实例&quot;&gt;&lt;a href=&quot;#C-中调用C函数的实例&quot; class=&quot;headerlink&quot; title=&quot;C++中调用C函数的实例&quot;&gt;&lt;/a&gt;C++中调用C函数的实例&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cHeader.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; C_HEADER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; C_HEADER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="c/c++" scheme="http://damotiansheng.github.io/categories/c-c/"/>
    
    
    <category term="c" scheme="http://damotiansheng.github.io/tags/c/"/>
    
    <category term="c++" scheme="http://damotiansheng.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>装机ubantu</title>
    <link href="http://damotiansheng.github.io/%E8%A3%85%E6%9C%BA/2017-05-09/%E8%A3%85%E6%9C%BAubantu.html"/>
    <id>http://damotiansheng.github.io/%E8%A3%85%E6%9C%BA/2017-05-09/%E8%A3%85%E6%9C%BAubantu.html</id>
    <published>2017-05-09T07:58:00.000Z</published>
    <updated>2023-06-28T13:34:11.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-u盘装ubantu12-04"><a href="#1-u盘装ubantu12-04" class="headerlink" title="1. u盘装ubantu12.04"></a>1. u盘装ubantu12.04</h2><h2 id="2-左侧栏，打开Ubantu软件中心，搜索chrome，安装之-如有书签-文件夹-，导入之；"><a href="#2-左侧栏，打开Ubantu软件中心，搜索chrome，安装之-如有书签-文件夹-，导入之；" class="headerlink" title="2. 左侧栏，打开Ubantu软件中心，搜索chrome，安装之, 如有书签(文件夹)，导入之；"></a>2. 左侧栏，打开Ubantu软件中心，搜索chrome，安装之, 如有书签(文件夹)，导入之；</h2><p>   windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm </p><span id="more"></span><h2 id="3-浏览器chrome下载的文件，往往不完整，故，大文件使用firefox来下载，在firefox中添加插件-DownThemAll-然后安装之，"><a href="#3-浏览器chrome下载的文件，往往不完整，故，大文件使用firefox来下载，在firefox中添加插件-DownThemAll-然后安装之，" class="headerlink" title="3. 浏览器chrome下载的文件，往往不完整，故，大文件使用firefox来下载，在firefox中添加插件:DownThemAll,然后安装之，"></a>3. 浏览器chrome下载的文件，往往不完整，故，大文件使用firefox来下载，在firefox中添加插件:DownThemAll,然后安装之，</h2><p>   在网页上右击，即可下载，右击-》dta OneClick打开DownThemAll插件;</p><h2 id="4-装一个sougou拼音输入法"><a href="#4-装一个sougou拼音输入法" class="headerlink" title="4. 装一个sougou拼音输入法"></a>4. 装一个sougou拼音输入法</h2><p>   <a href="http://pinyin.sogou.com/linux/">http://pinyin.sogou.com/linux/</a><br>   下载: sogoupinyin_1.2.0.0056_amd64.deb<br>    步骤如下：<br>    安装指南Ubuntu &#x2F; Ubuntu Kylin 14.04 LTS 版本只需双击下载的 deb 软件包，即可直接安装搜狗输入法。<br>    Ubuntu 12.04 LTS 版本由于 Ubuntu 12.04 LTS 自带的 Fcitx 版本较旧，需要先通过 PPA 升级，才能安装下载的 deb 软件包。</p><pre><code>1. 点击左上角的图标打开Dash，输入update-manager，点击更新管理器。2. 在更新管理器中，选择菜单：设置-&gt;软件源-》其他软件，点击添加...按钮，在弹出的窗口中输入ppa:fcitx-team/nightly， 点击添加源。3. 然后点击重新载入。4. 打开Ubuntu软件中心，在搜索栏输入fcitx，将会搜出fcitx，然后按照一般软件安装步骤安装即可完成升级。5. dpkg -i sogoupinyin_1.2.0.0056_amd64.deb完成安装6. 注销重新登陆，即可使用搜狗输入法了</code></pre><h2 id="5-安装chrome-evernote插件"><a href="#5-安装chrome-evernote插件" class="headerlink" title="5. 安装chrome evernote插件;"></a>5. 安装chrome evernote插件;</h2><p>  下载： <a href="http://download.csdn.net/detail/findlyu/8300377">http://download.csdn.net/detail/findlyu/8300377</a><br>  打开chrome，打开“工具”-》扩展程序，然后将Evernote-Web-Clipper_v6.2.6.crx插件拖进来即可完成安装；</p><h2 id="6-安装adt-eclipse"><a href="#6-安装adt-eclipse" class="headerlink" title="6. 安装adt-eclipse"></a>6. 安装adt-eclipse</h2><p>注：装系统或三系统，ubantu12.04 64位可以打开ubantu14.04系统的磁盘，并且可以打开其中的应用程序，也可访问windows磁盘，访问其中的资料;</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-u盘装ubantu12-04&quot;&gt;&lt;a href=&quot;#1-u盘装ubantu12-04&quot; class=&quot;headerlink&quot; title=&quot;1. u盘装ubantu12.04&quot;&gt;&lt;/a&gt;1. u盘装ubantu12.04&lt;/h2&gt;&lt;h2 id=&quot;2-左侧栏，打开Ubantu软件中心，搜索chrome，安装之-如有书签-文件夹-，导入之；&quot;&gt;&lt;a href=&quot;#2-左侧栏，打开Ubantu软件中心，搜索chrome，安装之-如有书签-文件夹-，导入之；&quot; class=&quot;headerlink&quot; title=&quot;2. 左侧栏，打开Ubantu软件中心，搜索chrome，安装之, 如有书签(文件夹)，导入之；&quot;&gt;&lt;/a&gt;2. 左侧栏，打开Ubantu软件中心，搜索chrome，安装之, 如有书签(文件夹)，导入之；&lt;/h2&gt;&lt;p&gt;   windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm &lt;/p&gt;</summary>
    
    
    
    <category term="装机" scheme="http://damotiansheng.github.io/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="ubantu" scheme="http://damotiansheng.github.io/tags/ubantu/"/>
    
  </entry>
  
  <entry>
    <title>linux下实用命令</title>
    <link href="http://damotiansheng.github.io/tools/2017-05-09/linux%E4%B8%8B%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://damotiansheng.github.io/tools/2017-05-09/linux%E4%B8%8B%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4.html</id>
    <published>2017-05-09T07:51:35.000Z</published>
    <updated>2023-06-28T13:34:11.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看占用磁盘空间"><a href="#1-查看占用磁盘空间" class="headerlink" title="1. 查看占用磁盘空间"></a>1. 查看占用磁盘空间</h2><p>查看文件夹大小: du -h –max-depth&#x3D;0 dirname<br>查看文件大小：du -h filename</p><h2 id="2-windows到收藏夹格式转换-iconv-f-gb2312-t-utf-8-o-bookmark-utf-8-htm-bookmark-htm"><a href="#2-windows到收藏夹格式转换-iconv-f-gb2312-t-utf-8-o-bookmark-utf-8-htm-bookmark-htm" class="headerlink" title="2. windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm"></a>2. windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm</h2><span id="more"></span><h2 id="3-去除文件每行的行号（会以空格代替行号）："><a href="#3-去除文件每行的行号（会以空格代替行号）：" class="headerlink" title="3. 去除文件每行的行号（会以空格代替行号）："></a>3. 去除文件每行的行号（会以空格代替行号）：</h2><p>sed ‘s&#x2F;^[ 0-9]* &#x2F; &#x2F;‘ globalfifo.c &gt; globalfifo1.c<br>注意一条命令中不能有既作为输入，又作为输出，否则会导致文件为空；如sed ‘s&#x2F;^[ 0-9]* &#x2F; &#x2F;‘ globalfifo.c &gt; globalfifo.c，导致文件globalfifo.c为空<br>去除数字以空字符代替：sed ‘s&#x2F;^[ 0-9]* &#x2F;&#x2F;‘ globalfifo.c &gt; globalfifo1.c</p><h2 id="4-chown-username-uername-file-chmod-R-666-dir-cp-r-srcdir-destdir"><a href="#4-chown-username-uername-file-chmod-R-666-dir-cp-r-srcdir-destdir" class="headerlink" title="4. chown username:uername file; chmod -R 666 dir; cp -r srcdir destdir;"></a>4. chown username:uername file; chmod -R 666 dir; cp -r srcdir destdir;</h2><h2 id="5-强制清空回收站：sudo-rm-fr-HOME-x2F-local-x2F-share-x2F-Trash-x2F-files-x2F"><a href="#5-强制清空回收站：sudo-rm-fr-HOME-x2F-local-x2F-share-x2F-Trash-x2F-files-x2F" class="headerlink" title="5. 强制清空回收站：sudo rm -fr $HOME&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;*"></a>5. 强制清空回收站：sudo rm -fr $HOME&#x2F;.local&#x2F;share&#x2F;Trash&#x2F;files&#x2F;*</h2><h2 id="6-替换代码文件中的中文标点符号，如中文分号；-此时编译会出现-error-stray-‘-357’-in-program"><a href="#6-替换代码文件中的中文标点符号，如中文分号；-此时编译会出现-error-stray-‘-357’-in-program" class="headerlink" title="6. 替换代码文件中的中文标点符号，如中文分号；,此时编译会出现:error: stray ‘\357’ in program"></a>6. 替换代码文件中的中文标点符号，如中文分号；,此时编译会出现:error: stray ‘\357’ in program</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/；/;/&#x27;</span> code1.c &gt; code2.c</span><br><span class="line">替换代码文件中的中文全角空格符号，,此时编译会出现: error: stray ‘\<span class="number">200</span>’ <span class="keyword">in</span> program和error: stray ‘\<span class="number">343</span>’ <span class="keyword">in</span> program</span><br><span class="line">sed <span class="string">&#x27;s/　/ /&#x27;</span> code1.c &gt; code2.c，注意s后门第一个<span class="regexp">//</span>之间的字符为中文全角空格，第二个<span class="regexp">//</span>之间的字符为英文空格</span><br></pre></td></tr></table></figure><h2 id="7-将一个文件所有行以tab键开始"><a href="#7-将一个文件所有行以tab键开始" class="headerlink" title="7. 将一个文件所有行以tab键开始"></a>7. 将一个文件所有行以tab键开始</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/^[]*/     /&#x27;</span> test4<span class="selector-class">.c</span> &gt; test44<span class="selector-class">.c</span> </span><br></pre></td></tr></table></figure><p>其中[]内包含了空格和tab键，最后一个&#x2F;&#x2F;之间的内容为tab键，linux命令行输入tab键:先按Ctrl+v，再按Tab就可以输入了。</p><h2 id="8-杀死除ps和bash的第三个进程"><a href="#8-杀死除ps和bash的第三个进程" class="headerlink" title="8. 杀死除ps和bash的第三个进程"></a>8. 杀死除ps和bash的第三个进程</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kill</span> -<span class="number">9</span> `ps | grep -v bash | grep -v ps | grep -v grep | grep -v awk | awk &#x27;&#123;print $<span class="number">1</span>&#125;&#x27; | grep -v PID`</span><br><span class="line"></span><br><span class="line"><span class="attribute">ps</span>输出如下:</span><br><span class="line"><span class="attribute">15088</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> bash</span><br><span class="line"><span class="attribute">31626</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> a.out</span><br><span class="line"><span class="attribute">31636</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps</span><br></pre></td></tr></table></figure><p>执行上面命令将会杀死a.out</p><h2 id="9-查找某一字符串内容-grep-“dm9000”-r-在当前目录下查找字符串dm9000"><a href="#9-查找某一字符串内容-grep-“dm9000”-r-在当前目录下查找字符串dm9000" class="headerlink" title="9. 查找某一字符串内容: grep “dm9000” -r * 在当前目录下查找字符串dm9000"></a>9. 查找某一字符串内容: grep “dm9000” -r * 在当前目录下查找字符串dm9000</h2><h2 id="10-消除文件中的回车"><a href="#10-消除文件中的回车" class="headerlink" title="10. 消除文件中的回车"></a>10. 消除文件中的回车</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tr</span> -d <span class="string">&#x27;\015&#x27;</span> &lt; <span class="keyword">file</span> &gt; newfiel</span><br></pre></td></tr></table></figure><h2 id="11-定位某个文件-find-x2F-home-name-“-txt”-print"><a href="#11-定位某个文件-find-x2F-home-name-“-txt”-print" class="headerlink" title="11. 定位某个文件: find &#x2F;home -name “*.txt” -print"></a>11. 定位某个文件: find &#x2F;home -name “*.txt” -print</h2><p>用grep搜索一个目录下所有文件中的某个字符串: find &#x2F;usr -type f -print | xargs grep pid_t</p><h2 id="12-df-h-查看磁盘使用情况"><a href="#12-df-h-查看磁盘使用情况" class="headerlink" title="12. df -h 查看磁盘使用情况"></a>12. df -h 查看磁盘使用情况</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-查看占用磁盘空间&quot;&gt;&lt;a href=&quot;#1-查看占用磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;1. 查看占用磁盘空间&quot;&gt;&lt;/a&gt;1. 查看占用磁盘空间&lt;/h2&gt;&lt;p&gt;查看文件夹大小: du -h –max-depth&amp;#x3D;0 dirname&lt;br&gt;查看文件大小：du -h filename&lt;/p&gt;
&lt;h2 id=&quot;2-windows到收藏夹格式转换-iconv-f-gb2312-t-utf-8-o-bookmark-utf-8-htm-bookmark-htm&quot;&gt;&lt;a href=&quot;#2-windows到收藏夹格式转换-iconv-f-gb2312-t-utf-8-o-bookmark-utf-8-htm-bookmark-htm&quot; class=&quot;headerlink&quot; title=&quot;2. windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm&quot;&gt;&lt;/a&gt;2. windows到收藏夹格式转换:iconv -f gb2312 -t utf-8 -o bookmark-utf-8.htm bookmark.htm&lt;/h2&gt;</summary>
    
    
    
    <category term="工具" scheme="http://damotiansheng.github.io/categories/tools/"/>
    
    
    <category term="工具" scheme="http://damotiansheng.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>hadoop之debug</title>
    <link href="http://damotiansheng.github.io/hadoop/2017-05-09/hadoop%E4%B9%8Bdebug.html"/>
    <id>http://damotiansheng.github.io/hadoop/2017-05-09/hadoop%E4%B9%8Bdebug.html</id>
    <published>2017-05-09T07:45:08.000Z</published>
    <updated>2023-06-28T13:34:11.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、hadoop-dfsadmin-safemode-leave离开安全模式后，eclipse之就可以删除文件了；"><a href="#1、hadoop-dfsadmin-safemode-leave离开安全模式后，eclipse之就可以删除文件了；" class="headerlink" title="1、hadoop dfsadmin -safemode leave离开安全模式后，eclipse之就可以删除文件了；"></a>1、hadoop dfsadmin -safemode leave离开安全模式后，eclipse之就可以删除文件了；</h2><h2 id="2、hadoop文件夹下的文件权限不能随便改变，如sudo-chmod-R-a-rw-hadoop-x2F-可能会导致datanode启动不了；"><a href="#2、hadoop文件夹下的文件权限不能随便改变，如sudo-chmod-R-a-rw-hadoop-x2F-可能会导致datanode启动不了；" class="headerlink" title="2、hadoop文件夹下的文件权限不能随便改变，如sudo chmod -R a+rw hadoop&#x2F; 可能会导致datanode启动不了；"></a>2、hadoop文件夹下的文件权限不能随便改变，如sudo chmod -R a+rw hadoop&#x2F; 可能会导致datanode启动不了；</h2><span id="more"></span><p>从而导致：hadoop dfsadmin -report，输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Configured</span> Capacity: <span class="number">0</span> (<span class="number">0</span> KB)</span><br><span class="line"><span class="attribute">Present</span> Capacity: <span class="number">0</span> (<span class="number">0</span> KB)</span><br><span class="line"><span class="attribute">DFS</span> Remaining: <span class="number">0</span> (<span class="number">0</span> KB)</span><br><span class="line"><span class="attribute">DFS</span> Used: <span class="number">0</span> (<span class="number">0</span> KB)</span><br><span class="line"><span class="attribute">DFS</span> Used%: �%</span><br><span class="line"><span class="attribute">Under</span> replicated blocks: <span class="number">0</span></span><br><span class="line"><span class="attribute">Blocks</span> with corrupt replicas: <span class="number">0</span></span><br><span class="line"><span class="attribute">Missing</span> blocks: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>总之，那里出问题，看logs文件夹下对应的日志文件</p><h2 id="3、Hadoop运行class类出现Exception-in-thread-“main”-java-lang-NoClassDefFoundError"><a href="#3、Hadoop运行class类出现Exception-in-thread-“main”-java-lang-NoClassDefFoundError" class="headerlink" title="3、Hadoop运行class类出现Exception in thread “main” java.lang.NoClassDefFoundError"></a>3、Hadoop运行class类出现Exception in thread “main” java.lang.NoClassDefFoundError</h2><p>这个问题一直让我自己写的class类无法再hadoop平台运行，困惑好几天了，看权威指南的进度直接无进展。<br>解决方法是在 conf&#x2F;hadoop-env.sh添加hadoop的类路径<br>export HADOOP_CLASSPATH&#x3D;.<br>还有用javac编译hadoop平台的java代码要用到好多的hadoop的class类，一直写 javac -classpath …<br>很麻烦，可以在 ~&#x2F;.bashrc 中添加如下语句：<br>export CLASSPATH&#x3D;”$CLASSPATH:$HADOOP_HOME&#x2F;hadoop-core-0.20.203.0.jar:$HADOOP_HOME&#x2F;lib&#x2F;commons-cli-1.2.jar”</p><p>from: <a href="http://blog.chinaunix.net/uid-27672830-id-3374186.html">http://blog.chinaunix.net/uid-27672830-id-3374186.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、hadoop-dfsadmin-safemode-leave离开安全模式后，eclipse之就可以删除文件了；&quot;&gt;&lt;a href=&quot;#1、hadoop-dfsadmin-safemode-leave离开安全模式后，eclipse之就可以删除文件了；&quot; class=&quot;headerlink&quot; title=&quot;1、hadoop dfsadmin -safemode leave离开安全模式后，eclipse之就可以删除文件了；&quot;&gt;&lt;/a&gt;1、hadoop dfsadmin -safemode leave离开安全模式后，eclipse之就可以删除文件了；&lt;/h2&gt;&lt;h2 id=&quot;2、hadoop文件夹下的文件权限不能随便改变，如sudo-chmod-R-a-rw-hadoop-x2F-可能会导致datanode启动不了；&quot;&gt;&lt;a href=&quot;#2、hadoop文件夹下的文件权限不能随便改变，如sudo-chmod-R-a-rw-hadoop-x2F-可能会导致datanode启动不了；&quot; class=&quot;headerlink&quot; title=&quot;2、hadoop文件夹下的文件权限不能随便改变，如sudo chmod -R a+rw hadoop&amp;#x2F; 可能会导致datanode启动不了；&quot;&gt;&lt;/a&gt;2、hadoop文件夹下的文件权限不能随便改变，如sudo chmod -R a+rw hadoop&amp;#x2F; 可能会导致datanode启动不了；&lt;/h2&gt;</summary>
    
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>读写hdfs代码</title>
    <link href="http://damotiansheng.github.io/hadoop/2017-05-09/%E8%AF%BB%E5%86%99hdfs%E4%BB%A3%E7%A0%81.html"/>
    <id>http://damotiansheng.github.io/hadoop/2017-05-09/%E8%AF%BB%E5%86%99hdfs%E4%BB%A3%E7%A0%81.html</id>
    <published>2017-05-09T07:41:36.000Z</published>
    <updated>2023-06-28T13:34:11.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-读取hdfs文件"><a href="#1-读取hdfs文件" class="headerlink" title="1) 读取hdfs文件"></a>1) 读取hdfs文件</h2><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileSystemCat.java:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSystemCat</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line">fs = FileSystem.get( URI.create(uri), conf );</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) </span><br><span class="line">&#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">in = fs.open( <span class="keyword">new</span> <span class="title class_">Path</span>(uri) );</span><br><span class="line">IOUtils.copyBytes( in, System.out, <span class="number">4096</span>, <span class="literal">false</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( Exception e )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">IOUtils.closeStream(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-将本地文件复制到hadoop文件系统"><a href="#2-将本地文件复制到hadoop文件系统" class="headerlink" title="2) 将本地文件复制到hadoop文件系统"></a>2) 将本地文件复制到hadoop文件系统</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileCopyWithProgress.java:</span></span><br><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.net.URI;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Progressable;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopyWithProgress</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">localSrc</span> <span class="operator">=</span> args[<span class="number">0</span>];  </span><br><span class="line">        <span class="type">String</span> <span class="variable">dst</span> <span class="operator">=</span> args[<span class="number">1</span>];  </span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(localSrc));  </span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();  </span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(dst), conf);  </span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(dst), <span class="keyword">new</span> <span class="title class_">Progressable</span>()&#123;  </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">progress</span><span class="params">()</span>&#123;  </span><br><span class="line">                System.out.print(<span class="string">&quot;.&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">          </span><br><span class="line">        IOUtils.copyBytes(in, out, <span class="number">4096</span>, <span class="literal">true</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$ hadoop FileCopyWithProgress input/<span class="number">1.</span>txt hdfs:<span class="comment">//localhost/user/2.txt</span></span><br><span class="line">.......</span><br><span class="line">上面的点为显示进度</span><br></pre></td></tr></table></figure><h2 id="3-URLCat-java"><a href="#3-URLCat-java" class="headerlink" title="3) URLCat.java"></a>3) URLCat.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FsUrlStreamHandlerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLCat</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span></span><br><span class="line">&#123;</span><br><span class="line">URL.setURLStreamHandlerFactory( <span class="keyword">new</span> <span class="title class_">FsUrlStreamHandlerFactory</span>() );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">URL</span>(args[<span class="number">0</span>]).openStream();</span><br><span class="line">IOUtils.copyBytes( in, System.out, <span class="number">4096</span>, <span class="literal">false</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( Exception e )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">IOUtils.closeStream(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-读取hdfs文件&quot;&gt;&lt;a href=&quot;#1-读取hdfs文件&quot; class=&quot;headerlink&quot; title=&quot;1) 读取hdfs文件&quot;&gt;&lt;/a&gt;1) 读取hdfs文件&lt;/h2&gt;</summary>
    
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>完整启动hadoop步骤</title>
    <link href="http://damotiansheng.github.io/hadoop/2017-05-09/%E5%AE%8C%E6%95%B4%E5%90%AF%E5%8A%A8hadoop%E6%AD%A5%E9%AA%A4.html"/>
    <id>http://damotiansheng.github.io/hadoop/2017-05-09/%E5%AE%8C%E6%95%B4%E5%90%AF%E5%8A%A8hadoop%E6%AD%A5%E9%AA%A4.html</id>
    <published>2017-05-09T07:33:16.000Z</published>
    <updated>2023-06-28T13:34:11.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>有时启动hadoop会出现各种问题，现给出完整的启动hadoop步骤，搭建hadoop,请参考：<a href="http://blog.csdn.net/zhaoyl03/article/details/8657104">http://blog.csdn.net/zhaoyl03/article/details/8657104</a>。</p><span id="more"></span><h2 id="启动步骤如下"><a href="#启动步骤如下" class="headerlink" title="启动步骤如下"></a>启动步骤如下</h2><blockquote><ul><li>1）jps查看namenode等是否已经启动，若是，则kill之；</li></ul></blockquote><blockquote><ul><li>2）切换用户: su - hadoop(因为开始我执行过: su chown -R hadoop:hadoop hadoop，即将hadoop目录属主和用户组全部改为hadoop用户和hadoop用户组了,为了防止权限问题，切换为hadoop用户);</li></ul></blockquote><blockquote><ul><li>3）清空hadoop.tmp.dir目录和&#x2F;tmp&#x2F;hadoop<em>：<br>查看conf&#x2F;core-site.xml文件，查看hadoop.tmp.dir值，我的为&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp<br>sudo rm -rf &#x2F;tmp&#x2F;hadoop</em><br>sudo rm -rf &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&#x2F;*</li></ul></blockquote><blockquote><ul><li>4）ps -e | grep namenode等，ps -e | grep java，kill掉java进程等相关进程，否则启动时可能会出现:<br> ERROR org.apache.hadoop.hdfs.server.namenode.NameNode: java.io.IOException<br>: Cannot lock storage &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;datalog1. The directory is already locked.</li></ul></blockquote><blockquote><ul><li>5）格式化: bin&#x2F;hadoop namenode -format<br>出现下面相关内容表示成功：<br>15&#x2F;05&#x2F;28 15:52:25 INFO namenode.NameNode: SHUTDOWN_MSG:<br>&#x2F;************************************************************</li></ul><p>SHUTDOWN_MSG: Shutting down NameNode at hulin-HP-Pro-3380-MT&#x2F;127.0.1.1<br>************************************************************&#x2F;</p></blockquote><blockquote><ul><li>6）启动: bin&#x2F;start-all.sh</li></ul></blockquote><blockquote><ul><li>7）jps查看java进程，启动成功如下：<br>27950 NameNode<br>28811 TaskTracker<br>28896 Jps<br>28559 JobTracker<br>28469 SecondaryNameNode<br>28199 DataNode</li></ul></blockquote><blockquote><ul><li>8）若某一进程启动失败，查看logs文件夹下的.log文件，找出异常，百度谷歌之即可解决；</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;有时启动hadoop会出现各种问题，现给出完整的启动hadoop步骤，搭建hadoop,请参考：&lt;a href=&quot;http://blog.csdn.net/zhaoyl03/article/details/8657104&quot;&gt;http://blog.csdn.net/zhaoyl03/article/details/8657104&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="http://damotiansheng.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hexo本地测试github博客</title>
    <link href="http://damotiansheng.github.io/hexo/2017-04-19/hexo%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95github%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://damotiansheng.github.io/hexo/2017-04-19/hexo%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95github%E5%8D%9A%E5%AE%A2.html</id>
    <published>2017-04-19T08:51:54.000Z</published>
    <updated>2023-06-28T13:34:11.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行如下命令"><a href="#执行如下命令" class="headerlink" title="执行如下命令"></a>执行如下命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/damotiansheng/damotiansheng.github.io.source.git</span></span><br><span class="line">cd damotiansheng<span class="selector-class">.github</span><span class="selector-class">.io</span>.source/</span><br><span class="line">cp _config<span class="selector-class">.yml</span> _config<span class="selector-class">.yml</span><span class="selector-class">.bak</span></span><br><span class="line">npm install hexo <span class="attr">--save</span></span><br><span class="line">npm install hexo-server <span class="attr">--save</span></span><br><span class="line">hexo init .  <span class="comment">//会覆盖_config.yml</span></span><br><span class="line">cp _config<span class="selector-class">.yml</span><span class="selector-class">.bak</span> _config<span class="selector-class">.yml</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a>查看效果即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;执行如下命令&quot;&gt;&lt;a href=&quot;#执行如下命令&quot; class=&quot;headerlink&quot; title=&quot;执行如下命令&quot;&gt;&lt;/a&gt;执行如下命令&lt;/h2&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo错误集</title>
    <link href="http://damotiansheng.github.io/hexo/2017-04-14/hexo%E9%94%99%E8%AF%AF%E9%9B%86.html"/>
    <id>http://damotiansheng.github.io/hexo/2017-04-14/hexo%E9%94%99%E8%AF%AF%E9%9B%86.html</id>
    <published>2017-04-14T10:29:31.000Z</published>
    <updated>2023-06-28T13:34:11.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题1：出现：ERROR-Plugin-load-failed-hexo-generator-json-content"><a href="#问题1：出现：ERROR-Plugin-load-failed-hexo-generator-json-content" class="headerlink" title="问题1：出现：ERROR Plugin load failed: hexo-generator-json-content"></a>问题1：出现：ERROR Plugin load failed: hexo-generator-json-content</h2><p>解决：把node升级到6.0版本及以上，此为还要将.travis.yml中的nodejs版本改为6；<br>参考文章：<a href="http://www.cnblogs.com/arvin0/p/6664239.html">http://www.cnblogs.com/arvin0/p/6664239.html</a></p><span id="more"></span><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><blockquote><ul><li>1）node-v6.2.0-linux-x64.tar.gz</li></ul></blockquote><blockquote><ul><li>2）.&#x2F;npm install g hexo<br>安装完后，node-v6.2.0-linux-x64&#x2F;bin&#x2F;node_modules目录即有hexo可执行文件了。</li></ul></blockquote><blockquote><ul><li>3）将.travis.yum中的nodejs版本改为6</li></ul></blockquote><blockquote><ul><li>4）博客根目录执行：npm i hexo-generator-json-content –save</li></ul></blockquote><blockquote><ul><li>5）发布</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题1：出现：ERROR-Plugin-load-failed-hexo-generator-json-content&quot;&gt;&lt;a href=&quot;#问题1：出现：ERROR-Plugin-load-failed-hexo-generator-json-content&quot; class=&quot;headerlink&quot; title=&quot;问题1：出现：ERROR Plugin load failed: hexo-generator-json-content&quot;&gt;&lt;/a&gt;问题1：出现：ERROR Plugin load failed: hexo-generator-json-content&lt;/h2&gt;&lt;p&gt;解决：把node升级到6.0版本及以上，此为还要将.travis.yml中的nodejs版本改为6；&lt;br&gt;参考文章：&lt;a href=&quot;http://www.cnblogs.com/arvin0/p/6664239.html&quot;&gt;http://www.cnblogs.com/arvin0/p/6664239.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>nginx总结</title>
    <link href="http://damotiansheng.github.io/uncategorized/2017-04-11/nginx%E6%80%BB%E7%BB%93.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2017-04-11/nginx%E6%80%BB%E7%BB%93.html</id>
    <published>2017-04-11T07:29:31.000Z</published>
    <updated>2023-06-28T13:34:11.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过阅读网上nginx相关博客以及下载的nginx源码，对nginx有了一定的了解，现进行一些总结，总结如下所示。<span id="more"></span></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>1）gdb -p pid进行调试pid进程；<br>2）gdb不停收到sigtrap信号：<br>设置断点之后，有时总会收到上面的信号，导致无法执行到断点位置，解决方法，在收到该信号时，执行：<br>set $ps&amp;&#x3D;~(1&lt;&lt;8)即可。</p><h2 id="使用内存池思想"><a href="#使用内存池思想" class="headerlink" title="使用内存池思想"></a>使用内存池思想</h2><p>新来连接直接从连接结构体内存池取一个结构体用，释放则挂上去即可，无须每次来连接就申请内存，且这里为大块内存，避免了内存碎片，连接结构体里面有事件结构体，监听读写也只需加入该结构体中的信息到epoll即可，无需每次监听某个读写事件都申请内存。如：Ngxin对于每个建立成功的TCP连接会预先分配一个内存池。也就是ngx_connection_t结构体中的pool，在处理HTTP请求时，将会为每个请求分配一个内存池。</p><h2 id="使用位域节约空间。"><a href="#使用位域节约空间。" class="headerlink" title="使用位域节约空间。"></a>使用位域节约空间。</h2><h2 id="使用accept锁避免惊群问题。"><a href="#使用accept锁避免惊群问题。" class="headerlink" title="使用accept锁避免惊群问题。"></a>使用accept锁避免惊群问题。</h2><h2 id="使用红黑树处理超时事件。"><a href="#使用红黑树处理超时事件。" class="headerlink" title="使用红黑树处理超时事件。"></a>使用红黑树处理超时事件。</h2><h2 id="master进程管理多个worker进程，多个worker进程处理连接，并发量加大。"><a href="#master进程管理多个worker进程，多个worker进程处理连接，并发量加大。" class="headerlink" title="master进程管理多个worker进程，多个worker进程处理连接，并发量加大。"></a>master进程管理多个worker进程，多个worker进程处理连接，并发量加大。</h2><h2 id="使用自己缓存的时间，避免gettimeofday（需要发送中断给linux内核，内核需要做进程间切换来处理这个调用）系统调用的频繁调用。"><a href="#使用自己缓存的时间，避免gettimeofday（需要发送中断给linux内核，内核需要做进程间切换来处理这个调用）系统调用的频繁调用。" class="headerlink" title="使用自己缓存的时间，避免gettimeofday（需要发送中断给linux内核，内核需要做进程间切换来处理这个调用）系统调用的频繁调用。"></a>使用自己缓存的时间，避免gettimeofday（需要发送中断给linux内核，内核需要做进程间切换来处理这个调用）系统调用的频繁调用。</h2><h2 id="采用事件驱动模型，依据不同的运行平台，选择合适的IO复用函数，如epoll。"><a href="#采用事件驱动模型，依据不同的运行平台，选择合适的IO复用函数，如epoll。" class="headerlink" title="采用事件驱动模型，依据不同的运行平台，选择合适的IO复用函数，如epoll。"></a>采用事件驱动模型，依据不同的运行平台，选择合适的IO复用函数，如epoll。</h2><h2 id="具有自动重启worker进程的功能，即发现某个worker进程退出了，自动开启一个新的worker进程。"><a href="#具有自动重启worker进程的功能，即发现某个worker进程退出了，自动开启一个新的worker进程。" class="headerlink" title="具有自动重启worker进程的功能，即发现某个worker进程退出了，自动开启一个新的worker进程。"></a>具有自动重启worker进程的功能，即发现某个worker进程退出了，自动开启一个新的worker进程。</h2><h2 id="具有不中断服务的情况下平滑升级nginx程序的功能。"><a href="#具有不中断服务的情况下平滑升级nginx程序的功能。" class="headerlink" title="具有不中断服务的情况下平滑升级nginx程序的功能。"></a>具有不中断服务的情况下平滑升级nginx程序的功能。</h2><h2 id="具有不中断服务器的情况下重新加载配置文件，使配置文件马上生效的功能。"><a href="#具有不中断服务器的情况下重新加载配置文件，使配置文件马上生效的功能。" class="headerlink" title="具有不中断服务器的情况下重新加载配置文件，使配置文件马上生效的功能。"></a>具有不中断服务器的情况下重新加载配置文件，使配置文件马上生效的功能。</h2><h2 id="采用模块化思想，可以添加-x2F-删除外部模块，具有更大的扩展性。"><a href="#采用模块化思想，可以添加-x2F-删除外部模块，具有更大的扩展性。" class="headerlink" title="采用模块化思想，可以添加&#x2F;删除外部模块，具有更大的扩展性。"></a>采用模块化思想，可以添加&#x2F;删除外部模块，具有更大的扩展性。</h2><h2 id="采用socketpair创建channel-2-用于master与worker以及worker之间（只不过这里没有通信）的通信。"><a href="#采用socketpair创建channel-2-用于master与worker以及worker之间（只不过这里没有通信）的通信。" class="headerlink" title="采用socketpair创建channel[2]用于master与worker以及worker之间（只不过这里没有通信）的通信。"></a>采用socketpair创建channel[2]用于master与worker以及worker之间（只不过这里没有通信）的通信。</h2><h2 id="可以托管网站以及作为反向代理。"><a href="#可以托管网站以及作为反向代理。" class="headerlink" title="可以托管网站以及作为反向代理。"></a>可以托管网站以及作为反向代理。</h2><h2 id="nginx使用非阻塞模式，将一个HTTP请求分成多个阶段，细化处理，并不会阻塞在某一个读-x2F-写上，而是阻塞在epoll上以提高并发。"><a href="#nginx使用非阻塞模式，将一个HTTP请求分成多个阶段，细化处理，并不会阻塞在某一个读-x2F-写上，而是阻塞在epoll上以提高并发。" class="headerlink" title="nginx使用非阻塞模式，将一个HTTP请求分成多个阶段，细化处理，并不会阻塞在某一个读&#x2F;写上，而是阻塞在epoll上以提高并发。"></a>nginx使用非阻塞模式，将一个HTTP请求分成多个阶段，细化处理，并不会阻塞在某一个读&#x2F;写上，而是阻塞在epoll上以提高并发。</h2><h2 id="创建一个监听fd（调用socket，bing，listen）之后，只要某个进程能得到该fd，该进程就可以accept它得到连接。"><a href="#创建一个监听fd（调用socket，bing，listen）之后，只要某个进程能得到该fd，该进程就可以accept它得到连接。" class="headerlink" title="创建一个监听fd（调用socket，bing，listen）之后，只要某个进程能得到该fd，该进程就可以accept它得到连接。"></a>创建一个监听fd（调用socket，bing，listen）之后，只要某个进程能得到该fd，该进程就可以accept它得到连接。</h2><h2 id="nginx通过尽量减少内存拷贝来提高效率"><a href="#nginx通过尽量减少内存拷贝来提高效率" class="headerlink" title="nginx通过尽量减少内存拷贝来提高效率"></a>nginx通过尽量减少内存拷贝来提高效率</h2><p>在整个解析http请求的状态机中始终遵循着两条重要的原则：减少内存拷贝和回溯。内存拷贝是一个相对比较昂贵的操作，大量的内存拷贝会带来较低的运行时效率。nginx在需要做内存拷贝的地方尽量只拷贝内存的起始和结束地址而不是内存本身，这样做的话仅仅只需要两个赋值操作而已，大大降低了开销，当然这样带来的影响是后续的操作不能修改内存本身，如果修改的话，会影响到所有引用到该内存区间的地方，所以必须很小心的管理，必要的时候需要拷贝一份。这里不得不提到nginx中最能体现这一思想的数据结构，ngx_buf_t，它用来表示nginx中的缓存，在很多情况下，只需要将一块内存的起始地址和结束地址分别保存在它的pos和last成员中，再将它的memory标志置1，即可表示一块不能修改的内存区间，在另外的需要一块能够修改的缓存的情形中，则必须分配一块所需大小的内存并保存其起始地址，再将ngx_bug_t的temprary标志置1，表示这是一块能够被修改的内存区域。</p><h2 id="一个nginx进程可以并发的处理处于不同阶段的多个请求。"><a href="#一个nginx进程可以并发的处理处于不同阶段的多个请求。" class="headerlink" title="一个nginx进程可以并发的处理处于不同阶段的多个请求。"></a>一个nginx进程可以并发的处理处于不同阶段的多个请求。</h2><h2 id="nginx使用到的进程间通信和同步方法"><a href="#nginx使用到的进程间通信和同步方法" class="headerlink" title="nginx使用到的进程间通信和同步方法"></a>nginx使用到的进程间通信和同步方法</h2><p>进程间通信：套接字、共享内存、信号；<br>同步方法：原子操作、信号量、文件锁；</p><h2 id="nginx中的负载均衡算法"><a href="#nginx中的负载均衡算法" class="headerlink" title="nginx中的负载均衡算法"></a>nginx中的负载均衡算法</h2><p>实现代码很不错，如加权轮询算法和IP哈希算法，详情见博客：<a href="http://blog.csdn.net/column/details/nginxroad.html">http://blog.csdn.net/column/details/nginxroad.html</a><br>注：这里的负载均衡算法指的是如何从一些后台服务器和备用服务器中选择一台服务器作为处理请求的服务器。</p><h2 id="分配内存时会进行内存对齐，如ngx-pmemalign函数。"><a href="#分配内存时会进行内存对齐，如ngx-pmemalign函数。" class="headerlink" title="分配内存时会进行内存对齐，如ngx_pmemalign函数。"></a>分配内存时会进行内存对齐，如ngx_pmemalign函数。</h2><h2 id="优秀的数据结构"><a href="#优秀的数据结构" class="headerlink" title="优秀的数据结构"></a>优秀的数据结构</h2><p>红黑树ngx_rbtree_t、基数树ngx_radix_tree_t（字典树）、动态数组ngx_array_t、单向链表ngx_list_t、双向链表ngx_queue_t、哈希表ngx_hash_t、缓冲区链表ngx_chain_t、内存池ngx_pool_t等，各种实现值得参考。</p><h2 id="nginx针对http请求数据无法一次性读取完时如何处理该http请求？"><a href="#nginx针对http请求数据无法一次性读取完时如何处理该http请求？" class="headerlink" title="nginx针对http请求数据无法一次性读取完时如何处理该http请求？"></a>nginx针对http请求数据无法一次性读取完时如何处理该http请求？</h2><p>ngx_event_t <em>rev，rev-&gt;data保存ngx_connection_t</em> c指针，ngx_http_wait_request_handler函数中会将c-&gt;data设置为ngx_http_request_t<br>指针，代表当前处理的请求，这样当用户来请求了，而数据一次性无法读取完，设置对应阶段的回调函数，当再次有数据到来时，nginx会通过rev得到先前的请求ngx_http_request_t，从而得到先前已经读取到的数据，这些数据是保存在ngx_http_request_t结构体中的。</p><h2 id="nginx系列博客："><a href="#nginx系列博客：" class="headerlink" title="nginx系列博客："></a>nginx系列博客：</h2><p><a href="http://blog.csdn.net/yusiguyuan/article/category/2091295">http://blog.csdn.net/yusiguyuan/article/category/2091295</a><br><a href="http://blog.csdn.net/column/details/nginxroad.html">http://blog.csdn.net/column/details/nginxroad.html</a><br><a href="http://blog.csdn.net/jy02326166/article/category/2332871">http://blog.csdn.net/jy02326166/article/category/2332871</a><br><a href="http://blog.csdn.net/livelylittlefish">http://blog.csdn.net/livelylittlefish</a><br><a href="http://blog.csdn.net/chen19870707/article/category/2647301">http://blog.csdn.net/chen19870707/article/category/2647301</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过阅读网上nginx相关博客以及下载的nginx源码，对nginx有了一定的了解，现进行一些总结，总结如下所示。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="http://damotiansheng.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>storage服务器与tracker服务器的一次命令处理过程</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-10/storage%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Etracker%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E6%AC%A1%E5%91%BD%E4%BB%A4%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-10/storage%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Etracker%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E6%AC%A1%E5%91%BD%E4%BB%A4%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B.html</id>
    <published>2016-12-10T08:52:25.000Z</published>
    <updated>2023-06-28T13:34:11.992Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章简单介绍下storage server(client端)向tracker server(server端)发送一个命令，然后server端处理命令，client端得到结果的流程。</p><span id="more"></span><h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><p>storage server通过向server端建立连接，发送一个带包头的数据包，tracker server主线程监听得到该fd，并将该fd按轮询写入到某一个管道，从而选择一个work线程来处理，该work线程调用recv_notify_read函数得到fd，接着设置READ事件并使用IO复用函数（如epoll）进行监听，READ事件的处理函数为client_sock_read，当client端发送命令过来时，该函数被调用，当接收完一个完整的命令包时会调用tracker_deal_task(pTask)函数进行命令的分发处理，调用client_sock_write函数发送response, 发送完毕后，继续监听该fd的读事件，而storage server则会读取得到reponse数据，从而得到命令的结果。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><a href="http://blog.csdn.net/lctel/article/details/12752803">来源于</a><br>storage server发送TRACKER_PROTO_CMD_STORAGE_GET_SERVER_ID命令：<br>storage进程main-&gt;storage_func_init-&gt;storage_func_init-&gt;tracker_get_my_server_id-&gt;tracker_get_storage_id-&gt;tcpsenddata_nb(TRACKER_PROTO_CMD_STORAGE_GET_SERVER_ID)&#x2F;fdfs_recv_response<br>tracker作服务端处理：<br>tracker_deal_task(TRACKER_PROTO_CMD_STORAGE_GET_SERVER_ID)-&gt;tracker_deal_get_storage_id-&gt;fdfs_get_storage_id_by_ip</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章简单介绍下storage server(client端)向tracker server(server端)发送一个命令，然后server端处理命令，client端得到结果的流程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs之storage主流程</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8Bstorage%E4%B8%BB%E6%B5%81%E7%A8%8B.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8Bstorage%E4%B8%BB%E6%B5%81%E7%A8%8B.html</id>
    <published>2016-12-04T09:08:51.000Z</published>
    <updated>2023-06-28T13:34:11.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p><a href="http://blog.chinaunix.net/uid-20498361-id-3328762.html">相关文章</a><br>1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；<br>2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；<br>3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；</p><span id="more"></span><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="type">nio_thread_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="type">ioevent_puller</span> ev_puller; <span class="comment">//IO multiplexing function: poll, kqueue </span></span><br><span class="line"><span class="keyword">struct</span> <span class="type">fast_timer</span> timer; <span class="comment">// time wheel </span></span><br><span class="line">int pipe_fds[<span class="number">2</span>]; <span class="comment">//to wake up current thread who owns current nio_thread_data</span></span><br><span class="line"><span class="keyword">struct</span> <span class="type">fast_task_info</span> *deleted_list;</span><br><span class="line">ThreadLoopCallback thread_loop_callback;</span><br><span class="line">void *arg;   <span class="comment">//extra argument pointer</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">storage_nio_thread_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="type">nio_thread_data</span> thread_data;</span><br><span class="line">GroupArray group_array;  <span class="comment">//FastDHT group array</span></span><br><span class="line">&#125;;</span><br><span class="line">每个工作线程对应一个storage_nio_thread_data结构</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fdfs_storaged.c-&gt;main函数</span></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">char *conf_filename;</span><br><span class="line">int result;</span><br><span class="line">int sock;</span><br><span class="line">int wait_count;</span><br><span class="line">pthread_t schedule_tid;</span><br><span class="line">struct sigaction act;</span><br><span class="line">ScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_MAX_COUNT];</span><br><span class="line">ScheduleArray scheduleArray;</span><br><span class="line">char pidFilename[MAX_PATH_SIZE];</span><br><span class="line">bool stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_current_time = time(NULL);</span><br><span class="line">g_up_time = g_current_time;</span><br><span class="line"></span><br><span class="line">log_init2();  <span class="comment">//init the log system</span></span><br><span class="line">trunk_shared_init(); <span class="comment">// init the g_fdfs_base64_context global variable</span></span><br><span class="line"></span><br><span class="line">conf_filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=get_base_path_from_conf_file(conf_filename,</span><br><span class="line">g_fdfs_base_path, sizeof(g_fdfs_base_path))) != <span class="number">0</span>) <span class="comment">// get base path from conf_filename</span></span><br><span class="line">&#123;</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">snprintf(pidFilename, sizeof(pidFilename),</span><br><span class="line"><span class="string">&quot;%s/data/fdfs_storaged.pid&quot;</span>, g_fdfs_base_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=process_action(pidFilename, argv[<span class="number">2</span>], &amp;stop)) != <span class="number">0</span>)<span class="comment">// process command: restart/stop/start</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == EINVAL)</span><br><span class="line">&#123;</span><br><span class="line">usage(argv[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stop)</span><br><span class="line">&#123;</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span><br><span class="line"><span class="keyword">if</span> (getExeAbsoluteFilename(argv[<span class="number">0</span>], g_exe_name, \</span><br><span class="line">sizeof(g_exe_name)) == NULL) <span class="comment">//get the absolute path of exe file saved to g_exe_name</span></span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : ENOENT;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">daemon_init(<span class="literal">false</span>); <span class="comment">// set to daemon mode </span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">memset(g_bind_addr, <span class="number">0</span>, sizeof(g_bind_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=storage_func_init(conf_filename, \</span><br><span class="line">g_bind_addr, sizeof(g_bind_addr))) != <span class="number">0</span>) <span class="comment">// parse the conf_filename and get some values saved to global variable</span></span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*g_bind_addr = &#x27;\0&#x27;, g_server_port=23000</span></span><br><span class="line"><span class="comment">// socketServer to finish socket, bind, listen</span></span><br><span class="line">sock = socketServer(g_bind_addr, g_server_port, &amp;result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sock &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tcpsetserveropt: set send/recv timeout and keepalive parameter</span></span><br><span class="line"><span class="keyword">if</span> ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=write_to_pid_file(pidFilename)) != <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create base_path and the sync path, create file: binlog.000(default), init the sync_thread_lock </span></span><br><span class="line"><span class="keyword">if</span> ((result=storage_sync_init()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;storage_sync_init fail, program exit!&quot;</span>, __LINE__);</span><br><span class="line">g_continue_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init the lock of reporter_thread_lock, clear g_storage_servers and g_sorted_storages</span></span><br><span class="line"><span class="keyword">if</span> ((result=tracker_report_init()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;tracker_report_init fail, program exit!&quot;</span>, __LINE__);</span><br><span class="line">g_continue_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//create 4 work thread default, init some lock, build a task object(fast_task_info) pool(g_free_queue)</span></span><br><span class="line"><span class="keyword">if</span> ((result=storage_service_init()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;storage_service_init fail, program exit!&quot;</span>, __LINE__);</span><br><span class="line">g_continue_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init the rand generator</span></span><br><span class="line"><span class="keyword">if</span> ((result=set_rand_seed()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;set_rand_seed fail, program exit!&quot;</span>, __LINE__);</span><br><span class="line">g_continue_flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(&amp;act, <span class="number">0</span>, sizeof(act));</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line"></span><br><span class="line">act.sa_handler = sigUsrHandler; <span class="comment">// sigUsrHandler do nothing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sigaction(SIGUSR1, &amp;act, NULL) &lt; <span class="number">0</span> || \</span><br><span class="line">sigaction(SIGUSR2, &amp;act, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = sigHupHandler; <span class="comment">// set g_log_context.rotate_immediately to true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sigaction(SIGHUP, &amp;act, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = SIG_IGN;</span><br><span class="line"><span class="keyword">if</span>(sigaction(SIGPIPE, &amp;act, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = sigQuitHandler;</span><br><span class="line"><span class="keyword">if</span>(sigaction(SIGINT, &amp;act, NULL) &lt; <span class="number">0</span> || \</span><br><span class="line">sigaction(SIGTERM, &amp;act, NULL) &lt; <span class="number">0</span> || \</span><br><span class="line">sigaction(SIGQUIT, &amp;act, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> defined(DEBUG_FLAG)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(OS_LINUX)</span></span><br><span class="line"><span class="comment">memset(&amp;act, 0, sizeof(act));</span></span><br><span class="line"><span class="comment">        act.sa_sigaction = sigSegvHandler;</span></span><br><span class="line"><span class="comment">        act.sa_flags = SA_SIGINFO;</span></span><br><span class="line"><span class="comment">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \</span></span><br><span class="line"><span class="comment">        sigaction(SIGABRT, &amp;act, NULL) &lt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">logCrit(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \</span></span><br><span class="line"><span class="comment">&quot;call sigaction fail, errno: %d, error info: %s&quot;, \</span></span><br><span class="line"><span class="comment">__LINE__, errno, STRERROR(errno));</span></span><br><span class="line"><span class="comment">logCrit(&quot;exit abnormally!\n&quot;);</span></span><br><span class="line"><span class="comment">return errno;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">memset(&amp;act, <span class="number">0</span>, sizeof(act));</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">act.sa_handler = sigDumpHandler;</span><br><span class="line"><span class="keyword">if</span>(sigaction(SIGUSR1, &amp;act, NULL) &lt; <span class="number">0</span> || \</span><br><span class="line">sigaction(SIGUSR2, &amp;act, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifdef WITH_HTTPD</span><br><span class="line"><span class="keyword">if</span> (!g_http_params.disabled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((result=storage_httpd_start(g_bind_addr)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;storage_httpd_start fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;program exit!&quot;</span>, __LINE__);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">     <span class="comment">// create some child thread, a thread conrresoponds to one tracker server</span></span><br><span class="line"><span class="keyword">if</span> ((result=tracker_report_thread_start()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;tracker_report_thread_start fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;program exit!&quot;</span>, __LINE__);</span><br><span class="line">g_continue_flag = <span class="literal">false</span>;</span><br><span class="line">storage_func_destroy();</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scheduleArray.entries = scheduleEntries;</span><br><span class="line">scheduleArray.count = <span class="number">0</span>;</span><br><span class="line">memset(scheduleEntries, <span class="number">0</span>, sizeof(scheduleEntries));</span><br><span class="line"></span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_sync_binlog_buff_interval, fdfs_binlog_sync_func, NULL);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_sync_stat_file_interval, fdfs_stat_file_sync_func, NULL);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_if_use_trunk_file)</span><br><span class="line">&#123;</span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line"><span class="number">1</span>, trunk_binlog_sync_func, NULL);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_use_access_log)</span><br><span class="line">&#123;</span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_sync_log_buff_interval, log_sync_func, &amp;g_access_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rotate_access_log)</span><br><span class="line">&#123;</span><br><span class="line">INIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, g_access_log_rotate_time,</span><br><span class="line"><span class="number">24</span> * <span class="number">3600</span>, log_notify_rotate, &amp;g_access_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_log_file_keep_days &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">log_set_keep_days(&amp;g_access_log_context,</span><br><span class="line">g_log_file_keep_days);</span><br><span class="line"></span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span> * <span class="number">3600</span>,</span><br><span class="line">log_delete_old_files, &amp;g_access_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rotate_error_log)</span><br><span class="line">&#123;</span><br><span class="line">INIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, g_error_log_rotate_time,</span><br><span class="line"><span class="number">24</span> * <span class="number">3600</span>, log_notify_rotate, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_log_file_keep_days &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">log_set_keep_days(&amp;g_log_context, g_log_file_keep_days);</span><br><span class="line"></span><br><span class="line">INIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span> * <span class="number">3600</span>,</span><br><span class="line">log_delete_old_files, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// create a thread to schedule log_sync_func,fdfs_stat_file_sync_func and so on</span></span><br><span class="line"><span class="keyword">if</span> ((result=sched_start(&amp;scheduleArray, &amp;schedule_tid, \</span><br><span class="line">g_thread_stack_size, (bool * volatile)&amp;g_continue_flag)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// set current group and user of current process</span></span><br><span class="line"><span class="keyword">if</span> ((result=set_run_by(g_run_by_group, g_run_by_user)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create read and write thread: dio_thread_entrance for every store_path,</span></span><br><span class="line">    <span class="comment">// one path has a read thread and a write thread default</span></span><br><span class="line"><span class="keyword">if</span> ((result=storage_dio_init()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logCrit(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log_set_cache(<span class="literal">true</span>); <span class="comment">// set g_log_context.log_to_cache to true</span></span><br><span class="line"></span><br><span class="line">bTerminateFlag = <span class="literal">false</span>;</span><br><span class="line">bAcceptEndFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">storage_accept_loop(sock); <span class="comment">// enter main thread loop, accept to get fd, and wakeup child thread to process</span></span><br><span class="line">bAcceptEndFlag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">fdfs_binlog_sync_func(NULL);  <span class="comment">//binlog fsync</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_schedule_flag)</span><br><span class="line">&#123;</span><br><span class="line">pthread_kill(schedule_tid, SIGINT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storage_terminate_threads();  <span class="comment">// wakeup work thread to quit</span></span><br><span class="line">storage_dio_terminate();      <span class="comment">// terminate the io thread</span></span><br><span class="line"></span><br><span class="line">kill_tracker_report_threads(); <span class="comment">// kill report thread</span></span><br><span class="line">kill_storage_sync_threads();</span><br><span class="line"></span><br><span class="line">wait_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (g_storage_thread_count != <span class="number">0</span> || \</span><br><span class="line">g_dio_thread_count != <span class="number">0</span> || \</span><br><span class="line">g_tracker_reporter_count &gt; <span class="number">0</span> || \</span><br><span class="line">g_schedule_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span></span><br><span class="line"><span class="comment">if (bSegmentFault)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sleep(5);</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">usleep(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">if</span> (++wait_count &gt; <span class="number">6000</span>)</span><br><span class="line">&#123;</span><br><span class="line">logWarning(<span class="string">&quot;waiting timeout, exit!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tracker_report_destroy();</span><br><span class="line">storage_service_destroy();</span><br><span class="line">storage_sync_destroy();</span><br><span class="line">storage_func_destroy();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_if_use_trunk_file)</span><br><span class="line">&#123;</span><br><span class="line">trunk_sync_destroy();</span><br><span class="line">storage_trunk_destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logInfo(<span class="string">&quot;exit normally.\n&quot;</span>);</span><br><span class="line">log_destroy();</span><br><span class="line"></span><br><span class="line">delete_pid_file(pidFilename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程函数</span></span><br><span class="line"><span class="comment">// storage server main thread, accept to get the fd, save some info, and write the address of (struct fast_task_info),</span></span><br><span class="line"><span class="comment">// it contains the fd</span></span><br><span class="line"><span class="keyword">static</span> void *accept_thread_entrance(void* arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> server_sock;</span><br><span class="line"><span class="keyword">int</span> incomesock;</span><br><span class="line">struct sockaddr_in inaddr;</span><br><span class="line">socklen_t sockaddr_len;</span><br><span class="line">in_addr_t client_addr;</span><br><span class="line"><span class="keyword">char</span> szClientIp[IP_ADDRESS_SIZE];</span><br><span class="line"><span class="keyword">long</span> task_addr;</span><br><span class="line">struct fast_task_info *pTask;</span><br><span class="line">StorageClientInfo *pClientInfo;</span><br><span class="line">struct storage_nio_thread_data *pThreadData;</span><br><span class="line"></span><br><span class="line">server_sock = (<span class="keyword">long</span>)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (g_continue_flag)</span><br><span class="line">&#123;</span><br><span class="line">sockaddr_len = sizeof(inaddr);</span><br><span class="line">incomesock = accept(server_sock, (struct sockaddr*)&amp;inaddr, \</span><br><span class="line">&amp;sockaddr_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (incomesock &lt; <span class="number">0</span>) <span class="comment">//error</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(errno == EINTR || errno == EAGAIN))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;accept failed, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, errno, STRERROR(errno));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client_addr = getPeerIpaddr(incomesock, \</span><br><span class="line">szClientIp, IP_ADDRESS_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_allow_ip_count &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bsearch(&amp;client_addr, g_allow_ip_addrs, \</span><br><span class="line">g_allow_ip_count, sizeof(in_addr_t), \</span><br><span class="line">cmp_by_ip_addr_t) == NULL)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;ip addr %s is not allowed to access&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, szClientIp);</span><br><span class="line"></span><br><span class="line">close(incomesock);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set non block for fd</span></span><br><span class="line"><span class="keyword">if</span> (tcpsetnonblockopt(incomesock) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(incomesock);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pTask = free_queue_pop(); <span class="comment">// get a free task object from free task object pool(g_free_queue)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pTask == NULL)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;malloc task buff failed&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>);</span><br><span class="line">close(incomesock);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pClientInfo = (StorageClientInfo *)pTask-&gt;arg; <span class="comment">// pTask-&gt;arg is pointer to (StorageClientInfo *), see storage_service_init-&gt;free_queue_init_ex func</span></span><br><span class="line">pTask-&gt;event.fd = incomesock;</span><br><span class="line">pClientInfo-&gt;stage = FDFS_STORAGE_STAGE_NIO_INIT; <span class="comment">//will be used in storage_recv_notify_read function</span></span><br><span class="line">pClientInfo-&gt;nio_thread_index = pTask-&gt;event.fd % g_work_threads;</span><br><span class="line">pThreadData = g_nio_thread_data + pClientInfo-&gt;nio_thread_index;</span><br><span class="line"></span><br><span class="line">strcpy(pTask-&gt;client_ip, szClientIp);</span><br><span class="line"></span><br><span class="line">task_addr = (<span class="keyword">long</span>)pTask; <span class="comment">// convert address to long, and write the long</span></span><br><span class="line"><span class="keyword">if</span> (write(pThreadData-&gt;thread_data.pipe_fds[<span class="number">1</span>], &amp;task_addr, \</span><br><span class="line">sizeof(task_addr)) != sizeof(task_addr))</span><br><span class="line">&#123;</span><br><span class="line">close(incomesock);</span><br><span class="line">free_queue_push(pTask);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call write failed, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, errno, STRERROR(errno));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> current_connections;</span><br><span class="line">            current_connections = __sync_add_and_fetch(&amp;g_storage_stat.connection.</span><br><span class="line">                    current_count, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current_connections &gt; g_storage_stat.connection.max_count) </span><br><span class="line">&#123;</span><br><span class="line">                g_storage_stat.connection.max_count = current_connections;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++g_stat_change_count;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作线程函数</span></span><br><span class="line"><span class="comment">// default is 4 threads to call work_thread_entrance</span></span><br><span class="line"><span class="keyword">static</span> void *work_thread_entrance(void* arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">struct storage_nio_thread_data *pThreadData;</span><br><span class="line"></span><br><span class="line">pThreadData = (struct storage_nio_thread_data *)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_check_file_duplicate) <span class="comment">// check duplicate, here just leave it</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((result=fdht_copy_group_array(&amp;(pThreadData-&gt;group_array),\</span><br><span class="line">&amp;g_group_array)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;g_storage_thread_lock);</span><br><span class="line">g_storage_thread_count--;</span><br><span class="line">pthread_mutex_unlock(&amp;g_storage_thread_lock);</span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ioevent_loop(&amp;pThreadData-&gt;thread_data, storage_recv_notify_read,</span><br><span class="line">task_finish_clean_up, &amp;g_continue_flag);  <span class="comment">// epoll wait to listen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// free free(ioevent-&gt;events) and close(ioevent-&gt;poll_fd) </span></span><br><span class="line">ioevent_destroy(&amp;pThreadData-&gt;thread_data.ev_puller);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_check_file_duplicate)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (g_keep_alive)</span><br><span class="line">&#123;</span><br><span class="line">fdht_disconnect_all_servers(&amp;(pThreadData-&gt;group_array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fdht_free_group_array(&amp;(pThreadData-&gt;group_array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_lock(&amp;g_storage_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_storage_thread_count--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_unlock(&amp;g_storage_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logDebug(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;nio thread exited, thread count: %d&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, g_storage_thread_count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void storage_recv_notify_read(<span class="keyword">int</span> sock, short event, void *arg)</span><br><span class="line">&#123;</span><br><span class="line">struct fast_task_info *pTask;</span><br><span class="line">StorageClientInfo *pClientInfo;</span><br><span class="line"><span class="keyword">long</span> task_addr;</span><br><span class="line">int64_t remain_bytes;</span><br><span class="line"><span class="keyword">int</span> bytes;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;         <span class="comment">// read a address of buffer, it is the address of (struct fast_task_info), see accept_thread_entrance func</span></span><br><span class="line"><span class="keyword">if</span> ((bytes=read(sock, &amp;task_addr, sizeof(task_addr))) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(errno == EAGAIN || errno == EWOULDBLOCK))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call read failed, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, errno, STRERROR(errno));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call read failed, end of file&quot;</span>, <span class="keyword">__LINE__</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pTask = (struct fast_task_info *)task_addr; </span><br><span class="line">pClientInfo = (StorageClientInfo *)pTask-&gt;arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pTask-&gt;event.fd &lt; <span class="number">0</span>)  <span class="comment">//quit flag</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* //logInfo(&quot;=====thread index: %d, pTask-&gt;event.fd=%d&quot;, \</span></span><br><span class="line"><span class="comment">pClientInfo-&gt;nio_thread_index, pTask-&gt;event.fd);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pClientInfo-&gt;stage &amp; FDFS_STORAGE_STAGE_DIO_THREAD)</span><br><span class="line">&#123;</span><br><span class="line">pClientInfo-&gt;stage &amp;= ~FDFS_STORAGE_STAGE_DIO_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (pClientInfo-&gt;stage)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FDFS_STORAGE_STAGE_NIO_INIT:</span><br><span class="line">result = storage_nio_init(pTask);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> FDFS_STORAGE_STAGE_NIO_RECV:</span><br><span class="line">pTask-&gt;offset = <span class="number">0</span>;</span><br><span class="line">remain_bytes = pClientInfo-&gt;total_length - \</span><br><span class="line">       pClientInfo-&gt;total_offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (remain_bytes &gt; pTask-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">pTask-&gt;length = pTask-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pTask-&gt;length = remain_bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (set_recv_event(pTask) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">client_sock_read(pTask-&gt;event.fd,</span><br><span class="line">IOEVENT_READ, pTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> FDFS_STORAGE_STAGE_NIO_SEND:</span><br><span class="line">result = storage_send_add_event(pTask);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FDFS_STORAGE_STAGE_NIO_CLOSE:</span><br><span class="line">result = EIO;   <span class="comment">//close this socket</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;invalid stage: %d&quot;</span>, <span class="keyword">__LINE__</span>, \</span><br><span class="line">pClientInfo-&gt;stage);</span><br><span class="line">result = EINVAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">add_to_deleted_list(pTask);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;主要工作&quot;&gt;&lt;a href=&quot;#主要工作&quot; class=&quot;headerlink&quot; title=&quot;主要工作&quot;&gt;&lt;/a&gt;主要工作&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-20498361-id-3328762.html&quot;&gt;相关文章&lt;/a&gt;&lt;br&gt;1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；&lt;br&gt;2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；&lt;br&gt;3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs之超时事件的处理</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8B%E8%B6%85%E6%97%B6%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8B%E8%B6%85%E6%97%B6%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86.html</id>
    <published>2016-12-04T06:52:34.000Z</published>
    <updated>2023-06-28T13:34:11.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>fastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；<br><a href="http://blog.csdn.net/solstice/article/details/6395098">Timing wheel1</a><br><a href="http://blog.csdn.net/mindfloating/article/details/8033340">Timing wheel2</a></p><span id="more"></span><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">fast_timer_entry</span> &#123;</span><br><span class="line">  <span class="type">int64_t</span> expires;</span><br><span class="line">  <span class="type">void</span> *data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">fast_timer_entry</span> *prev;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">fast_timer_entry</span> *next;</span><br><span class="line">  <span class="type">bool</span> rehash;</span><br><span class="line">&#125; FastTimerEntry;  <span class="comment">// pre and next to construct a double linked list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">fast_timer_slot</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">fast_timer_entry</span> head;</span><br><span class="line">&#125; FastTimerSlot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">fast_timer</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> slot_count;    <span class="comment">//time wheel slot count, default is 60</span></span><br><span class="line">  <span class="type">int64_t</span> base_time; <span class="comment">//base time for slot 0, set to current time， 基准事件</span></span><br><span class="line">  <span class="type">int64_t</span> current_time; <span class="comment">//set to current time</span></span><br><span class="line">  FastTimerSlot *slots; <span class="comment">//the size is sizeof(FastTimerSlot) * slot_count</span></span><br><span class="line">&#125; FastTimer;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_GET_SLOT_INDEX(timer, expires) \</span></span><br><span class="line"><span class="meta">  (((expires) - timer-&gt;base_time) % timer-&gt;slot_count)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_GET_SLOT_POINTER(timer, expires) \</span></span><br><span class="line"><span class="meta">  (timer-&gt;slots + TIMER_GET_SLOT_INDEX(timer, expires))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><p>&#x2F;&#x2F; fast_timer.h&#x2F;fast_timer.c<br>&#x2F;&#x2F; init the timer, slot_count&#x3D;60<br>int fast_timer_init(FastTimer *timer, const int slot_count,<br>    const int64_t current_time)<br>{<br>  int bytes;</p><p>  if (slot_count &lt;&#x3D; 0 || current_time &lt;&#x3D; 0)<br>  {<br>    return EINVAL;<br>  }</p><p>  timer-&gt;slot_count &#x3D; slot_count;  &#x2F;&#x2F;default is 60<br>  timer-&gt;base_time &#x3D; current_time; &#x2F;&#x2F;base time for slot 0<br>  timer-&gt;current_time &#x3D; current_time;<br>  bytes &#x3D; sizeof(FastTimerSlot) * slot_count;<br>  timer-&gt;slots &#x3D; (FastTimerSlot *)malloc(bytes);</p><p>  if (timer-&gt;slots &#x3D;&#x3D; NULL)<br>  {<br>     return errno !&#x3D; 0 ? errno : ENOMEM;<br>  }</p><p>  memset(timer-&gt;slots, 0, bytes);<br>  return 0;</p><p>}</p><p>int ioevent_loop(struct nio_thread_data *pThreadData,<br>    IOEventCallback recv_notify_callback, TaskCleanUpCallback<br>    clean_up_callback, volatile bool *continue_flag)<br>{<br>    int result;<br>    IOEventEntry ev_notify;<br>    FastTimerEntry head;<br>    struct fast_task_info *pTask;<br>    time_t last_check_time;<br>    int count;</p><pre><code>memset(&amp;ev_notify, 0, sizeof(ev_notify));ev_notify.fd = pThreadData-&gt;pipe_fds[0];ev_notify.callback = recv_notify_callback;if (ioevent_attach(&amp;pThreadData-&gt;ev_puller,    pThreadData-&gt;pipe_fds[0], IOEVENT_READ,    &amp;ev_notify) != 0)&#123;    result = errno != 0 ? errno : ENOMEM;    logCrit(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \        &quot;ioevent_attach fail, &quot; \        &quot;errno: %d, error info: %s&quot;, \        __LINE__, result, STRERROR(result));    return result;&#125;pThreadData-&gt;deleted_list = NULL;last_check_time = g_current_time;while (*continue_flag)&#123;    // one seconds later, ioevent_poll will return    pThreadData-&gt;ev_puller.iterator.count = ioevent_poll(&amp;pThreadData-&gt;ev_puller); //若没有fd就绪，1秒后会超时返回（ioevent_init函数设置了timeout为1秒）        if (pThreadData-&gt;ev_puller.iterator.count &gt; 0)    &#123;        deal_ioevents(&amp;pThreadData-&gt;ev_puller);    &#125;    else if (pThreadData-&gt;ev_puller.iterator.count &lt; 0) // error occured    &#123;        result = errno != 0 ? errno : EINVAL;                if (result != EINTR)        &#123;            logError(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \                &quot;ioevent_poll fail, &quot; \                &quot;errno: %d, error info: %s&quot;, \                __LINE__, result, STRERROR(result));            return result;        &#125;    &#125;    // timeout, 1 second later     if (pThreadData-&gt;deleted_list != NULL) // cleanup task callback is not null    &#123;        count = 0;                while (pThreadData-&gt;deleted_list != NULL)        &#123;            pTask = pThreadData-&gt;deleted_list;            pThreadData-&gt;deleted_list = pTask-&gt;next;            clean_up_callback(pTask);            count++;        &#125;                logDebug(&quot;cleanup task count: %d&quot;, count);    &#125;    if (g_current_time - last_check_time &gt; 0)    &#123;        last_check_time = g_current_time;  // the unit of g_current_time is seconds         count = fast_timer_timeouts_get(            &amp;pThreadData-&gt;timer, g_current_time, &amp;head); // get the expire event count，得到已经超时的事件                    if (count &gt; 0)  // timeout event has been saved to head        &#123;            deal_timeouts(&amp;head); // process the timeout event，处理超时事件        &#125;    &#125;    if (pThreadData-&gt;thread_loop_callback != NULL)     &#123;        pThreadData-&gt;thread_loop_callback(pThreadData);  // call this function every one loop     &#125;    &#125;return 0;</code></pre><p>}</p><p>&#x2F;&#x2F; save expired FastTimerEntry to head<br>int fast_timer_timeouts_get(FastTimer *timer, const int64_t current_time,<br>   FastTimerEntry *head)<br>{<br>  FastTimerSlot *slot;<br>  FastTimerEntry *entry;<br>  FastTimerEntry *first;<br>  FastTimerEntry *last;<br>  FastTimerEntry *tail;<br>  int count;</p><p>  head-&gt;prev &#x3D; NULL;<br>  head-&gt;next &#x3D; NULL;</p><p>  if (timer-&gt;current_time &gt;&#x3D; current_time) &#x2F;&#x2F; don’t timeout, just return<br>  {<br>    return 0;<br>  }</p><p>  first &#x3D; NULL;<br>  last &#x3D; NULL;<br>  tail &#x3D; head;<br>  count &#x3D; 0;</p><p>  while (timer-&gt;current_time &lt; current_time)<br>  {<br>    slot &#x3D; TIMER_GET_SLOT_POINTER(timer, timer-&gt;current_time++); &#x2F;&#x2F;<br>    entry &#x3D; slot-&gt;head.next;</p><pre><code>while (entry != NULL) &#123;  if (entry-&gt;expires &gt;= current_time) //not expired  &#123;       if (first != NULL)      &#123;        first-&gt;prev-&gt;next = entry;        entry-&gt;prev = first-&gt;prev;        tail-&gt;next = first;        first-&gt;prev = tail;        tail = last;        first = NULL;     &#125;          if (entry-&gt;rehash)      &#123;       last = entry;       entry = entry-&gt;next;       last-&gt;rehash = false;       fast_timer_remove(timer, last);       fast_timer_add(timer, last);       continue;     &#125;       &#125;  else         //expired  &#123;       count++;          if (first == NULL)      &#123;        first = entry;     &#125;  &#125;  last = entry;  entry = entry-&gt;next;&#125;if (first != NULL) &#123;   first-&gt;prev-&gt;next = NULL;   tail-&gt;next = first;   first-&gt;prev = tail;   tail = last;   first = NULL;&#125;</code></pre><p>  }</p><p>  if (count &gt; 0)<br>  {<br>     tail-&gt;next &#x3D; NULL;<br>  }</p><p>  return count;<br>}</p><p>&#x2F;&#x2F;插入超时事件<br>&#x2F;&#x2F; add entry to timer according to entry-&gt;expires<br>int fast_timer_add(FastTimer *timer, FastTimerEntry *entry)<br>{<br>  FastTimerSlot *slot;</p><p>  slot &#x3D; TIMER_GET_SLOT_POINTER(timer, entry-&gt;expires &gt;<br>     timer-&gt;current_time ? entry-&gt;expires : timer-&gt;current_time);<br>  entry-&gt;next &#x3D; slot-&gt;head.next;</p><p>  if (slot-&gt;head.next !&#x3D; NULL)<br>  {<br>    slot-&gt;head.next-&gt;prev &#x3D; entry;<br>  }</p><p>  entry-&gt;prev &#x3D; &amp;slot-&gt;head;<br>  slot-&gt;head.next &#x3D; entry;<br>  entry-&gt;rehash &#x3D; false;<br>  return 0;<br>}</p><pre><code></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h2&gt;&lt;p&gt;fastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/solstice/article/details/6395098&quot;&gt;Timing wheel1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/mindfloating/article/details/8033340&quot;&gt;Timing wheel2&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
    <category term="超时事件" scheme="http://damotiansheng.github.io/tags/%E8%B6%85%E6%97%B6%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs之事件监听</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html</id>
    <published>2016-12-04T06:25:51.000Z</published>
    <updated>2023-06-28T13:34:11.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>fastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；<br><a href="http://blog.csdn.net/yusiguyuan/article/details/15027821">epoll机制</a></p><span id="more"></span><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ioevent_puller</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;  <span class="comment">//set to g_max_connections + 2,default is 256+2, max events (fd) , equal as the parameter of epoll_create</span></span><br><span class="line">    <span class="type">int</span> extra_events;</span><br><span class="line">    <span class="type">int</span> poll_fd; <span class="comment">// poll_fd = epoll_create(ioevent-&gt;size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">When  successful,  epoll_wait()  returns the number of file descriptors</span></span><br><span class="line"><span class="comment">       ready for the requested I/O, or zero if no file descriptor became ready</span></span><br><span class="line"><span class="comment">       during  the  requested  timeout  milliseconds.   When  an error occurs,</span></span><br><span class="line"><span class="comment">       epoll_wait() returns -1 and errno is set appropriately.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">struct</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="type">int</span> count;  <span class="comment">// count=epoll_wait(...)</span></span><br><span class="line">    &#125; iterator;  <span class="comment">//for deal event loop</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> *events; <span class="comment">// the size is ( size * sizeof(struct epoll_event) )</span></span><br><span class="line">    <span class="type">int</span> timeout;                  <span class="comment">// default is 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> IOEVENT_USE_KQUEUE</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">kevent</span> *events;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timespec</span> timeout;</span><br><span class="line">    <span class="type">int</span> care_events;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> IOEVENT_USE_PORT</span></span><br><span class="line">    <span class="type">port_event_t</span> *events;</span><br><span class="line">    <span class="type">timespec_t</span> timeout;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; IOEventPoller;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*IOEventCallback)</span> <span class="params">(<span class="type">int</span> sock, <span class="type">short</span> event, <span class="type">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ioevent_entry</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd;                <span class="comment">// it will be added to nio_thread_data-&gt;ev_puller</span></span><br><span class="line">FastTimerEntry timer; <span class="comment">// for event timeout, it will be added to nio_thread_data-&gt;timer</span></span><br><span class="line">IOEventCallback callback;</span><br><span class="line">&#125; IOEventEntry;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> IOEVENT_GET_EVENTS(ioevent, index) \</span></span><br><span class="line"><span class="meta">      ioevent-&gt;events[index].events</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> IOEVENT_GET_DATA(ioevent, index)  \</span></span><br><span class="line"><span class="meta">      ioevent-&gt;events[index].data.ptr</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//ioevent_init(&amp;pThreadData-&gt;ev_puller,g_max_connections + 2, 1000, 0) // 1000毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size=256+2, timeout_ms=1000, extra_events=0</span></span><br><span class="line"><span class="comment">// ioevent_init(&amp;pThreadData-&gt;ev_puller, g_max_connections + 2, 1000, 0)</span></span><br><span class="line">int ioevent_init(IOEventPoller *ioevent, const int size,</span><br><span class="line">    const int timeout_ms, const int extra_events)</span><br><span class="line">&#123;</span><br><span class="line">  int bytes;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>size = size;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>extra_events = extra_events;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>iterator.index = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>iterator.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span><span class="function"><span class="title">poll_fd</span> = epoll_create(ioevent-&gt;</span>size);</span><br><span class="line">  bytes = sizeof(struct epoll_event) * size;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>events = (struct epoll_event *)malloc(bytes);</span><br><span class="line">#elif IOEVENT_USE_KQUEUE</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>poll_fd = kqueue();</span><br><span class="line">  bytes = sizeof(struct kevent) * size;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>events = (struct kevent *)malloc(bytes);</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>care_events = <span class="number">0</span>;</span><br><span class="line">#elif IOEVENT_USE_PORT</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>poll_fd = port_create();</span><br><span class="line">  bytes = sizeof(port_event_t) * size;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>events = (port_event_t *)malloc(bytes);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">if</span> (ioevent-&gt;</span>events == NULL) </span><br><span class="line">  &#123;</span><br><span class="line">    return errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the ioevent-&gt;timeout to timeout_ms</span></span><br><span class="line">  ioevent_set_timeout(ioevent, timeout_ms); <span class="comment">// 设置超时时间为1秒</span></span><br><span class="line"></span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//事件监听处理循环</span></span><br><span class="line"><span class="comment">//ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up, &amp;g_continue_flag);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</span></span><br><span class="line"><span class="comment">&amp;g_continue_flag);</span></span><br><span class="line"><span class="comment">// g_continue_flag is true default</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">int ioevent_loop(struct nio_thread_data *pThreadData,</span><br><span class="line">IOEventCallback recv_notify_callback, TaskCleanUpCallback</span><br><span class="line">clean_up_callback, volatile bool *continue_flag)</span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line">IOEventEntry ev_notify;</span><br><span class="line">FastTimerEntry head;</span><br><span class="line">struct fast_task_info *pTask;</span><br><span class="line">time_t last_check_time;</span><br><span class="line">int count;</span><br><span class="line"></span><br><span class="line">memset(&amp;ev_notify, <span class="number">0</span>, sizeof(ev_notify));</span><br><span class="line"><span class="function"><span class="title">ev_notify</span>.fd = pThreadData-&gt;</span>pipe_fds[<span class="number">0</span>];</span><br><span class="line">ev_notify.callback = recv_notify_callback;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span> (ioevent_attach(&amp;pThreadData-&gt;</span>ev_puller,</span><br><span class="line"><span class="function"><span class="title">pThreadData</span>-&gt;</span>pipe_fds[<span class="number">0</span>], IOEVENT_READ,</span><br><span class="line">&amp;ev_notify) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">logCrit(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;ioevent_attach fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, result, STRERROR(result));</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pThreadData</span>-&gt;</span>deleted_list = NULL;</span><br><span class="line">last_check_time = g_current_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (*continue_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// one seconds later, ioevent_poll will return</span></span><br><span class="line"><span class="function"><span class="title">pThreadData</span>-&gt;</span><span class="function"><span class="title">ev_puller</span>.iterator.count = ioevent_poll(&amp;pThreadData-&gt;</span>ev_puller);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span> (pThreadData-&gt;</span>ev_puller.iterator.count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="title">deal_ioevents</span>(&amp;pThreadData-&gt;</span>ev_puller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">else</span> <span class="keyword">if</span> (pThreadData-&gt;</span>ev_puller.iterator.count &lt; <span class="number">0</span>) <span class="comment">// error occured</span></span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != EINTR)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;ioevent_poll fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, result, STRERROR(result));</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// timeout, 1 second later </span></span><br><span class="line"><span class="function"><span class="title">if</span> (pThreadData-&gt;</span>deleted_list != NULL) <span class="comment">// cleanup task callback is not null</span></span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">while</span> (pThreadData-&gt;</span>deleted_list != NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="title">pTask</span> = pThreadData-&gt;</span>deleted_list;</span><br><span class="line"><span class="function"><span class="title">pThreadData</span>-&gt;</span><span class="function"><span class="title">deleted_list</span> = pTask-&gt;</span>next;</span><br><span class="line"></span><br><span class="line">clean_up_callback(pTask);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logDebug(<span class="string">&quot;cleanup task count: %d&quot;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_current_time - last_check_time &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">last_check_time = g_current_time;  <span class="comment">// the unit of g_current_time is seconds </span></span><br><span class="line">count = fast_timer_timeouts_get(</span><br><span class="line">&amp;<span class="function"><span class="title">pThreadData</span>-&gt;</span>timer, g_current_time, &amp;head); <span class="comment">// get the expire event count</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>)  <span class="comment">// timeout event has been saved to head</span></span><br><span class="line">&#123;</span><br><span class="line">deal_timeouts(&amp;head); <span class="comment">// process the timeout event</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">if</span> (pThreadData-&gt;</span>thread_loop_callback != NULL) </span><br><span class="line">&#123;</span><br><span class="line">            <span class="function"><span class="title">pThreadData</span>-&gt;</span>thread_loop_callback(pThreadData);  <span class="comment">// call this function every one loop </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ioevent_poll(IOEventPoller *ioevent)</span><br><span class="line">&#123;</span><br><span class="line">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span><br><span class="line">  <span class="function"><span class="title">return</span> epoll_wait(ioevent-&gt;</span><span class="function"><span class="title">poll_fd</span>, ioevent-&gt;</span><span class="function"><span class="title">events</span>, ioevent-&gt;</span><span class="function"><span class="title">size</span>, ioevent-&gt;</span>timeout);</span><br><span class="line">#elif IOEVENT_USE_KQUEUE</span><br><span class="line">  <span class="function"><span class="title">return</span> kevent(ioevent-&gt;</span><span class="function"><span class="title">poll_fd</span>, NULL, 0, ioevent-&gt;</span><span class="function"><span class="title">events</span>, ioevent-&gt;</span><span class="function"><span class="title">size</span>, &amp;ioevent-&gt;</span>timeout);</span><br><span class="line">#elif IOEVENT_USE_PORT</span><br><span class="line">  int result;</span><br><span class="line">  int retval;</span><br><span class="line">  unsigned int nget = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="title">if</span>((retval = port_getn(ioevent-&gt;</span><span class="function"><span class="title">poll_fd</span>, ioevent-&gt;</span>events,</span><br><span class="line">          <span class="function"><span class="title">ioevent</span>-&gt;</span><span class="function"><span class="title">size</span>, &amp;nget, &amp;ioevent-&gt;</span>timeout)) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    result = (int)nget;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    switch(errno) &#123;</span><br><span class="line">      case EINTR:</span><br><span class="line">      case EAGAIN:</span><br><span class="line">      case ETIME:</span><br><span class="line">        <span class="keyword">if</span> (nget &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          result = (int)nget;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        result = -<span class="number">1</span>;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">#error port me</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a fd event to ioevent to listen</span></span><br><span class="line"><span class="comment">// ioevent_attach(&amp;pThread-&gt;ev_puller,sock, event, pTask)</span></span><br><span class="line">int ioevent_attach(IOEventPoller *ioevent, const int fd, const int e,</span><br><span class="line">    void *<span class="keyword">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">#<span class="keyword">if</span> IOEVENT_USE_EPOLL</span><br><span class="line">  struct epoll_event ev;</span><br><span class="line">  memset(&amp;ev, <span class="number">0</span>, sizeof(ev));</span><br><span class="line">  <span class="function"><span class="title">ev</span>.events = e | ioevent-&gt;</span>extra_events;</span><br><span class="line">  ev.<span class="keyword">data</span>.ptr = <span class="keyword">data</span>;<span class="comment">// 将参数保存到data.ptr中去，依据上面的调用data为IOEventEntry结构类型</span></span><br><span class="line">  <span class="function"><span class="title">return</span> epoll_ctl(ioevent-&gt;</span>poll_fd, EPOLL_CTL_ADD, fd, &amp;ev);</span><br><span class="line">#elif IOEVENT_USE_KQUEUE</span><br><span class="line">  struct kevent ev[<span class="number">2</span>];</span><br><span class="line">  int n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (e &amp; IOEVENT_READ) &#123;</span><br><span class="line">    EV_SET(&amp;<span class="function"><span class="title">ev</span>[n++], fd, EVFILT_READ, EV_ADD | ioevent-&gt;</span>extra_events, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e &amp; IOEVENT_WRITE) &#123;</span><br><span class="line">    EV_SET(&amp;<span class="function"><span class="title">ev</span>[n++], fd, EVFILT_WRITE, EV_ADD | ioevent-&gt;</span>extra_events, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">ioevent</span>-&gt;</span>care_events = e;</span><br><span class="line">  <span class="function"><span class="title">return</span> kevent(ioevent-&gt;</span>poll_fd, ev, n, NULL, <span class="number">0</span>, NULL);</span><br><span class="line">#elif IOEVENT_USE_PORT</span><br><span class="line">  <span class="function"><span class="title">return</span> port_associate(ioevent-&gt;</span>poll_fd, PORT_SOURCE_FD, fd, e, <span class="keyword">data</span>);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理</span></span><br><span class="line"><span class="comment">// process the io events by callback function </span></span><br><span class="line"><span class="comment">// struct epoll_event: http://blog.csdn.net/wangrice2004/article/details/6651320 </span></span><br><span class="line">static void deal_ioevents(IOEventPoller *ioevent)</span><br><span class="line">&#123;</span><br><span class="line">int event;</span><br><span class="line">IOEventEntry *pEntry;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span> (ioevent-&gt;</span><span class="function"><span class="title">iterator</span>.index=0; ioevent-&gt;</span><span class="function"><span class="title">iterator</span>.index &lt; ioevent-&gt;</span>iterator.</span><br><span class="line">            <span class="function"><span class="title">count</span>; ioevent-&gt;</span>iterator.index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="title">event</span> = IOEVENT_GET_EVENTS(ioevent, ioevent-&gt;</span>iterator.index);</span><br><span class="line"><span class="function"><span class="title">pEntry</span> = (IOEventEntry *)IOEVENT_GET_DATA(ioevent, ioevent-&gt;</span>iterator.index);  <span class="comment">// 得到ioevent_attach设置的data，为IOEventEntry类型</span></span><br><span class="line"><span class="comment">// pEntry is either IOEventEntry(ioevent_loop -&gt; ioevent_attach)or fast_task_info(ioevent_set-&gt;ioevent_attach)</span></span><br><span class="line"><span class="comment">// but the first elem of fast_task_info is also IOEventEntry</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pEntry != NULL)  <span class="comment">// call the callback function, we set data in ioevent_attach func</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="function"><span class="title">pEntry</span>-&gt;</span><span class="function"><span class="title">callback</span>(pEntry-&gt;</span><span class="function"><span class="title">fd</span>, event, pEntry-&gt;</span><span class="function"><span class="title">timer</span>.<span class="keyword">data</span>); // pEntry-&gt;</span>timer.<span class="keyword">data</span> <span class="keyword">is</span> fast_task_info(see ioevent_set func)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">            logDebug(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                    <span class="string">&quot;ignore iovent : %d, index: %d&quot;</span>, __LINE__, <span class="function"><span class="title">event</span>, ioevent-&gt;</span>iterator.index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h2&gt;&lt;p&gt;fastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/yusiguyuan/article/details/15027821&quot;&gt;epoll机制&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
    <category term="epoll" scheme="http://damotiansheng.github.io/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs之tracker主流程</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8Btracker%E4%B8%BB%E6%B5%81%E7%A8%8B.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-04/fastdfs%E4%B9%8Btracker%E4%B8%BB%E6%B5%81%E7%A8%8B.html</id>
    <published>2016-12-04T05:01:50.000Z</published>
    <updated>2023-06-28T13:34:11.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p><a href="http://blog.chinaunix.net/uid-20498361-id-3328763.html">相关文章1</a><br><a href="http://blog.csdn.net/makamus/article/details/13759545">相关文章2</a><br>主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；</p><span id="more"></span><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">相关数据结构</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nio_thread_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ioevent_puller</span> ev_puller; <span class="comment">//IO multiplexing function: poll, kqueue </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fast_timer</span> timer; <span class="comment">// time wheel </span></span><br><span class="line"><span class="type">int</span> pipe_fds[<span class="number">2</span>]; <span class="comment">//to wake up current thread who owns current nio_thread_data</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fast_task_info</span> *deleted_list;</span><br><span class="line">ThreadLoopCallback thread_loop_callback;</span><br><span class="line"><span class="type">void</span> *arg;   <span class="comment">//extra argument pointer</span></span><br><span class="line">&#125;;</span><br><span class="line">每个工作线程对应一个该结构体，以实现one thread, one loop,</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fdfs_trackerd.c-&gt;main函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> *conf_filename;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="type">int</span> wait_count;</span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line"><span class="type">pthread_t</span> schedule_tid;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">ScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_COUNT]; <span class="comment">//保存需要定时执行的任务</span></span><br><span class="line">ScheduleArray scheduleArray;</span><br><span class="line"><span class="type">char</span> pidFilename[MAX_PATH_SIZE];</span><br><span class="line"><span class="type">bool</span> stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">usage</span>(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_current_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">g_up_time = g_current_time;</span><br><span class="line"><span class="built_in">srand</span>(g_up_time);</span><br><span class="line"></span><br><span class="line"><span class="built_in">log_init2</span>();</span><br><span class="line"></span><br><span class="line">conf_filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">get_base_path_from_conf_file</span>(conf_filename,</span><br><span class="line">g_fdfs_base_path, <span class="built_in">sizeof</span>(g_fdfs_base_path))) != <span class="number">0</span>)  <span class="comment">//从配置文件中得到base path</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(pidFilename, <span class="built_in">sizeof</span>(pidFilename),</span><br><span class="line"><span class="string">&quot;%s/data/fdfs_trackerd.pid&quot;</span>, g_fdfs_base_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">process_action</span>(pidFilename, argv[<span class="number">2</span>], &amp;stop)) != <span class="number">0</span>) <span class="comment">//处理命令： fdfs_trackerd restart/stop/start</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == EINVAL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">usage</span>(argv[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getExeAbsoluteFilename</span>(argv[<span class="number">0</span>], g_exe_name, \</span><br><span class="line"><span class="built_in">sizeof</span>(g_exe_name)) == <span class="literal">NULL</span>)   <span class="comment">//得到可执行文件的绝对路径，保存到g_exe_name</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : ENOENT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(bind_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(bind_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_load_from_conf_file</span>(conf_filename, \</span><br><span class="line">bind_addr, <span class="built_in">sizeof</span>(bind_addr))) != <span class="number">0</span>)       <span class="comment">//得到监听的地址</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//load last status of tracker last time from file: base_path/data/.tracker_status</span></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_load_status_from_file</span>(&amp;g_tracker_last_status)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init the global variable: g_base64_context</span></span><br><span class="line"><span class="built_in">base64_init_ex</span>(&amp;g_base64_context, <span class="number">0</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set a rand num</span></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">set_rand_seed</span>()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;set_rand_seed fail, program exit!&quot;</span>, __LINE__);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_mem_init</span>()) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sock = <span class="built_in">socketServer</span>(bind_addr, g_server_port, &amp;result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sock &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set send/recv timeout and keepalive parameter</span></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tcpsetserveropt</span>(sock, g_fdfs_network_timeout)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">daemon_init</span>(<span class="literal">false</span>); <span class="comment">//后台进程</span></span><br><span class="line"><span class="built_in">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">write_to_pid_file</span>(pidFilename)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create work thread: work_thread_entrance func</span></span><br><span class="line">    <span class="comment">// every thread has its event loop</span></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_service_init</span>()) != <span class="number">0</span>)  <span class="comment">//创建工作线程，每个工作线程对应一个nio_thread_data结构体</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;act, <span class="number">0</span>, <span class="built_in">sizeof</span>(act));</span><br><span class="line"><span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">   </span><br><span class="line">act.sa_handler = sigUsrHandler;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sigaction</span>(SIGUSR1, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span> || \</span><br><span class="line"><span class="built_in">sigaction</span>(SIGUSR2, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, <span class="built_in">STRERROR</span>(errno));</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = sigHupHandler;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sigaction</span>(SIGHUP, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, <span class="built_in">STRERROR</span>(errno));</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = SIG_IGN;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sigaction</span>(SIGPIPE, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, <span class="built_in">STRERROR</span>(errno));</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">act.sa_handler = sigQuitHandler;  <span class="comment">// send FDFS_PROTO_CMD_QUIT command when caught SIGINT,SIGTERM,SIGQUIT</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sigaction</span>(SIGINT, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span> || \</span><br><span class="line"><span class="built_in">sigaction</span>(SIGTERM, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span> || \</span><br><span class="line"><span class="built_in">sigaction</span>(SIGQUIT, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, <span class="built_in">STRERROR</span>(errno));</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(DEBUG_FLAG)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(OS_LINUX)</span></span><br><span class="line"><span class="comment">memset(&amp;act, 0, sizeof(act));</span></span><br><span class="line"><span class="comment">sigemptyset(&amp;act.sa_mask);</span></span><br><span class="line"><span class="comment">        act.sa_sigaction = sigSegvHandler;</span></span><br><span class="line"><span class="comment">        act.sa_flags = SA_SIGINFO;</span></span><br><span class="line"><span class="comment">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \</span></span><br><span class="line"><span class="comment">        sigaction(SIGABRT, &amp;act, NULL) &lt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">logCrit(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \</span></span><br><span class="line"><span class="comment">&quot;call sigaction fail, errno: %d, error info: %s&quot;, \</span></span><br><span class="line"><span class="comment">__LINE__, errno, STRERROR(errno));</span></span><br><span class="line"><span class="comment">logCrit(&quot;exit abnormally!\n&quot;);</span></span><br><span class="line"><span class="comment">return errno;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;act, <span class="number">0</span>, <span class="built_in">sizeof</span>(act));</span><br><span class="line"><span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">act.sa_handler = sigDumpHandler; </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sigaction</span>(SIGUSR1, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span> || \</span><br><span class="line"><span class="built_in">sigaction</span>(SIGUSR2, &amp;act, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call sigaction fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, <span class="built_in">STRERROR</span>(errno));</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> WITH_HTTPD</span></span><br><span class="line"><span class="keyword">if</span> (!g_http_params.disabled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_httpd_start</span>(bind_addr)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;tracker_httpd_start fail, program exit!&quot;</span>, \</span><br><span class="line">__LINE__);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_http_check_start</span>()) != <span class="number">0</span>)   </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;tracker_http_check_start fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;program exit!&quot;</span>, __LINE__);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">set_run_by</span>(g_run_by_group, g_run_by_user)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scheduleArray.entries = scheduleEntries;</span><br><span class="line">scheduleArray.count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(scheduleEntries, <span class="number">0</span>, <span class="built_in">sizeof</span>(scheduleEntries));</span><br><span class="line"></span><br><span class="line"><span class="built_in">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</span><br><span class="line">g_check_active_interval, tracker_mem_check_alive, <span class="literal">NULL</span>);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">TRACKER_SYNC_STATUS_FILE_INTERVAL,</span><br><span class="line">tracker_write_status_to_file, <span class="literal">NULL</span>);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rotate_error_log)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">INIT_SCHEDULE_ENTRY_EX</span>(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, g_error_log_rotate_time,</span><br><span class="line"><span class="number">24</span> * <span class="number">3600</span>, log_notify_rotate, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_log_file_keep_days &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">log_set_keep_days</span>(&amp;g_log_context, g_log_file_keep_days);</span><br><span class="line"></span><br><span class="line"><span class="built_in">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.count],</span><br><span class="line">scheduleArray.count + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span> * <span class="number">3600</span>,</span><br><span class="line">log_delete_old_files, &amp;g_log_context);</span><br><span class="line">scheduleArray.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a thread to execute some periodic task above, such as:log_sync_func,tracker_mem_check_alive</span></span><br><span class="line">    <span class="comment">// tracker_write_status_to_file and so on</span></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">sched_start</span>(&amp;scheduleArray, &amp;schedule_tid, \</span><br><span class="line">g_thread_stack_size, (<span class="type">bool</span> * <span class="keyword">volatile</span>)&amp;g_continue_flag)) != <span class="number">0</span>) <span class="comment">//创建调度线程，以定时执行上面的任务：log_sync_func，tracker_mem_check_alive等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=<span class="built_in">tracker_relationship_init</span>()) != <span class="number">0</span>) <span class="comment">//初始化主lead</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logCrit</span>(<span class="string">&quot;exit abnormally!\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">log_set_cache</span>(<span class="literal">true</span>); <span class="comment">//set g_log_context.log_to_cache to true</span></span><br><span class="line"></span><br><span class="line">bTerminateFlag = <span class="literal">false</span>;</span><br><span class="line">bAcceptEndFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">tracker_accept_loop</span>(sock);  <span class="comment">// the sock is tracker server socket，主线程循环，得到连接，dispatch子线程处理</span></span><br><span class="line">bAcceptEndFlag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_schedule_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pthread_kill</span>(schedule_tid, SIGINT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">tracker_terminate_threads</span>(); </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> WITH_HTTPD</span></span><br><span class="line"><span class="keyword">if</span> (g_http_check_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tracker_http_check_stop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (g_http_check_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">usleep</span>(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">wait_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// g_schedule_flag is true means the schedule thread is not ended, see sched_thread_entrance</span></span><br><span class="line"><span class="keyword">while</span> ((g_tracker_thread_count != <span class="number">0</span>) || g_schedule_flag)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span></span><br><span class="line"><span class="comment">if (bSegmentFault)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sleep(5);</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">usleep</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (++wait_count &gt; <span class="number">3000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">logWarning</span>(<span class="string">&quot;waiting timeout, exit!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">tracker_mem_destroy</span>(); <span class="comment">// free the memory in g_groups and free lock allocated previously</span></span><br><span class="line"><span class="built_in">tracker_service_destroy</span>(); <span class="comment">// wait all child thread to exit</span></span><br><span class="line"><span class="built_in">tracker_relationship_destroy</span>(); <span class="comment">// do nothing</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">logInfo</span>(<span class="string">&quot;exit normally.\n&quot;</span>);</span><br><span class="line"><span class="built_in">log_destroy</span>(); <span class="comment">// destory the log system</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete_pid_file</span>(pidFilename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">//初始化工作线程</span><br><span class="line">// create work thread: work_thread_entrance func</span><br><span class="line">// http:<span class="regexp">//slu</span>cx.blog.chinaunix.net/uid-<span class="number">29504236</span>-id-<span class="number">4556391</span>.html</span><br><span class="line">// http:<span class="regexp">//slu</span>cx.blog.chinaunix.net/uid-<span class="number">29504236</span>-id-<span class="number">4556487</span>.html</span><br><span class="line"><span class="keyword">int</span> tracker_service_init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#define ALLOC_CONNECTIONS_ONCE 1024</span></span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> bytes;</span><br><span class="line">    <span class="keyword">int</span> init_connections;</span><br><span class="line">struct nio_thread_data *pThreadData;</span><br><span class="line">struct nio_thread_data *pDataEnd;</span><br><span class="line">pthread_t tid;</span><br><span class="line">pthread_attr_t thread_attr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=init_pthread_lock(&amp;tracker_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=init_pthread_lock(&amp;lb_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=init_pthread_attr(&amp;thread_attr, g_thread_stack_size)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;init_pthread_attr fail, program exit!&quot;</span>, __LINE_<span class="number">_</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        init_connections = g_max_connections &lt; ALLOC_CONNECTIONS_ONCE ?</span><br><span class="line">        g_max_connections : ALLOC_CONNECTIONS_ONCE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=free_queue_init_ex(g_max_connections, init_connections,</span><br><span class="line">                    ALLOC_CONNECTIONS_ONCE, TRACKER_MAX_PACKAGE_SIZE,</span><br><span class="line">                    TRACKER_MAX_PACKAGE_SIZE, sizeof(TrackerClientInfo))) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// every thread has one nio_thread_data</span><br><span class="line">bytes = sizeof(struct nio_thread_data) * g_work_threads;</span><br><span class="line">g_thread_data = (struct nio_thread_data *)malloc(bytes );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_thread_data == NULL)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;malloc %d bytes fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, bytes, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(g_thread_data, <span class="number">0</span>, bytes);</span><br><span class="line"></span><br><span class="line">g_tracker_thread_count = <span class="number">0</span>;</span><br><span class="line">pDataEnd = g_thread_data + g_work_threads;   <span class="regexp">//</span> 默认g_work_threads为<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (pThreadData=g_thread_data; pThreadData&lt;pDataEnd; pThreadData++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ioevent_init(&amp;pThreadData-&gt;ev_puller,</span><br><span class="line">g_max_connections + <span class="number">2</span>, <span class="number">1000</span>, <span class="number">0</span>) != <span class="number">0</span>) // g_max_connections=<span class="number">256</span>，初始化IO复用函数，超时为<span class="number">1</span>秒</span><br><span class="line">&#123;</span><br><span class="line">result  = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;ioevent_init fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = fast_timer_init(&amp;pThreadData-&gt;timer,</span><br><span class="line"><span class="number">2</span> * g_fdfs_network_timeout, g_current_time); <span class="regexp">//</span>初始化超时事件<span class="keyword">time</span> wheel</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;fast_timer_init fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">pipe</span>(pThreadData-&gt;pipe_fds) != <span class="number">0</span>)  //创建管道</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : EPERM;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pipe fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#if defined(OS_LINUX)</span></span><br><span class="line"><span class="keyword">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class="number">0</span>], \</span><br><span class="line">O_NONBLOCK | O_NOATIME)) != <span class="number">0</span>) // O_NOATIME: Do <span class="keyword">not</span> update the file <span class="keyword">last</span> access <span class="keyword">time</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="keyword">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class="number">0</span>], \</span><br><span class="line">O_NONBLOCK)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_create(&amp;tid, &amp;thread_attr, \</span><br><span class="line">work_thread_entrance, pThreadData)) != <span class="number">0</span>)  //创建工作线程</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;create thread failed, startup threads: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, g_tracker_thread_count, \</span><br><span class="line">result, STRERROR(result));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_tracker_thread_count++; <span class="regexp">//</span>工作线程数量递增</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_attr_destroy(&amp;thread_attr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工作线程work_thread_entrance</span><br><span class="line">// tracker child thread</span><br><span class="line">static void *work_thread_entrance(void* arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">struct nio_thread_data *pThreadData;</span><br><span class="line"></span><br><span class="line">pThreadData = (struct nio_thread_data *)arg;</span><br><span class="line"></span><br><span class="line">ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</span><br><span class="line">&amp;g_continue_flag);  <span class="regexp">//</span> 循环等待事件的到来并处理</span><br><span class="line"></span><br><span class="line">ioevent_destroy(&amp;pThreadData-&gt;ev_puller);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_tracker_thread_count--;  <span class="regexp">//</span>工作线程数量递减</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE_<span class="number">_</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call pthread_mutex_lock fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE_<span class="number">_</span>, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="comment">// accept a client request and dispatch request to child thread for processing</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *accept_thread_entrance(<span class="keyword">void</span>* arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> server_sock;</span><br><span class="line"><span class="keyword">int</span> incomesock;</span><br><span class="line"><span class="keyword">struct</span> sockaddr_in inaddr;</span><br><span class="line">socklen_t sockaddr_len;</span><br><span class="line"><span class="keyword">struct</span> nio_thread_data *pThreadData;</span><br><span class="line">server_sock = (<span class="built_in">long</span>)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (g_continue_flag)</span><br><span class="line">&#123;</span><br><span class="line">sockaddr_len = sizeof(inaddr);</span><br><span class="line">incomesock = accept(server_sock, (<span class="keyword">struct</span> sockaddr*)&amp;inaddr, &amp;sockaddr_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (incomesock &lt; <span class="number">0</span>) <span class="comment">//error</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(errno == EINTR || errno == EAGAIN))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;accept failed, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, errno, STRERROR(errno));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pThreadData = g_thread_data + incomesock % g_work_threads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (write(pThreadData-&gt;pipe_fds[<span class="number">1</span>], &amp;incomesock, \</span><br><span class="line">sizeof(incomesock)) != sizeof(incomesock)) <span class="comment">// 将得到的client fd写入某个管道中，wakeup child thread</span></span><br><span class="line">&#123;</span><br><span class="line">close(incomesock);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span><span class="keyword">__FILE__</span><span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;call write failed, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line"><span class="keyword">__LINE__</span>, errno, STRERROR(errno));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> current_connections;</span><br><span class="line">            current_connections = __sync_add_and_fetch(&amp;g_connection_stat.</span><br><span class="line">                    current_count, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current_connections &gt; g_connection_stat.max_count) </span><br><span class="line">&#123;</span><br><span class="line">                g_connection_stat.max_count = current_connections;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-20498361-id-3328763.html&quot;&gt;相关文章1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/makamus/article/details/13759545&quot;&gt;相关文章2&lt;/a&gt;&lt;br&gt;主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs连接池</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-12-03/fastdfs%E8%BF%9E%E6%8E%A5%E6%B1%A0.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-12-03/fastdfs%E8%BF%9E%E6%8E%A5%E6%B1%A0.html</id>
    <published>2016-12-03T09:51:25.000Z</published>
    <updated>2023-06-28T13:34:11.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastdfs连接池"><a href="#fastdfs连接池" class="headerlink" title="fastdfs连接池"></a>fastdfs连接池</h1><hr><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；</p><span id="more"></span><h2 id="用到的数据结构"><a href="#用到的数据结构" class="headerlink" title="用到的数据结构"></a>用到的数据结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line"><span class="type">int</span> port;</span><br><span class="line"><span class="type">char</span> ip_addr[INET6_ADDRSTRLEN];</span><br><span class="line">    <span class="type">int</span> socket_domain;  <span class="comment">//socket domain, AF_INET, AF_INET6 or PF_UNSPEC for auto dedect</span></span><br><span class="line">&#125; ConnectionInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tagConnectionManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagConnectionNode</span> &#123;</span><br><span class="line">ConnectionInfo *conn;  <span class="comment">// pointer the end of ConnectionNode, see conn_pool_get_connection func</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tagConnectionManager</span> *manager;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tagConnectionNode</span> *next; <span class="comment">// pointer to next ConnectionNode which is the same ip and port in conn</span></span><br><span class="line"><span class="type">time_t</span> atime;  <span class="comment">//last access time, if </span></span><br><span class="line">&#125; ConnectionNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connection pool, key is ip_port, value is ConnectionManager, see conn_pool_get_connection func</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagConnectionManager</span> &#123;</span><br><span class="line">ConnectionNode *head;  <span class="comment">// head pointer to the first ConnectionNode</span></span><br><span class="line"><span class="type">int</span> total_count;  <span class="comment">//total connections，已经建立的连接数，超过一定数值时，不会再建立连接</span></span><br><span class="line"><span class="type">int</span> free_count;   <span class="comment">//free connections</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">&#125; ConnectionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagConnectionPool</span> &#123;</span><br><span class="line">HashArray hash_array;  <span class="comment">//key is ip_port, value is ConnectionManager, see conn_pool_get_key func</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line"><span class="type">int</span> connect_timeout;</span><br><span class="line"><span class="type">int</span> max_count_per_entry;  <span class="comment">//0 means no limit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">connections whose the idle time exceeds this time will be closed</span></span><br><span class="line"><span class="comment">    unit: second</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> max_idle_time;</span><br><span class="line">    <span class="type">int</span> socket_domain;  <span class="comment">//socket domain</span></span><br><span class="line">&#125; ConnectionPool;</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><p>connection_pool.h&#x2F;connection_pool.c<br>核心函数：conn_pool_get_connection</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;fastdfs连接池&quot;&gt;&lt;a href=&quot;#fastdfs连接池&quot; class=&quot;headerlink&quot; title=&quot;fastdfs连接池&quot;&gt;&lt;/a&gt;fastdfs连接池&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h2&gt;&lt;p&gt;为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；&lt;/p&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
    <category term="连接池" scheme="http://damotiansheng.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>多个线程监听同一个fd</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-11-27/%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9B%91%E5%90%AC%E5%90%8C%E4%B8%80%E4%B8%AAfd.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-11-27/%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9B%91%E5%90%AC%E5%90%8C%E4%B8%80%E4%B8%AAfd.html</id>
    <published>2016-11-27T08:23:59.000Z</published>
    <updated>2023-06-28T13:34:11.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多个线程监听同一个fd"><a href="#多个线程监听同一个fd" class="headerlink" title="多个线程监听同一个fd"></a>多个线程监听同一个fd</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>ubantu 12.04 x64</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，<br>还是只唤醒一个，每个线程被唤醒的次数是否会相等。</p><span id="more"></span><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">// server.c</span><br><span class="line"><span class="comment">#include &lt;sys/time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define PORT 4321</span></span><br><span class="line"><span class="comment">#define BACKLOG 100</span></span><br><span class="line"><span class="comment">#define MAXRECVLEN 1024</span></span><br><span class="line">pthread_t tid[10];</span><br><span class="line">long cnt[10];</span><br><span class="line"></span><br><span class="line">void accept_thread_entrance( void* arg );</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    char buf[MAXRECVLEN];</span><br><span class="line">    int listenfd, connectfd;  /* socket descriptors */</span><br><span class="line">    struct sockaddr_in server; /* server<span class="string">&#x27;s address information */</span></span><br><span class="line"><span class="string">    struct sockaddr_in client; /* client&#x27;</span>s address information */</span><br><span class="line">    socklen_t addrlen;</span><br><span class="line">    /* Create TCP socket */</span><br><span class="line">    <span class="keyword">if</span> ((listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        /* handle exception */</span><br><span class="line">        perror(<span class="string">&quot;socket() error. Failed to initiate a socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    int opt = SO_REUSEADDR;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(opt));</span><br><span class="line">    server.sin_family = AF_INET;</span><br><span class="line">    server.sin_port = htons(PORT);</span><br><span class="line">    server.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">bind</span>(listenfd, (struct sockaddr *)&amp;server, sizeof(server)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Bind() error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(listen(listenfd, BACKLOG) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen() error. \n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">        int i = 0;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=0; i&lt;5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">cnt[i] = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=pthread_create(&amp;tid[i], NULL, \</span><br><span class="line">accept_thread, \</span><br><span class="line">(void *)(long)listenfd)) != 0)</span><br><span class="line">&#123;</span><br><span class="line">                                        puts(<span class="string">&quot;pthread_create error&quot;</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;%lu, %lu, %lu, %lu, %lu \n&quot;</span>, tid[0], tid[1], tid[2], tid[3], tid[4] ); //这里的输出与子线程的pthread_self返回值并不一样</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_t mutex;</span><br><span class="line">pthread_t childTid[10];</span><br><span class="line">int idx = 0;</span><br><span class="line"></span><br><span class="line">void accept_thread( void* arg )</span><br><span class="line">&#123;</span><br><span class="line">int listenfd = (long)arg;</span><br><span class="line">int connectfd;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">        socklen_t addrlen;</span><br><span class="line">addrlen = sizeof(client);</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    childTid[idx++] = pthread_self();</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((connectfd=accept(listenfd,(struct sockaddr *)&amp;client, &amp;addrlen))==-1)</span><br><span class="line">          &#123;</span><br><span class="line">            perror(<span class="string">&quot;accept() error. \n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(1);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        struct timeval tv;</span><br><span class="line">        gettimeofday(&amp;tv, NULL);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread-id=%lu,You got a connection from client&#x27;s ip %s, port %d at time %ld.%ld\n&quot;</span>,pthread_self(), inet_ntoa(client.sin_addr),htons(client.sin_port), tv.tv_sec,tv.tv_usec);</span><br><span class="line">int i = 0;</span><br><span class="line">  pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">for</span>( i = 0; i &lt; 5; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( pthread_self() == childTid[i] )</span><br><span class="line">&#123;</span><br><span class="line">cnt[i]++;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;%ld, %ld, %ld, %ld, %ld \n&quot;</span>, cnt[0], cnt[1], cnt[2], cnt[3], cnt[4] );</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        close(connectfd);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// client.c:</span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netdb.h&gt;  /* netdb is necessary for struct hostent */</span></span><br><span class="line"><span class="comment">#define PORT 4321  /* server port */</span></span><br><span class="line"><span class="comment">#define MAXDATASIZE 100</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int sockfd, num;    /* files descriptors */</span><br><span class="line">    char buf[MAXDATASIZE];    /* buf will store received text */</span><br><span class="line">    struct hostent *he;    /* structure that will get information about remote host */</span><br><span class="line">    struct sockaddr_in server;</span><br><span class="line">    <span class="keyword">if</span> (argc != 2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP Address&gt;\n&quot;</span>,argv[0]);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((he=gethostbyname(argv[<span class="number">1</span>]))==NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;gethostbyname() error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM, <span class="number">0</span>))==-1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket() error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    bzero(&amp;server,sizeof(server));</span><br><span class="line">    server.sin_family = AF_INET;</span><br><span class="line">    server.sin_port = htons(PORT);</span><br><span class="line">    server.sin_addr = *((struct in_addr *)he-&gt;h_addr);</span><br><span class="line">    if(connect(sockfd, (struct sockaddr *)&amp;server, sizeof(server))==-1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;connect() error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//test.c:</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">long long cnt = 0;</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;./client 127.0.0.1&quot;</span>);</span><br><span class="line">cnt++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 10000 == cnt )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">//运行结果：</span><br><span class="line">./test</span><br><span class="line">./test</span><br><span class="line">pthread-id=870520576,You got a connection from client<span class="string">&#x27;s ip 127.0.0.1, port 36335 at time 1480235067.980892</span></span><br><span class="line"><span class="string">3995, 4007, 4006, 3995, 3997 </span></span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>只会唤醒一个线程，且每个线程被唤醒的次数基本相等，多个线程监听同一个fd基本没问题</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;多个线程监听同一个fd&quot;&gt;&lt;a href=&quot;#多个线程监听同一个fd&quot; class=&quot;headerlink&quot; title=&quot;多个线程监听同一个fd&quot;&gt;&lt;/a&gt;多个线程监听同一个fd&lt;/h2&gt;&lt;h3 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h3&gt;&lt;p&gt;ubantu 12.04 x64&lt;/p&gt;
&lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h3&gt;&lt;p&gt;多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，&lt;br&gt;还是只唤醒一个，每个线程被唤醒的次数是否会相等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="multi pthread" scheme="http://damotiansheng.github.io/tags/multi-pthread/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs配置文件解析模块</title>
    <link href="http://damotiansheng.github.io/fastdfs/2016-11-06/fastdfs%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97.html"/>
    <id>http://damotiansheng.github.io/fastdfs/2016-11-06/fastdfs%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97.html</id>
    <published>2016-11-06T11:11:20.000Z</published>
    <updated>2023-06-28T13:34:11.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="加载配置文件解析"><a href="#加载配置文件解析" class="headerlink" title="加载配置文件解析"></a>加载配置文件解析</h3><p>配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，<br>如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。<br>如：<br>result&#x3D;iniLoadFromFileEx(filename, &amp;iniContext, true)<br>pBasePath &#x3D; iniGetStrValue(NULL, “base_path”, &amp;iniContext); &#x2F;&#x2F;该函数就可以得到配置文件中base_path的值</p><span id="more"></span><p>相关参考：<a href="http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html">http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html</a></p><h3 id="1-相关数据结构"><a href="#1-相关数据结构" class="headerlink" title="1. 相关数据结构"></a>1. 相关数据结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">IniSection global;  <span class="comment">//保存全局key,value对</span></span><br><span class="line">HashArray sections;  <span class="comment">//key is session name, and value is IniSection,这里hash数组用来保存[group1]下隶属于group1的&lt;key,value&gt;对</span></span><br><span class="line">IniSection *current_section; <span class="comment">//for load from ini file，当前正在处理的IniSection</span></span><br><span class="line"><span class="type">char</span> config_path[MAX_PATH_SIZE];  <span class="comment">//save the config filepath, such as conf file is /etc/data/xxx.conf, config_path is /etc/data</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> ignore_annotation; <span class="comment">// 是否忽略注解，看代码时可以略过不看</span></span><br><span class="line">&#125; IniContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">IniItem *items;</span><br><span class="line"><span class="type">int</span> count;  <span class="comment">//item count</span></span><br><span class="line"><span class="type">int</span> alloc_count;</span><br><span class="line">&#125; IniSection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[FAST_INI_ITEM_NAME_LEN + <span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> value[FAST_INI_ITEM_VALUE_LEN + <span class="number">1</span>];</span><br><span class="line">&#125; IniItem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagHashArray</span></span><br><span class="line">&#123;</span><br><span class="line">HashData **buckets;</span><br><span class="line">HashFunc hash_func; <span class="comment">// default is Time33Hash func</span></span><br><span class="line"><span class="type">int</span> item_count;  <span class="comment">// is all the item saved in buckets</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> *capacity; <span class="comment">// pointer to prime global aarray, see hash_init_ex func</span></span><br><span class="line"><span class="type">double</span> load_factor;</span><br><span class="line"><span class="type">int64_t</span> max_bytes; <span class="comment">// means the max size of space which can be used in hashArray</span></span><br><span class="line"><span class="type">int64_t</span> bytes_used; <span class="comment">// means the size of have been used, is the *capacity * sizeof(HashData *)，为已经使用的字节数</span></span><br><span class="line"><span class="type">bool</span> is_malloc_capacity;</span><br><span class="line"><span class="comment">// is_malloc_value is true: means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></span><br><span class="line"><span class="type">bool</span> is_malloc_value;  <span class="comment">// it means hashArray whether  malloc space for value or not, default is false</span></span><br><span class="line">                       </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> lock_count;</span><br><span class="line"><span class="type">pthread_mutex_t</span> *locks;</span><br><span class="line">&#125; HashArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagHashData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> key_len;</span><br><span class="line"><span class="type">int</span> value_len;</span><br><span class="line"><span class="type">int</span> malloc_value_size;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HASH_STORE_HASH_CODE</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hash_code;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *value;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tagHashData</span> *next;</span><br><span class="line"><span class="type">char</span> key[<span class="number">0</span>];</span><br><span class="line">&#125; HashData;   <span class="comment">// 元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HashFunc)</span> <span class="params">(<span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">int</span> key_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> CDCPair g_dynamic_contents[_MAX_DYNAMIC_CONTENTS] = &#123;&#123;<span class="literal">false</span>, <span class="literal">NULL</span>, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;&#125;&#125;; <span class="comment">//用一个全局数组来保存已经解析过的文件</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">bool</span> used;</span><br><span class="line">    IniContext *context;</span><br><span class="line">    DynamicContents dynamicContents;</span><br><span class="line">&#125; CDCPair;</span><br></pre></td></tr></table></figure><p>其中的sections是一个hash数组，用到的hash函数默认为Time33Hash函数<br>进行hash插入时，具体见hash_insert函数：<br>hash_code &#x3D; pHash-&gt;hash_func(key, key_len);<br>ppBucket &#x3D; pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</p><p>key是section_name, key_len是section_len，而<br>section_name, section_len为”[]”包围的字符串，见iniDoLoadItemsFromBuffer函数<br>如： [group1], section_name, section_len分别为group1和6<br>mod_fastdfs.conf文件中有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[group1]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">group_name=group1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">storage_server_port=23000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">store_path_count=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">store_path0=/home/yuqing/fastdfs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">store_path1=/home/yuqing/fastdfs1</span></span><br></pre></td></tr></table></figure><p>这里的group1就为section_name, section_len是6，此时current_section会指向一个新分配的IniSection，接着会将读取得到的<br>group_name等&lt;key,value&gt;对插入到current_section中去，然后插入到hash数组中去。<br>配置文件模块其实就是读取配置文件，然后初始化IniContext结构体。</p><h3 id="2-下面讲解各个函数"><a href="#2-下面讲解各个函数" class="headerlink" title="2. 下面讲解各个函数"></a>2. 下面讲解各个函数</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用路径如下：</span><br><span class="line"><span class="function"><span class="title">iniLoadFromFile</span> -&gt;</span> <span class="function"><span class="title">iniLoadFromFileEx</span> -&gt;</span> iniInitContext、iniDoLoadFromFile、iniSortItems、iniFreeContext</span><br><span class="line"><span class="function"><span class="title">iniInitContext</span> -&gt;</span> hash_init</span><br><span class="line"><span class="function"><span class="title">hash_init</span>-&gt;</span><span class="function"><span class="title">hash_init_ex</span>-&gt;</span>_hash_alloc_buckets</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br></pre></td><td class="code"><pre><span class="line">int iniLoadFromFile(<span class="keyword">const</span> char *szFilename, IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> iniLoadFromFileEx(szFilename, pContext, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int iniLoadFromFileEx(<span class="keyword">const</span> char *szFilename, IniContext *pContext,</span><br><span class="line">    bool ignore_annotation) <span class="comment">// annotation is 注释, such as symbol = /* */</span></span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line">int len;</span><br><span class="line">char *pLast;</span><br><span class="line">char full_filename[MAX_PATH_SIZE]; <span class="comment">//保存完整文件名路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=iniInitContext(pContext)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        pContext-&gt;ignore_annotation = ignore_annotation; <span class="comment">//default is true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strncasecmp(szFilename, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span>) <span class="comment">// szFilename可以为类似： http://www.abc.com/sdfs/xxx.conf</span></span><br><span class="line">&#123;</span><br><span class="line">*pContext-&gt;config_path = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">snprintf(full_filename, sizeof(full_filename),<span class="string">&quot;%s&quot;</span>,szFilename); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*szFilename == <span class="string">&#x27;/&#x27;</span>) <span class="comment">// szFilename is the absolute path</span></span><br><span class="line">&#123;</span><br><span class="line">pLast = strrchr(szFilename, <span class="string">&#x27;/&#x27;</span>); <span class="comment">//从后面开始查找第一个字符&#x27;/&#x27;</span></span><br><span class="line">len = pLast - szFilename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len &gt;= sizeof(pContext-&gt;config_path))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span>\</span><br><span class="line"><span class="string">&quot;the path of the config file: %s is &quot;</span> \</span><br><span class="line"><span class="string">&quot;too long!&quot;</span>, __LINE__, szFilename);</span><br><span class="line"><span class="keyword">return</span> ENOSPC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memcpy(pContext-&gt;config_path, szFilename, len);</span><br><span class="line">*(pContext-&gt;config_path + len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">snprintf(full_filename, sizeof(full_filename), \</span><br><span class="line"><span class="string">&quot;%s&quot;</span>, szFilename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">// 表明是从当前路径下的文件名，szFilename is the conf file name or is current_dir/xxx1/xxx2/xxx.conf</span></span><br><span class="line">&#123;</span><br><span class="line">memset(pContext-&gt;config_path, <span class="number">0</span>, \</span><br><span class="line">sizeof(pContext-&gt;config_path));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getcwd(pContext-&gt;config_path, sizeof( \</span><br><span class="line">pContext-&gt;config_path)) == NULL)  <span class="comment">//getcwd函数为得到当前目录</span></span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;getcwd fail, errno: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EPERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len = strlen(pContext-&gt;config_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; pContext-&gt;config_path[len - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">*(pContext-&gt;config_path + len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;  <span class="comment">// make sure the last char is not &#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">snprintf(full_filename, sizeof(full_filename), \</span><br><span class="line"><span class="string">&quot;%s/%s&quot;</span>, pContext-&gt;config_path, szFilename);</span><br><span class="line"></span><br><span class="line">pLast = strrchr(szFilename, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pLast != NULL)  <span class="comment">// such as szFilename is &quot;data/xxx.conf&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">int tail_len;</span><br><span class="line">tail_len = pLast - szFilename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len + <span class="number">1</span> + tail_len &gt;= sizeof( \</span><br><span class="line">pContext-&gt;config_path))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span>\</span><br><span class="line"><span class="string">&quot;the path of the config &quot;</span> \</span><br><span class="line"><span class="string">&quot;file: %s is too long!&quot;</span>, \</span><br><span class="line">__LINE__, szFilename);</span><br><span class="line"><span class="keyword">return</span> ENOSPC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                *(pContext-&gt;config_path + len++) = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">memcpy(pContext-&gt;config_path + len, \</span><br><span class="line">szFilename, tail_len);</span><br><span class="line">len += tail_len;</span><br><span class="line">*(pContext-&gt;config_path + len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now full_filename is the absolute path of conf file, pContext-&gt;config_path</span></span><br><span class="line">    <span class="comment">// is the conf file directory</span></span><br><span class="line">result = iniDoLoadFromFile(full_filename, pContext);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">iniSortItems(pContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">iniFreeContext(pContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init the member of IniContext, such as init the hash member:pContext-&gt;sections</span></span><br><span class="line">static int iniInitContext(IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">memset(pContext, <span class="number">0</span>, sizeof(IniContext));</span><br><span class="line">pContext-&gt;current_section = &amp;pContext-&gt;global; <span class="comment">//指向global,用于保存全局key,value对</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=hash_init(&amp;pContext-&gt;sections, Time33Hash, <span class="number">32</span>, <span class="number">0.75</span>)) != <span class="number">0</span>) <span class="comment">//hash数组初始化，Time33Hash为hash函数，32为容量，0.75为负载因子</span></span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;hash_init fail, errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, result, STRERROR(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash函数如下：</span><br><span class="line">#define TIME33_HASH_FUNC(init_value) \</span><br><span class="line">int nHash; \</span><br><span class="line">unsigned char *pKey; \</span><br><span class="line">unsigned char *pEnd; \</span><br><span class="line"> \</span><br><span class="line">nHash = init_value; \</span><br><span class="line">pEnd = (unsigned char *)key + key_len; \</span><br><span class="line"><span class="keyword">for</span> (pKey = (unsigned char *)key; pKey != pEnd; pKey++) \</span><br><span class="line">&#123; \</span><br><span class="line">nHash += (nHash &lt;&lt; <span class="number">5</span>) + (*pKey); \</span><br><span class="line">&#125; \</span><br><span class="line"> \</span><br><span class="line"><span class="keyword">return</span> nHash; \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// get a int value according to the key value</span></span><br><span class="line">int Time33Hash(<span class="keyword">const</span> void *key, <span class="keyword">const</span> int key_len)</span><br><span class="line">&#123;</span><br><span class="line">TIME33_HASH_FUNC(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define hash_init(pHash, hash_func, capacity, load_factor) \</span><br><span class="line">hash_init_ex(pHash, hash_func, capacity, load_factor, <span class="number">0</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数依次为：要初始化的hash数组，hash函数，容量，负载因子（当前保存的项数/capacity）,hash数组能用的最大字节数，保存value的空间是否已经在外部被分配了</span></span><br><span class="line">int hash_init_ex(HashArray *pHash, HashFunc hash_func, \</span><br><span class="line"><span class="keyword">const</span> unsigned int capacity, <span class="keyword">const</span> double load_factor, \</span><br><span class="line"><span class="keyword">const</span> int64_t max_bytes, <span class="keyword">const</span> bool bMallocValue)</span><br><span class="line">&#123;</span><br><span class="line">unsigned int *pprime;</span><br><span class="line">unsigned int *prime_end;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">memset(pHash, <span class="number">0</span>, sizeof(HashArray));</span><br><span class="line">prime_end = prime_array + PRIME_ARRAY_SIZE;  <span class="comment">// 素数数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( *pprime &gt; capacity ) <span class="comment">//找到第一个大于容量的素数</span></span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;capacity = pprime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;capacity == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=_hash_alloc_buckets(pHash, <span class="number">0</span>)) != <span class="number">0</span>) <span class="comment">//分配桶</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pHash-&gt;hash_func = hash_func;</span><br><span class="line">pHash-&gt;max_bytes = max_bytes; <span class="comment">//hash数组能够使用的最大字节数</span></span><br><span class="line">pHash-&gt;is_malloc_value = bMallocValue;  <span class="comment">// default is false，保存key,value中的value数据时的空间是否已经在外部被分配</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// load_factor default is 0.75</span></span><br><span class="line"><span class="keyword">if</span> (load_factor &gt;= <span class="number">0.00</span> &amp;&amp; load_factor &lt;= <span class="number">1.00</span>)</span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;load_factor = load_factor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;load_factor = <span class="number">0.50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 素数数组</span></span><br><span class="line">static unsigned int prime_array[] = &#123;</span><br><span class="line">    <span class="number">1</span>,              <span class="comment">/* 0 */</span></span><br><span class="line">    <span class="number">3</span>,              <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="number">17</span>,             <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="number">37</span>,             <span class="comment">/* 3 */</span></span><br><span class="line">    <span class="number">79</span>,             <span class="comment">/* 4 */</span></span><br><span class="line">    <span class="number">163</span>,            <span class="comment">/* 5 */</span></span><br><span class="line">    <span class="number">331</span>,            <span class="comment">/* 6 */</span></span><br><span class="line">    <span class="number">673</span>,            <span class="comment">/* 7 */</span></span><br><span class="line">    <span class="number">1361</span>,           <span class="comment">/* 8 */</span></span><br><span class="line">    <span class="number">2729</span>,           <span class="comment">/* 9 */</span></span><br><span class="line">    <span class="number">5471</span>,           <span class="comment">/* 10 */</span></span><br><span class="line">    <span class="number">10949</span>,          <span class="comment">/* 11 */</span></span><br><span class="line">    <span class="number">21911</span>,          <span class="comment">/* 12 */</span></span><br><span class="line">    <span class="number">43853</span>,          <span class="comment">/* 13 */</span></span><br><span class="line">    <span class="number">87719</span>,          <span class="comment">/* 14 */</span></span><br><span class="line">    <span class="number">175447</span>,         <span class="comment">/* 15 */</span></span><br><span class="line">    <span class="number">350899</span>,         <span class="comment">/* 16 */</span></span><br><span class="line">    <span class="number">701819</span>,         <span class="comment">/* 17 */</span></span><br><span class="line">    <span class="number">1403641</span>,        <span class="comment">/* 18 */</span></span><br><span class="line">    <span class="number">2807303</span>,        <span class="comment">/* 19 */</span></span><br><span class="line">    <span class="number">5614657</span>,        <span class="comment">/* 20 */</span></span><br><span class="line">    <span class="number">11229331</span>,       <span class="comment">/* 21 */</span></span><br><span class="line">    <span class="number">22458671</span>,       <span class="comment">/* 22 */</span></span><br><span class="line">    <span class="number">44917381</span>,       <span class="comment">/* 23 */</span></span><br><span class="line">    <span class="number">89834777</span>,       <span class="comment">/* 24 */</span></span><br><span class="line">    <span class="number">179669557</span>,      <span class="comment">/* 25 */</span></span><br><span class="line">    <span class="number">359339171</span>,      <span class="comment">/* 26 */</span></span><br><span class="line">    <span class="number">718678369</span>,      <span class="comment">/* 27 */</span></span><br><span class="line">    <span class="number">1437356741</span>,     <span class="comment">/* 28 */</span></span><br><span class="line">    <span class="number">2147483647</span>      <span class="comment">/* 29 (largest signed int prime) */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define PRIME_ARRAY_SIZE  <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// allocate the space of hash array</span></span><br><span class="line">static int _hash_alloc_buckets(HashArray *pHash, <span class="keyword">const</span> unsigned int old_capacity)</span><br><span class="line">&#123;</span><br><span class="line">size_t bytes;</span><br><span class="line"></span><br><span class="line">bytes = sizeof(HashData *) * (*pHash-&gt;capacity);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;max_bytes &gt; <span class="number">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ENOSPC; <span class="comment">// no more memory in device </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pHash-&gt;buckets = (HashData **)malloc(bytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;buckets == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(pHash-&gt;buckets, <span class="number">0</span>, bytes); <span class="comment">// sizeof(HashData *) * old_capacity为旧数组的大小</span></span><br><span class="line">pHash-&gt;bytes_used += bytes - sizeof(HashData *) * old_capacity; <span class="comment">//bytes为新大小，减去旧数组大小则为新增大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static int iniDoLoadFromFile(<span class="keyword">const</span> char *szFilename, \</span><br><span class="line">IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">char *content;</span><br><span class="line">int result;</span><br><span class="line">int http_status;</span><br><span class="line">int content_len;</span><br><span class="line">int64_t file_size;</span><br><span class="line">char error_info[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strncasecmp(szFilename, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span>) <span class="comment">// 是否为http://xxx.xx.xx/xx1/xx.conf形式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// szFilename: http://xx1.xx2.xx3/haha/dir/xxx.conf</span></span><br><span class="line"><span class="keyword">if</span> ((result=get_url_content(szFilename, <span class="number">10</span>, <span class="number">60</span>, &amp;http_status, \   </span><br><span class="line">&amp;content, &amp;content_len, error_info)) != <span class="number">0</span>)  <span class="comment">//get_url_content函数发送http请求获得文件内容</span></span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;get_url_content fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;url: %s, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, szFilename, error_info);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (http_status != <span class="number">200</span>) <span class="comment">// means http response status is not correct</span></span><br><span class="line">&#123;</span><br><span class="line">free(content);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;HTTP status code: %d != 200, url: %s&quot;</span>, \</span><br><span class="line">__LINE__, http_status, szFilename);</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((result=getFileContent(szFilename, &amp;content, \</span><br><span class="line">&amp;file_size)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = iniLoadItemsFromBuffer(content, pContext);</span><br><span class="line">free(content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int get_url_content(<span class="keyword">const</span> char *url, <span class="keyword">const</span> int connect_timeout, \</span><br><span class="line"><span class="keyword">const</span> int network_timeout, int *http_status, \</span><br><span class="line">char **content, int *content_len, char *error_info)</span><br><span class="line">&#123;</span><br><span class="line">    *content = NULL;</span><br><span class="line">    <span class="keyword">return</span> get_url_content_ex(url, strlen(url), connect_timeout, network_timeout,</span><br><span class="line">            http_status, content, content_len, error_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">get the content of url, the func will send http request and recv http response</span></span><br><span class="line"><span class="comment">// connect_timeout is 10 default</span></span><br><span class="line"><span class="comment">// network_timeout is 60 default</span></span><br><span class="line"><span class="comment">http_status用于保存http响应报文的状态，如http 1.1 200 ok中的200</span></span><br><span class="line"><span class="comment">content和content_len用于保存内容和长度</span></span><br><span class="line"><span class="comment">error_info用于保存错误信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">int get_url_content_ex(<span class="keyword">const</span> char *url, <span class="keyword">const</span> int url_len,</span><br><span class="line">        <span class="keyword">const</span> int connect_timeout, <span class="keyword">const</span> int network_timeout,</span><br><span class="line">        int *http_status, char **content, int *content_len, char *error_info)</span><br><span class="line">&#123;</span><br><span class="line">char domain_name[<span class="number">256</span>];</span><br><span class="line">char ip_addr[IP_ADDRESS_SIZE];</span><br><span class="line">char out_buff[<span class="number">4096</span>];</span><br><span class="line">int domain_len;</span><br><span class="line">int out_len;</span><br><span class="line">int alloc_size;</span><br><span class="line">int recv_bytes;</span><br><span class="line">int result;</span><br><span class="line">int sock;</span><br><span class="line">int port;</span><br><span class="line">    bool bNeedAlloc;</span><br><span class="line"><span class="keyword">const</span> char *pDomain;</span><br><span class="line"><span class="keyword">const</span> char *pContent;</span><br><span class="line"><span class="keyword">const</span> char *pURI;</span><br><span class="line">char *pPort;</span><br><span class="line">char *pSpace;</span><br><span class="line"></span><br><span class="line">*http_status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*content == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        bNeedAlloc = <span class="literal">true</span>;</span><br><span class="line">        alloc_size = <span class="number">64</span> * <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        bNeedAlloc = <span class="literal">false</span>;</span><br><span class="line">        alloc_size = *content_len - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">*content_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url_len &gt; sizeof(out_buff) - <span class="number">128</span>)</span><br><span class="line">    &#123;</span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;url too long, url length: %d &gt; %d&quot;</span>, __LINE__,</span><br><span class="line">                url_len, (int)(sizeof(out_buff) - <span class="number">128</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ENAMETOOLONG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (url_len &lt;= <span class="number">7</span> || strncasecmp(url, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;invalid url.&quot;</span>, __LINE__);</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pDomain = url + <span class="number">7</span>;</span><br><span class="line">pURI = strchr(pDomain, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pURI == NULL)</span><br><span class="line">&#123;</span><br><span class="line">domain_len = url_len - <span class="number">7</span>;</span><br><span class="line">pURI = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">domain_len = pURI - pDomain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (domain_len &gt;= sizeof(domain_name))</span><br><span class="line">&#123;</span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;domain is too large, exceed %d.&quot;</span>, \</span><br><span class="line">__LINE__, (int)sizeof(domain_name));</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memcpy(domain_name, pDomain, domain_len);</span><br><span class="line">*(domain_name + domain_len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">pPort = strchr(domain_name, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pPort == NULL)</span><br><span class="line">&#123;</span><br><span class="line">port = <span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*pPort = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">port = atoi(pPort + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getIpaddrByName(domain_name, ip_addr, \</span><br><span class="line">sizeof(ip_addr)) == INADDR_NONE)</span><br><span class="line">&#123;</span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;resolve domain \&quot;%s\&quot; fail.&quot;</span>, \</span><br><span class="line">__LINE__, domain_name);</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sock &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;socket create failed, errno: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EPERM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=connectserverbyip_nb_auto(sock, ip_addr, port, \</span><br><span class="line">connect_timeout)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(sock);</span><br><span class="line"></span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;connect to %s:%d fail, errno: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;error info: %s&quot;</span>, __LINE__, domain_name, \</span><br><span class="line">port, result, STRERROR(result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out_len = snprintf(out_buff, sizeof(out_buff), \</span><br><span class="line"><span class="string">&quot;GET %s HTTP/1.0\r\n&quot;</span> \</span><br><span class="line"><span class="string">&quot;Host: %s:%d\r\n&quot;</span> \</span><br><span class="line"><span class="string">&quot;Connection: close\r\n&quot;</span> \</span><br><span class="line"><span class="string">&quot;\r\n&quot;</span>, pURI, domain_name, port);</span><br><span class="line"><span class="comment">// we have Connection: close means: the peer will shutdown the socket when it has finished sending data</span></span><br><span class="line"><span class="comment">// send http request </span></span><br><span class="line"><span class="keyword">if</span> ((result=tcpsenddata(sock, out_buff, out_len, network_timeout)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(sock);</span><br><span class="line"></span><br><span class="line">sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;send data to %s:%d fail, errno: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;error info: %s&quot;</span>, __LINE__, domain_name, \</span><br><span class="line">port, result, STRERROR(result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bNeedAlloc)</span><br><span class="line">    &#123;</span><br><span class="line">        *content = (char *)malloc(alloc_size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (*content == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            close(sock);</span><br><span class="line">            result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line"></span><br><span class="line">            sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;malloc %d bytes fail, errno: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;error info: %s&quot;</span>, __LINE__, alloc_size + <span class="number">1</span>, \</span><br><span class="line">                    result, STRERROR(result));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">recv_bytes = alloc_size - *content_len; <span class="comment">// recv_bytes: left space to recv data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (recv_bytes &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span> (bNeedAlloc)</span><br><span class="line">            &#123;</span><br><span class="line">                alloc_size *= <span class="number">2</span>;</span><br><span class="line">                *content = (char *)realloc(*content, alloc_size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (*content == NULL)</span><br><span class="line">                &#123;</span><br><span class="line">                    *content_len = <span class="number">0</span>;</span><br><span class="line">                    close(sock);</span><br><span class="line">                    result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line"></span><br><span class="line">                    sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                            <span class="string">&quot;realloc %d bytes fail, errno: %d, &quot;</span> \</span><br><span class="line">                            <span class="string">&quot;error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">                            alloc_size + <span class="number">1</span>, \</span><br><span class="line">                            result, STRERROR(result));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                recv_bytes = alloc_size - *content_len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                    sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                            <span class="string">&quot;buffer size: %d is too small&quot;</span>, \</span><br><span class="line">                            __LINE__, alloc_size);</span><br><span class="line">                    <span class="keyword">return</span> ENOSPC;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = tcprecvdata_ex(sock, *content + *content_len, \</span><br><span class="line">recv_bytes, network_timeout, &amp;recv_bytes);</span><br><span class="line"></span><br><span class="line">*content_len += recv_bytes;</span><br><span class="line">&#125; <span class="keyword">while</span> (result == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == ENOTCONN) <span class="comment">// means the peer has shutdowned the socket</span></span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="number">0</span>;   <span class="comment">// success value</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">            sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;recv data from %s:%d fail, errno: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;error info: %s&quot;</span>, __LINE__, domain_name, \</span><br><span class="line">                    port, result, STRERROR(result));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *(*content + *content_len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        pContent = strstr(*content, <span class="string">&quot;\r\n\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pContent == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;response data from %s:%d is invalid&quot;</span>, \</span><br><span class="line">                    __LINE__, domain_name, port);</span><br><span class="line"></span><br><span class="line">            result = EINVAL;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pContent += <span class="number">4</span>;   <span class="comment">// pointer to the next line</span></span><br><span class="line">        pSpace = strchr(*content, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pSpace == NULL || pSpace &gt;= pContent)</span><br><span class="line">        &#123;</span><br><span class="line">            sprintf(error_info, <span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;response data from %s:%d is invalid&quot;</span>, \</span><br><span class="line">                    __LINE__, domain_name, port);</span><br><span class="line"></span><br><span class="line">            result = EINVAL;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *http_status = atoi(pSpace + <span class="number">1</span>);  <span class="comment">// http response status: such as http/1.1 200 ok</span></span><br><span class="line">        *content_len -= pContent - *content;  <span class="comment">// minus the length of status line: http/1.1 200 ok</span></span><br><span class="line">        memcpy(*content, pContent, *content_len);  <span class="comment">// remove the status line</span></span><br><span class="line">        *(*content + *content_len) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        *error_info = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">close(sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span> &amp;&amp; bNeedAlloc)  <span class="comment">// result !=0: means error occured</span></span><br><span class="line">    &#123;</span><br><span class="line">        free(*content);</span><br><span class="line">        *content = NULL;</span><br><span class="line">        *content_len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return the string ip addr by ip name(maybe is digital ip addr or domain addr)</span></span><br><span class="line">in_addr_t getIpaddrByName(<span class="keyword">const</span> char *name, char *buff, <span class="keyword">const</span> int bufferSize)</span><br><span class="line">&#123;</span><br><span class="line">struct in_addr ip_addr;</span><br><span class="line">struct hostent *ent;</span><br><span class="line">in_addr_t **addr_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((*name &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *name &lt;= <span class="string">&#x27;9&#x27;</span>) &amp;&amp;   <span class="comment">// name is the digital ip address </span></span><br><span class="line">inet_pton(AF_INET, name, &amp;ip_addr) == <span class="number">1</span>)  <span class="comment">// success</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (buff != NULL)</span><br><span class="line">&#123;</span><br><span class="line">snprintf(buff, bufferSize, <span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ip_addr.s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ent = gethostbyname(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ent == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> INADDR_NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    addr_list = (in_addr_t **)ent-&gt;h_addr_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (addr_list[<span class="number">0</span>] == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> INADDR_NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(&amp;ip_addr, <span class="number">0</span>, sizeof(ip_addr));</span><br><span class="line">ip_addr.s_addr = *(addr_list[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (buff != NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (inet_ntop(AF_INET, &amp;ip_addr, buff, bufferSize) == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*buff = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ip_addr.s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** connect to server by non-block mode, auto detect socket block mode</span></span><br><span class="line"><span class="comment"> *  parameters:</span></span><br><span class="line"><span class="comment"> *          sock: the socket, can be block mode</span></span><br><span class="line"><span class="comment"> *          server_ip: ip address of the server</span></span><br><span class="line"><span class="comment"> *          server_port: port of the server</span></span><br><span class="line"><span class="comment"> *          timeout: connect timeout in seconds</span></span><br><span class="line"><span class="comment"> *  return: error no, 0 success, != 0 fail</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#define connectserverbyip_nb_auto(sock, server_ip, server_port, timeout) \</span><br><span class="line">connectserverbyip_nb_ex(sock, server_ip, server_port, timeout, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect the server by ip , return 0 stands for connect succeed</span></span><br><span class="line">int connectserverbyip_nb_ex(int sock, <span class="keyword">const</span> char *server_ip, \</span><br><span class="line"><span class="keyword">const</span> short server_port, <span class="keyword">const</span> int timeout, \</span><br><span class="line"><span class="keyword">const</span> bool auto_detect)</span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line">int flags;</span><br><span class="line">bool needRestore;</span><br><span class="line">socklen_t len;</span><br><span class="line"></span><br><span class="line">#ifdef USE_SELECT</span><br><span class="line">fd_set rset;</span><br><span class="line">fd_set wset;</span><br><span class="line">struct timeval tval;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">struct pollfd pollfds;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">struct sockaddr_in6 addr6;</span><br><span class="line">    void *dest;</span><br><span class="line">    int size;</span><br><span class="line"></span><br><span class="line">    memset(&amp;addr, <span class="number">0</span>, sizeof(struct sockaddr_in));</span><br><span class="line">    memset(&amp;addr6, <span class="number">0</span>, sizeof(struct sockaddr_in6));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((result=setsockaddrbyip(server_ip, server_port, &amp;addr, &amp;addr6,</span><br><span class="line">                    &amp;dest, &amp;size)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (auto_detect)</span><br><span class="line">&#123;</span><br><span class="line">flags = fcntl(sock, F_GETFL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flags &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EACCES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((flags &amp; O_NONBLOCK) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fcntl(sock, F_SETFL, flags | O_NONBLOCK) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EACCES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">needRestore = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">needRestore = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">needRestore = <span class="literal">false</span>;</span><br><span class="line">flags = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (connect(sock, (<span class="keyword">const</span> struct sockaddr*)dest, size) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : EINPROGRESS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != EINPROGRESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">// connect return 0: success, -1: failure</span></span><br><span class="line">&#123;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// after call connect, we call select or poll to get error if error occurs</span></span><br><span class="line"></span><br><span class="line">#ifdef USE_SELECT</span><br><span class="line">FD_ZERO(&amp;rset);</span><br><span class="line">FD_ZERO(&amp;wset);</span><br><span class="line">FD_SET(sock, &amp;rset);</span><br><span class="line">FD_SET(sock, &amp;wset);</span><br><span class="line">tval.tv_sec = timeout;</span><br><span class="line">tval.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">result = select(sock+<span class="number">1</span>, &amp;rset, &amp;wset, NULL, \</span><br><span class="line">timeout &gt; <span class="number">0</span> ? &amp;tval : NULL);</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">pollfds.fd = sock;</span><br><span class="line">pollfds.events = POLLIN | POLLOUT;</span><br><span class="line">result = poll(&amp;pollfds, <span class="number">1</span>, <span class="number">1000</span> * timeout);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = ETIMEDOUT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : EINTR;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// means return value &gt; 0</span></span><br><span class="line">len = sizeof(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getsockopt: 0: success, -1:failure</span></span><br><span class="line"><span class="keyword">if</span> (getsockopt(sock, SOL_SOCKET, SO_ERROR, &amp;result, &amp;len) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : EACCES; <span class="comment">// means failure</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needRestore)</span><br><span class="line">&#123;</span><br><span class="line">fcntl(sock, F_SETFL, flags);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">get the content of filename, which is saved to *buff, the size of filename is saved to file_size</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">int getFileContent(<span class="keyword">const</span> char *filename, char **buff, int64_t *file_size)</span><br><span class="line">&#123;</span><br><span class="line">int fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isFile(filename))</span><br><span class="line">    &#123;</span><br><span class="line">*buff = NULL;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;%s is not a regular file&quot;</span>, __LINE__, filename);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">fd = <span class="keyword">open</span>(filename, O_RDONLY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*buff = NULL;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;open file %s fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">filename, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : ENOENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((*file_size=lseek(fd, <span class="number">0</span>, SEEK_END)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*buff = NULL;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">close(fd);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;lseek file %s fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">filename, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*buff = (char *)malloc(*file_size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*buff == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;malloc %d bytes fail&quot;</span>, __LINE__, \</span><br><span class="line">(int)(*file_size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lseek(fd, <span class="number">0</span>, SEEK_SET) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*buff = NULL;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">close(fd);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;lseek file %s fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">filename, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (read(fd, *buff, *file_size) != *file_size)</span><br><span class="line">&#123;</span><br><span class="line">free(*buff);</span><br><span class="line">*buff = NULL;</span><br><span class="line">*file_size = <span class="number">0</span>;</span><br><span class="line">close(fd);</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;read from file %s fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, __LINE__, \</span><br><span class="line">filename, errno, STRERROR(errno));</span><br><span class="line"><span class="keyword">return</span> errno != <span class="number">0</span> ? errno : EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(*buff)[*file_size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int iniLoadItemsFromBuffer(char *content, IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">    char *pContent;</span><br><span class="line">    char *new_content;</span><br><span class="line">    int content_len;</span><br><span class="line">    int new_content_len;</span><br><span class="line"></span><br><span class="line">    new_content = content;</span><br><span class="line">    new_content_len = strlen(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        pContent = new_content; <span class="comment">// after get rid of first #@if, process left #@if</span></span><br><span class="line">        content_len = new_content_len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((new_content=iniProccessIf(pContent, content_len,</span><br><span class="line">                        pContext, &amp;new_content_len)) == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ENOMEM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (new_content != pContent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        pContent = new_content;</span><br><span class="line">        content_len = new_content_len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((new_content=iniProccessFor(pContent, content_len,</span><br><span class="line">                        pContext, &amp;new_content_len)) == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ENOMEM;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (new_content != pContent);  <span class="comment">// loop processing</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iniDoLoadItemsFromBuffer(new_content, pContext);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function: reslove the content, and get rid of #@if and #@endif, save to new buffer</span></span><br><span class="line"><span class="comment">returnd by iniProcessIf, such as:</span></span><br><span class="line"><span class="comment">content is:</span></span><br><span class="line"><span class="comment">#@if xxx</span></span><br><span class="line"><span class="comment">...abc</span></span><br><span class="line"><span class="comment">#@endif</span></span><br><span class="line"><span class="comment">...def</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">new buffer is: </span></span><br><span class="line"><span class="comment">...abc</span></span><br><span class="line"><span class="comment">...def</span></span><br><span class="line"><span class="comment">returned by iniProcessIf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该函数看不懂感觉可以略过不看</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">static char *iniProccessIf(char *content, <span class="keyword">const</span> int content_len,</span><br><span class="line">        IniContext *pContext, int *new_content_len)</span><br><span class="line">&#123;</span><br><span class="line">    char *pStart;</span><br><span class="line">    char *pEnd;</span><br><span class="line">    char *pCondition;</span><br><span class="line">    char *pElse;</span><br><span class="line">    char *pIfPart;</span><br><span class="line">    char *pElsePart;</span><br><span class="line">    int conditionLen;</span><br><span class="line">    int ifPartLen;</span><br><span class="line">    int elsePartLen;</span><br><span class="line">    int copyLen;</span><br><span class="line">    char *newContent;</span><br><span class="line">    char *pDest;</span><br><span class="line"></span><br><span class="line">    *new_content_len = content_len;</span><br><span class="line"></span><br><span class="line">    pStart = strstr(content, _PREPROCESS_TAG_STR_IF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pStart == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pCondition = pStart + _PREPROCESS_TAG_LEN_IF;</span><br><span class="line">    pIfPart = strchr(pCondition, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pIfPart == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conditionLen = pIfPart - pCondition;</span><br><span class="line"></span><br><span class="line">    pEnd = strstr(pIfPart, _PREPROCESS_TAG_STR_ENDIF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pElse = strstr(pIfPart, _PREPROCESS_TAG_STR_ELSE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pElse == NULL || pElse &gt; pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        ifPartLen = pEnd - pIfPart;</span><br><span class="line">        pElsePart = NULL;</span><br><span class="line">        elsePartLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ifPartLen = pElse - pIfPart;</span><br><span class="line">        pElsePart = strchr(pElse + _PREPROCESS_TAG_LEN_ELSE, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pElsePart == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        elsePartLen = pEnd - pElsePart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newContent = iniAllocContent(pContext, content_len); <span class="comment">// newContent is the buffer address</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newContent == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pDest = newContent;</span><br><span class="line">    copyLen = pStart - content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copyLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        memcpy(pDest, content, copyLen);</span><br><span class="line">        pDest += copyLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iniCalcCondition(pCondition, conditionLen))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ifPartLen &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            memcpy(pDest, pIfPart, ifPartLen);</span><br><span class="line">            pDest += ifPartLen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (elsePartLen &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            memcpy(pDest, pElsePart, elsePartLen);</span><br><span class="line">            pDest += elsePartLen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDIF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copyLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDIF, copyLen);</span><br><span class="line">        pDest += copyLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pDest = <span class="string">&#x27;\0&#x27;</span>;   </span><br><span class="line">    *new_content_len = pDest - newContent;</span><br><span class="line">    <span class="keyword">return</span> newContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* process the for block: #@for  ... #@endfor</span></span><br><span class="line"><span class="comment">get rid of the #@endfor, #@for, and expand the for loop which replace &#123;$i&#125; with the real value</span></span><br><span class="line"><span class="comment">and saved to new buffer returned by iniProcessFor</span></span><br><span class="line"><span class="comment">该函数与上一个函数类似</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">static char *iniProccessFor(char *content, <span class="keyword">const</span> int content_len,</span><br><span class="line">        IniContext *pContext, int *new_content_len)</span><br><span class="line">&#123;</span><br><span class="line">    char *pStart;</span><br><span class="line">    char *pEnd;</span><br><span class="line">    char *pForRange;</span><br><span class="line">    char *pForBlock;</span><br><span class="line">    char *id;</span><br><span class="line">    char tag[<span class="number">80</span>];</span><br><span class="line">    char value[<span class="number">16</span>];</span><br><span class="line">    int idLen;</span><br><span class="line">    int rangeLen;</span><br><span class="line">    int forBlockLen;</span><br><span class="line">    int start;</span><br><span class="line">    int end;</span><br><span class="line">    int step;</span><br><span class="line">    int count;</span><br><span class="line">    int i;</span><br><span class="line">    int copyLen;</span><br><span class="line">    int tagLen;</span><br><span class="line">    int valueLen;</span><br><span class="line">    char *newContent;</span><br><span class="line">    char *pDest;</span><br><span class="line"></span><br><span class="line">    *new_content_len = content_len;</span><br><span class="line">    pStart = strstr(content, _PREPROCESS_TAG_STR_FOR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pStart == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pForRange = pStart + _PREPROCESS_TAG_LEN_FOR; <span class="comment">// for condition begin</span></span><br><span class="line">    pForBlock = strchr(pForRange, <span class="string">&#x27;\n&#x27;</span>);  <span class="comment">// for block begin</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pForBlock == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rangeLen = pForBlock - pForRange;</span><br><span class="line"></span><br><span class="line">    pEnd = strstr(pForBlock, _PREPROCESS_TAG_STR_ENDFOR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    forBlockLen = pEnd - pForBlock;  <span class="comment">// for block len</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iniParseForRange(pForRange, rangeLen, &amp;id, &amp;idLen,</span><br><span class="line">                &amp;start, &amp;end, &amp;step) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (step == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid step: %d for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                step, rangeLen, pForRange);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = (end - start) / step;  <span class="comment">// how many steps</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid step: %d for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                step, rangeLen, pForRange);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newContent = iniAllocContent(pContext, content_len + (forBlockLen + <span class="number">16</span>) * count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newContent == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pDest = newContent;  <span class="comment">// newContent is the buffer addr to stored for block content</span></span><br><span class="line">    copyLen = pStart - content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copyLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        memcpy(pDest, content, copyLen);</span><br><span class="line">        pDest += copyLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// id=&quot;i&quot;, idLen=1, tag will be &quot;&#123;$i&#125;&quot;, tagLen will be 4 = strlen(&quot;&#123;$i&#125;&quot;)</span></span><br><span class="line">    tagLen = sprintf(tag, <span class="string">&quot;&#123;$%.*s&#125;&quot;</span>, idLen, id);</span><br><span class="line"><span class="comment">// tagLen is the variable length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=start; i&lt;=end; i+=step)</span><br><span class="line">    &#123;</span><br><span class="line">        char *p;</span><br><span class="line">        char *pRemain;</span><br><span class="line">        int remainLen;</span><br><span class="line"></span><br><span class="line">        valueLen = sprintf(value, <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">        pRemain = pForBlock;</span><br><span class="line">        remainLen = forBlockLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (remainLen &gt;= tagLen)</span><br><span class="line">        &#123;</span><br><span class="line">            p = (char *)memmem(pRemain, remainLen, tag, tagLen);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                memcpy(pDest, pRemain, remainLen);</span><br><span class="line">                pDest += remainLen;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            copyLen = p - pRemain;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (copyLen &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                memcpy(pDest, pRemain, copyLen);</span><br><span class="line">                pDest += copyLen;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            memcpy(pDest, value, valueLen);</span><br><span class="line">            pDest += valueLen;</span><br><span class="line"></span><br><span class="line">            pRemain = p + tagLen;</span><br><span class="line">            remainLen -= copyLen + tagLen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDFOR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copyLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDFOR, copyLen);</span><br><span class="line">        pDest += copyLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pDest = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    *new_content_len = pDest - newContent;</span><br><span class="line">    <span class="keyword">return</span> newContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alloc space for the length of content_len, return the buffer addr</span></span><br><span class="line">static char *iniAllocContent(IniContext *pContext, <span class="keyword">const</span> int content_len)</span><br><span class="line">&#123;</span><br><span class="line">    char *buff;</span><br><span class="line">    DynamicContents *pDynamicContents;</span><br><span class="line">    pDynamicContents = iniAllocDynamicContent(pContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDynamicContents == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;malloc dynamic contents fail&quot;</span>, __LINE__);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default: pDynamicContents-&gt;count = 0, pDynamicContents-&gt;alloc_count=0</span></span><br><span class="line">    <span class="keyword">if</span> (pDynamicContents-&gt;count &gt;= pDynamicContents-&gt;alloc_count)</span><br><span class="line">    &#123;</span><br><span class="line">        int alloc_count;</span><br><span class="line">        int bytes;</span><br><span class="line">        char **contents;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pDynamicContents-&gt;alloc_count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            alloc_count = <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            alloc_count = pDynamicContents-&gt;alloc_count * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes = sizeof(char *) * alloc_count;</span><br><span class="line">        contents = (char **)malloc(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contents == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                    <span class="string">&quot;malloc %d bytes fail&quot;</span>, __LINE__, bytes);</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        memset(contents, <span class="number">0</span>, bytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pDynamicContents-&gt;count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            memcpy(contents, pDynamicContents-&gt;contents,</span><br><span class="line">                    sizeof(char *) * pDynamicContents-&gt;count);</span><br><span class="line">            free(pDynamicContents-&gt;contents);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pDynamicContents-&gt;contents = contents;</span><br><span class="line">        pDynamicContents-&gt;alloc_count = alloc_count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buff = malloc(content_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buff == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;malloc %d bytes fail&quot;</span>, __LINE__, content_len);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pDynamicContents-&gt;contents[pDynamicContents-&gt;count++] = buff;</span><br><span class="line">    <span class="keyword">return</span> buff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find pContext in g_dynamic_contents, if find: return, or add pContext to g_dynamic_contents</span></span><br><span class="line">static DynamicContents *iniAllocDynamicContent(IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_dynamic_content_count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g_dynamic_contents[i].context == pContext)</span><br><span class="line">            &#123;</span><br><span class="line">                g_dynamic_content_index = i;</span><br><span class="line">                <span class="keyword">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_dynamic_content_count == _MAX_DYNAMIC_CONTENTS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!g_dynamic_contents[i].used)</span><br><span class="line">        &#123;</span><br><span class="line">            g_dynamic_contents[i].used = <span class="literal">true</span>;</span><br><span class="line">            g_dynamic_contents[i].context = pContext;</span><br><span class="line">            g_dynamic_content_index = i;</span><br><span class="line">            g_dynamic_content_count++;</span><br><span class="line">            <span class="keyword">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function: resolve the format:</span></span><br><span class="line"><span class="comment">%&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</span></span><br><span class="line"><span class="comment">%&#123;LOCAL_HOST&#125; in [10.0.11.89,10.0.11.99]</span></span><br><span class="line"><span class="comment">and compare g_local_host_ip_addrs array, check every elem in g_local_host_ip_addrs is</span></span><br><span class="line"><span class="comment">whether exists in [10.0.11.89,10.0.11.99] or not, exists return true or return false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">static bool iniCalcCondition(char *condition, <span class="keyword">const</span> int condition_len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * current only support %&#123;VARIABLE&#125; in [x,y,..]</span></span><br><span class="line"><span class="comment">     * support variables are: LOCAL_IP and LOCAL_HOST</span></span><br><span class="line"><span class="comment">     * such as: %&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_IP   <span class="number">1</span></span><br><span class="line">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST <span class="number">2</span></span><br><span class="line">#define _PREPROCESS_MAX_LIST_VALUE_COUNT    <span class="number">32</span></span><br><span class="line">    char *p;</span><br><span class="line">    char *pEnd;</span><br><span class="line">    char *pSquareEnd;</span><br><span class="line">    char *values[_PREPROCESS_MAX_LIST_VALUE_COUNT];</span><br><span class="line">    int varType;</span><br><span class="line">    int count;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    pEnd = condition + condition_len;</span><br><span class="line">    p = pEnd - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &gt; condition &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*p != <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;expect \&quot;]\&quot;, condition: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                condition_len, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pSquareEnd = p;</span><br><span class="line"></span><br><span class="line">    p = condition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd - p &lt; <span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;unkown condition: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                condition_len, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_IP,</span><br><span class="line">                _PREPROCESS_VARIABLE_LEN_LOCAL_IP) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_IP;</span><br><span class="line">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_IP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_HOST,</span><br><span class="line">                _PREPROCESS_VARIABLE_LEN_LOCAL_HOST) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST;</span><br><span class="line">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_HOST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;unkown condition: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                condition_len, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd - p &lt; <span class="number">4</span> || memcmp(p, <span class="string">&quot;in&quot;</span>, <span class="number">2</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;expect \&quot;in\&quot;, condition: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                condition_len, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p += <span class="number">2</span>;  <span class="comment">//skip in</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*p != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;expect \&quot;[\&quot;, condition: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                condition_len, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pSquareEnd = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    count = splitEx(p + <span class="number">1</span>, <span class="string">&#x27;,&#x27;</span>, values, _PREPROCESS_MAX_LIST_VALUE_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        values[i] = trim(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (varType == _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST)</span><br><span class="line">    &#123;</span><br><span class="line">        char host[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gethostname(host, sizeof(host)) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                    <span class="string">&quot;call gethostname fail, &quot;</span></span><br><span class="line">                    <span class="string">&quot;errno: %d, error info: %s&quot;</span>, __LINE__,</span><br><span class="line">                    errno, STRERROR(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> iniMatchValue(host, values, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> char *local_ip;</span><br><span class="line">        local_ip = get_first_local_ip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (local_ip != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iniMatchValue(local_ip, values, count))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            local_ip = get_next_local_ip(local_ip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// find target in array: values, if find return true, else return false</span></span><br><span class="line">static bool iniMatchValue(<span class="keyword">const</span> char *target, char **values, <span class="keyword">const</span> int count)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(target, values[i]) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get a integer from str ended by pEnd, nlen is the length of integer</span></span><br><span class="line">static char *iniGetInteger(char *str, char *pEnd, int *nlen)</span><br><span class="line">&#123;</span><br><span class="line">    char *p;</span><br><span class="line">    char *pNumber;</span><br><span class="line"></span><br><span class="line">    p = str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pNumber = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *p &lt;= <span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *nlen = p - pNumber;</span><br><span class="line">    <span class="keyword">return</span> pNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse the format: #@for i from 0 to 15 step 1</span></span><br><span class="line"><span class="comment">// *id pointer to i, idLen=1, start=0, end=15, step=1</span></span><br><span class="line">static int iniParseForRange(char *range, <span class="keyword">const</span> int range_len,</span><br><span class="line">        char **id, int *idLen, int *start, int *end, int *step)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * #<span class="doctag">@for</span> i from 0 to 15 step 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    char *p;</span><br><span class="line">    char *pEnd;</span><br><span class="line">    char *pNumber;</span><br><span class="line">    int nlen;</span><br><span class="line"></span><br><span class="line">    pEnd = range + range_len;</span><br><span class="line">    p = range;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd - p &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;unkown for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *id = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; !(*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *idLen = p - *id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*idLen == <span class="number">0</span> || *idLen &gt; <span class="number">64</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd - p &lt; <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_FROM,</span><br><span class="line">                    _PREPROCESS_TAG_LEN_FOR_FROM) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (*(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class="string">&#x27; &#x27;</span> ||</span><br><span class="line">                 *(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class="string">&#x27;\t&#x27;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p += _PREPROCESS_TAG_LEN_FOR_FROM + <span class="number">1</span>;</span><br><span class="line">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nlen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *start = atoi(pNumber);  <span class="comment">//atoi meets non-numbers will stop transfer</span></span><br><span class="line">    p = pNumber + nlen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEnd - p &lt; <span class="number">4</span> || !(*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_TO,</span><br><span class="line">                    _PREPROCESS_TAG_LEN_FOR_TO) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (*(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class="string">&#x27; &#x27;</span> ||</span><br><span class="line">                 *(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class="string">&#x27;\t&#x27;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;unkown for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p += _PREPROCESS_TAG_LEN_FOR_TO + <span class="number">1</span>;</span><br><span class="line">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nlen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *end = atoi(pNumber);</span><br><span class="line">    p = pNumber + nlen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == pEnd) <span class="comment">// default step is set to 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        *step = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_STEP,</span><br><span class="line">                    _PREPROCESS_TAG_LEN_FOR_STEP) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (*(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class="string">&#x27; &#x27;</span> ||</span><br><span class="line">                 *(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class="string">&#x27;\t&#x27;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;unkown for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p += _PREPROCESS_TAG_LEN_FOR_STEP + <span class="number">1</span>;</span><br><span class="line">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nlen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *step = atoi(pNumber);</span><br><span class="line">    p = pNumber + nlen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span></span><br><span class="line">                <span class="string">&quot;invalid for range: %.*s&quot;</span>, __LINE__,</span><br><span class="line">                range_len, range);</span><br><span class="line">        <span class="keyword">return</span> EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// content is the conf file content which has been preProcessed</span></span><br><span class="line"><span class="comment">// return 0: success</span></span><br><span class="line">static int iniDoLoadItemsFromBuffer(char *content, IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">    AnnotationMap *pAnnoMap;</span><br><span class="line">IniSection *pSection;</span><br><span class="line">IniItem *pItem;</span><br><span class="line">char *pLine;</span><br><span class="line">char *pLastEnd;</span><br><span class="line">char *pEqualChar;</span><br><span class="line">    char *pItemName;</span><br><span class="line">    char *pAnnoItemLine;</span><br><span class="line">char *pIncludeFilename;</span><br><span class="line">    char *pItemValues[<span class="number">100</span>];</span><br><span class="line">    char pFuncName[FAST_INI_ITEM_NAME_LEN + <span class="number">1</span>];</span><br><span class="line">char full_filename[MAX_PATH_SIZE];</span><br><span class="line">    int i;</span><br><span class="line">int nLineLen;</span><br><span class="line">int nNameLen;</span><br><span class="line">    int nItemCnt;</span><br><span class="line">int nValueLen;</span><br><span class="line">int result;</span><br><span class="line">    int isAnnotation;</span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">    pAnnoItemLine = NULL;</span><br><span class="line">    isAnnotation = <span class="number">0</span>;</span><br><span class="line">    *pFuncName = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">pLastEnd = content - <span class="number">1</span>;</span><br><span class="line">pSection = pContext-&gt;current_section;</span><br><span class="line">    pItem = pSection-&gt;items + pSection-&gt;count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pLastEnd != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pLine = pLastEnd + <span class="number">1</span>;  <span class="comment">// pointer to the begin of a line</span></span><br><span class="line">pLastEnd = strchr(pLine, <span class="string">&#x27;\n&#x27;</span>); <span class="comment">// pointer to the end of a line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pLastEnd != NULL)</span><br><span class="line">&#123;</span><br><span class="line">*pLastEnd = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isAnnotation &amp;&amp; pLine != pAnnoItemLine)</span><br><span class="line">        &#123;</span><br><span class="line">            logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                <span class="string">&quot;the @function annotation line &quot;</span> \</span><br><span class="line">                <span class="string">&quot;must follow by key=value line!&quot;</span>, __LINE__);</span><br><span class="line">            isAnnotation = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*pLine == <span class="string">&#x27;#&#x27;</span> &amp;&amp; \</span><br><span class="line">strncasecmp(pLine+<span class="number">1</span>, <span class="string">&quot;include&quot;</span>, <span class="number">7</span>) == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">(*(pLine+<span class="number">8</span>) == <span class="string">&#x27; &#x27;</span> || *(pLine+<span class="number">8</span>) == <span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">pIncludeFilename = strdup(pLine + <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pIncludeFilename == NULL)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;strdup %d bytes fail&quot;</span>, __LINE__, \</span><br><span class="line">(int)strlen(pLine + <span class="number">9</span>) + <span class="number">1</span>);</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trim(pIncludeFilename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strncasecmp(pIncludeFilename, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">snprintf(full_filename, sizeof(full_filename),\</span><br><span class="line"><span class="string">&quot;%s&quot;</span>, pIncludeFilename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*pIncludeFilename == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">snprintf(full_filename, sizeof(full_filename), \</span><br><span class="line"><span class="string">&quot;%s&quot;</span>, pIncludeFilename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">snprintf(full_filename, sizeof(full_filename), \</span><br><span class="line"><span class="string">&quot;%s/%s&quot;</span>, pContext-&gt;config_path, \</span><br><span class="line"> pIncludeFilename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fileExists(full_filename))</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line"><span class="string">&quot;include file \&quot;%s\&quot; not exists, &quot;</span> \</span><br><span class="line"><span class="string">&quot;line: \&quot;%s\&quot;&quot;</span>, __LINE__, \</span><br><span class="line">pIncludeFilename, pLine);</span><br><span class="line">free(pIncludeFilename);</span><br><span class="line">result = ENOENT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            pContext-&gt;current_section = &amp;pContext-&gt;global;</span><br><span class="line">result = iniDoLoadFromFile(full_filename, pContext); <span class="comment">// call again</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">free(pIncludeFilename);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            pContext-&gt;current_section = &amp;pContext-&gt;global; <span class="comment">// 将当前处理的section指向pContext-&gt;global</span></span><br><span class="line">pSection = pContext-&gt;current_section;</span><br><span class="line">            pItem = pSection-&gt;items + pSection-&gt;count;  <span class="comment">//must re-asign</span></span><br><span class="line"></span><br><span class="line">free(pIncludeFilename);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((*pLine == <span class="string">&#x27;#&#x27;</span> &amp;&amp; \</span><br><span class="line">            strncasecmp(pLine+<span class="number">1</span>, <span class="string">&quot;@function&quot;</span>, <span class="number">9</span>) == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            (*(pLine+<span class="number">10</span>) == <span class="string">&#x27; &#x27;</span> || *(pLine+<span class="number">10</span>) == <span class="string">&#x27;\t&#x27;</span>)))  <span class="comment">// 是否是@function annotation</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!pContext-&gt;ignore_annotation) </span><br><span class="line">&#123;</span><br><span class="line">                nNameLen = strlen(pLine + <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</span><br><span class="line">                &#123;</span><br><span class="line">                    nNameLen = FAST_INI_ITEM_NAME_LEN;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                memcpy(pFuncName, pLine + <span class="number">11</span>, nNameLen);</span><br><span class="line">                pFuncName[nNameLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                trim(pFuncName);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((int)strlen(pFuncName) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    isAnnotation = <span class="number">1</span>;</span><br><span class="line">                    pAnnoItemLine = pLastEnd + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                            <span class="string">&quot;the function name of annotation line is empty&quot;</span>, \</span><br><span class="line">                            __LINE__);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">trim(pLine);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*pLine == <span class="string">&#x27;#&#x27;</span> || *pLine == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nLineLen = strlen(pLine);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*pLine == <span class="string">&#x27;[&#x27;</span> &amp;&amp; *(pLine + (nLineLen - <span class="number">1</span>)) == <span class="string">&#x27;]&#x27;</span>) <span class="comment">//section</span></span><br><span class="line">&#123;</span><br><span class="line">char *section_name;</span><br><span class="line">int section_len;</span><br><span class="line"></span><br><span class="line">*(pLine + (nLineLen - <span class="number">1</span>)) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">section_name = pLine + <span class="number">1</span>; <span class="comment">//skip [</span></span><br><span class="line"></span><br><span class="line">trim(section_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*section_name == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">//global section</span></span><br><span class="line">&#123;</span><br><span class="line">pContext-&gt;current_section = &amp;pContext-&gt;global;</span><br><span class="line">pSection = pContext-&gt;current_section;</span><br><span class="line">                pItem = pSection-&gt;items + pSection-&gt;count;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">section_len = strlen(section_name);</span><br><span class="line">pSection = (IniSection *)hash_find(&amp;pContext-&gt;sections,\</span><br><span class="line">section_name, section_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pSection == NULL)  <span class="comment">// not find</span></span><br><span class="line">&#123;</span><br><span class="line">pSection = (IniSection *)malloc(sizeof(IniSection));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pSection == NULL)</span><br><span class="line">&#123;</span><br><span class="line">result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span>\</span><br><span class="line"><span class="string">&quot;malloc %d bytes fail, &quot;</span> \</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, \</span><br><span class="line">(int)sizeof(IniSection), \</span><br><span class="line">result, STRERROR(result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(pSection, <span class="number">0</span>, sizeof(IniSection));</span><br><span class="line">result = hash_insert(&amp;pContext-&gt;sections, \</span><br><span class="line">  section_name, section_len, pSection);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result *= -<span class="number">1</span>;</span><br><span class="line">logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span>\</span><br><span class="line"><span class="string">&quot;insert into hash table fail, &quot;</span>\</span><br><span class="line"><span class="string">&quot;errno: %d, error info: %s&quot;</span>, \</span><br><span class="line">__LINE__, result, \</span><br><span class="line">STRERROR(result));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pContext-&gt;current_section = pSection; </span><br><span class="line">                        pItem = pSection-&gt;items + pSection-&gt;count;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pEqualChar = strchr(pLine, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pEqualChar == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nNameLen = pEqualChar - pLine;</span><br><span class="line">nValueLen = strlen(pLine) - (nNameLen + <span class="number">1</span>); <span class="comment">// means we can not have &#x27; &#x27; or &#x27;\t&#x27; before &#x27;=&#x27; and after &#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</span><br><span class="line">&#123;</span><br><span class="line">nNameLen = FAST_INI_ITEM_NAME_LEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</span><br><span class="line">&#123;</span><br><span class="line">nValueLen = FAST_INI_ITEM_VALUE_LEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</span><br><span class="line">        &#123;</span><br><span class="line">            result = remallocSection(pSection, &amp;pItem);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memcpy(pItem-&gt;name, pLine, nNameLen);</span><br><span class="line">memcpy(pItem-&gt;value, pEqualChar + <span class="number">1</span>, nValueLen); <span class="comment">// means we can not have &#x27; &#x27; or &#x27;\t&#x27; before &#x27;=&#x27; and after &#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line">trim(pItem-&gt;name);  <span class="comment">// it allow has space before or after &#x27;=&#x27;</span></span><br><span class="line">trim(pItem-&gt;value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isAnnotation) <span class="comment">// access the global variable: g_annotataionMap and make some process</span></span><br><span class="line">        &#123;</span><br><span class="line">            isAnnotation = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (g_annotataionMap == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;not set annotataionMap and (%s) will use &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;the item value (%s)&quot;</span>, __LINE__, pItem-&gt;name,</span><br><span class="line">                    pItem-&gt;value);</span><br><span class="line"></span><br><span class="line">                pSection-&gt;count++;</span><br><span class="line">                pItem++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            nItemCnt = -<span class="number">1</span>;</span><br><span class="line">            pAnnoMap = g_annotataionMap;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (pAnnoMap-&gt;func_name)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (strcmp(pFuncName, pAnnoMap-&gt;func_name) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pAnnoMap-&gt;func_init)</span><br><span class="line">                    &#123;</span><br><span class="line">                        pAnnoMap-&gt;func_init();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pAnnoMap-&gt;func_get)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nItemCnt = pAnnoMap-&gt;func_get(pItem-&gt;value, pItemValues, <span class="number">100</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pAnnoMap++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nItemCnt == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;not found corresponding annotation function: %s, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;\&quot;%s\&quot; will use the item value \&quot;%s\&quot;&quot;</span>, __LINE__,</span><br><span class="line">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</span><br><span class="line">                pSection-&gt;count++;</span><br><span class="line">                pItem++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nItemCnt == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;annotation function %s execute fail, &quot;</span> \</span><br><span class="line">                    <span class="string">&quot;\&quot;%s\&quot; will use the item value \&quot;%s\&quot;&quot;</span>, __LINE__,</span><br><span class="line">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</span><br><span class="line">                pSection-&gt;count++;</span><br><span class="line">                pItem++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pItemName = pItem-&gt;name;</span><br><span class="line">            nNameLen = strlen(pItemName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nItemCnt; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                nValueLen = strlen(pItemValues[i]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</span><br><span class="line">                &#123;</span><br><span class="line">                    nValueLen = FAST_INI_ITEM_VALUE_LEN;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                memcpy(pItem-&gt;name, pItemName, nNameLen);</span><br><span class="line">                memcpy(pItem-&gt;value, pItemValues[i], nValueLen);</span><br><span class="line">                pItem-&gt;value[nValueLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                pSection-&gt;count++;</span><br><span class="line">                pItem++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</span><br><span class="line">                &#123;</span><br><span class="line">                    result = remallocSection(pSection, &amp;pItem);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (result)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">pSection-&gt;count++;</span><br><span class="line">pItem++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// result is 0 means has not error occured</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span> &amp;&amp; isAnnotation)</span><br><span class="line">    &#123;</span><br><span class="line">        logWarning(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">            <span class="string">&quot;the @function annotation line &quot;</span> \</span><br><span class="line">            <span class="string">&quot;must follow by key=value line!&quot;</span>, __LINE__);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the rid of white space from the left and right of pStr</span></span><br><span class="line">char *trim(char *pStr)</span><br><span class="line">&#123;</span><br><span class="line">trim_right(pStr);</span><br><span class="line">trim_left(pStr);</span><br><span class="line"><span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get rid of the white space from the left of pStr</span></span><br><span class="line">char *trim_left(char *pStr)</span><br><span class="line">&#123;</span><br><span class="line">char *p;</span><br><span class="line">char *pEnd;</span><br><span class="line">int nDestLen;</span><br><span class="line"></span><br><span class="line">pEnd = pStr + strlen(pStr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p=pStr; p&lt;pEnd; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="string">&#x27; &#x27;</span> == *p|| <span class="string">&#x27;\n&#x27;</span> == *p || <span class="string">&#x27;\r&#x27;</span> == *p || <span class="string">&#x27;\t&#x27;</span> == *p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( p == pStr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nDestLen = (pEnd - p) + <span class="number">1</span>; <span class="comment">//including \0</span></span><br><span class="line">memmove(pStr, p, nDestLen);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// get rid of the white space from the right of pStr</span></span><br><span class="line">char *trim_right(char *pStr)</span><br><span class="line">&#123;</span><br><span class="line">int len;</span><br><span class="line">char *p;</span><br><span class="line">char *pEnd;</span><br><span class="line"></span><br><span class="line">len = strlen(pStr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pEnd = pStr + len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p = pEnd;  p&gt;=pStr; p--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="string">&#x27; &#x27;</span> == *p || <span class="string">&#x27;\n&#x27;</span> == *p || <span class="string">&#x27;\r&#x27;</span> == *p || <span class="string">&#x27;\t&#x27;</span> == *p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != pEnd)</span><br><span class="line">&#123;</span><br><span class="line">*(p+<span class="number">1</span>) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool fileExists(<span class="keyword">const</span> char *filename)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> access(filename, <span class="number">0</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// allocate enough space for section</span></span><br><span class="line">static int remallocSection(IniSection *pSection, IniItem **pItem)</span><br><span class="line">&#123;</span><br><span class="line">    int bytes, result;</span><br><span class="line">    IniItem *pNew;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pSection-&gt;alloc_count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pSection-&gt;alloc_count = _INIT_ALLOC_ITEM_COUNT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pSection-&gt;alloc_count *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes = sizeof(IniItem) * pSection-&gt;alloc_count;</span><br><span class="line">    pNew = (IniItem *)malloc(bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pNew == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        logError(<span class="string">&quot;file: &quot;</span>__FILE__<span class="string">&quot;, line: %d, &quot;</span> \</span><br><span class="line">            <span class="string">&quot;malloc %d bytes fail&quot;</span>, __LINE__, bytes);</span><br><span class="line">        result = errno != <span class="number">0</span> ? errno : ENOMEM;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pSection-&gt;count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        memcpy(pNew, pSection-&gt;items,</span><br><span class="line">                sizeof(IniItem) * pSection-&gt;count);</span><br><span class="line">        free(pSection-&gt;items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pSection-&gt;items = pNew;</span><br><span class="line">    *pItem = pSection-&gt;items + pSection-&gt;count;</span><br><span class="line"></span><br><span class="line">    memset(*pItem, <span class="number">0</span>, sizeof(IniItem) * \</span><br><span class="line">        (pSection-&gt;alloc_count - pSection-&gt;count));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void *hash_find(HashArray *pHash, <span class="keyword">const</span> void *key, <span class="keyword">const</span> int key_len)</span><br><span class="line">&#123;</span><br><span class="line">unsigned int hash_code;</span><br><span class="line">HashData **ppBucket;</span><br><span class="line">HashData *hash_data;</span><br><span class="line"></span><br><span class="line">hash_code = pHash-&gt;hash_func(key, key_len);</span><br><span class="line">ppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</span><br><span class="line"></span><br><span class="line">HASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">hash_data = _chain_find_entry(ppBucket, key, key_len, hash_code);</span><br><span class="line">HASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hash_data != NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> hash_data-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define HASH_LOCK(pHash, index) \</span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;lock_count &gt; <span class="number">0</span>) \</span><br><span class="line">&#123; \</span><br><span class="line">pthread_mutex_lock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define HASH_UNLOCK(pHash, index) \</span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;lock_count &gt; <span class="number">0</span>) \</span><br><span class="line">&#123; \</span><br><span class="line">pthread_mutex_unlock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static HashData *_chain_find_entry(HashData **ppBucket, <span class="keyword">const</span> void *key, \</span><br><span class="line"><span class="keyword">const</span> int key_len, <span class="keyword">const</span> unsigned int hash_code)</span><br><span class="line">&#123;</span><br><span class="line">HashData *hash_data;</span><br><span class="line"></span><br><span class="line">hash_data = *ppBucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hash_data != NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \</span><br><span class="line">memcmp(key, hash_data-&gt;key, key_len) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> hash_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash_data = hash_data-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define hash_insert(pHash, key, key_len, value) \</span><br><span class="line">hash_insert_ex(pHash, key, key_len, value, <span class="number">0</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">int hash_insert_ex(HashArray *pHash, <span class="keyword">const</span> void *key, <span class="keyword">const</span> int key_len, \</span><br><span class="line">void *value, <span class="keyword">const</span> int value_len, <span class="keyword">const</span> bool needLock)</span><br><span class="line">&#123;</span><br><span class="line">unsigned int hash_code;</span><br><span class="line">HashData **ppBucket;</span><br><span class="line">HashData *hash_data;</span><br><span class="line">HashData *previous;</span><br><span class="line">char *pBuff;</span><br><span class="line">int bytes;</span><br><span class="line">int malloc_value_size;</span><br><span class="line"></span><br><span class="line">hash_code = pHash-&gt;hash_func(key, key_len);</span><br><span class="line">ppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</span><br><span class="line"></span><br><span class="line">previous = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needLock)</span><br><span class="line">&#123;</span><br><span class="line">HASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash_data = *ppBucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hash_data != NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \</span><br><span class="line">memcmp(key, hash_data-&gt;key, key_len) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">previous = hash_data;</span><br><span class="line">hash_data = hash_data-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hash_data != NULL) <span class="comment">//exists</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!pHash-&gt;is_malloc_value)</span><br><span class="line">&#123;</span><br><span class="line">hash_data-&gt;value_len = value_len;</span><br><span class="line">hash_data-&gt;value = (char *)value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needLock)</span><br><span class="line">&#123;</span><br><span class="line">HASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hash_data-&gt;malloc_value_size &gt;= value_len &amp;&amp; \</span><br><span class="line">(hash_data-&gt;malloc_value_size &lt;= <span class="number">128</span> ||</span><br><span class="line"> hash_data-&gt;malloc_value_size / <span class="number">2</span> &lt; value_len))</span><br><span class="line">&#123;</span><br><span class="line">hash_data-&gt;value_len = value_len;</span><br><span class="line">memcpy(hash_data-&gt;value, value, value_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needLock)</span><br><span class="line">&#123;</span><br><span class="line">HASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needLock)</span><br><span class="line">&#123;</span><br><span class="line">HASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!pHash-&gt;is_malloc_value)</span><br><span class="line">&#123;</span><br><span class="line">malloc_value_size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">malloc_value_size = MEM_ALIGN(value_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bytes = CALC_NODE_MALLOC_BYTES(key_len, malloc_value_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;max_bytes &gt; <span class="number">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> -ENOSPC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pBuff = (char *)malloc(bytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pBuff == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pHash-&gt;bytes_used += bytes;</span><br><span class="line"></span><br><span class="line">hash_data = (HashData *)pBuff;</span><br><span class="line">hash_data-&gt;malloc_value_size = malloc_value_size;</span><br><span class="line"></span><br><span class="line">hash_data-&gt;key_len = key_len;</span><br><span class="line">memcpy(hash_data-&gt;key, key, key_len);</span><br><span class="line">#ifdef HASH_STORE_HASH_CODE</span><br><span class="line">hash_data-&gt;hash_code = hash_code;  <span class="comment">// save the hash code for next use, it need not calculate again when next use</span></span><br><span class="line">#endif</span><br><span class="line">hash_data-&gt;value_len = value_len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!pHash-&gt;is_malloc_value) <span class="comment">// means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></span><br><span class="line">&#123;</span><br><span class="line">hash_data-&gt;value = (char *)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hash_data-&gt;value = hash_data-&gt;key + hash_data-&gt;key_len;</span><br><span class="line">memcpy(hash_data-&gt;value, value, value_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needLock)</span><br><span class="line">&#123;</span><br><span class="line">HASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">ADD_TO_BUCKET(pHash, ppBucket, hash_data)</span><br><span class="line">HASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ADD_TO_BUCKET(pHash, ppBucket, hash_data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;load_factor &gt;= <span class="number">0.10</span> &amp;&amp; (double)pHash-&gt;item_count /</span><br><span class="line">(double)*pHash-&gt;capacity &gt;= pHash-&gt;load_factor)</span><br><span class="line">&#123;</span><br><span class="line">_rehash(pHash);  <span class="comment">// rehash </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete a hash_data from pHash</span></span><br><span class="line">#define DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data) \</span><br><span class="line"><span class="keyword">if</span> (previous == NULL) \</span><br><span class="line">&#123; \</span><br><span class="line">*ppBucket = hash_data-&gt;next; \</span><br><span class="line">&#125; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">&#123; \</span><br><span class="line">previous-&gt;next = hash_data-&gt;next; \</span><br><span class="line">&#125; \</span><br><span class="line">pHash-&gt;item_count--; \</span><br><span class="line">pHash-&gt;bytes_used -= CALC_NODE_MALLOC_BYTES(hash_data-&gt;key_len, \</span><br><span class="line">hash_data-&gt;malloc_value_size); \</span><br><span class="line">free(hash_data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define MEM_ALIGN(x)  (((x) + <span class="number">7</span>) &amp; (~<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">#define CALC_NODE_MALLOC_BYTES(key_len, value_size) \</span><br><span class="line">sizeof(HashData) + key_len + value_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define ADD_TO_BUCKET(pHash, ppBucket, hash_data) \</span><br><span class="line">hash_data-&gt;next = *ppBucket; \</span><br><span class="line">*ppBucket = hash_data; \</span><br><span class="line">pHash-&gt;item_count++;</span><br><span class="line"></span><br><span class="line">static int _rehash(HashArray *pHash)</span><br><span class="line">&#123;</span><br><span class="line">int result;</span><br><span class="line">unsigned int *pOldCapacity;</span><br><span class="line"></span><br><span class="line">pOldCapacity = pHash-&gt;capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;is_malloc_capacity)</span><br><span class="line">&#123;</span><br><span class="line">unsigned int *pprime;</span><br><span class="line">unsigned int *prime_end;</span><br><span class="line"></span><br><span class="line">pHash-&gt;capacity = NULL;</span><br><span class="line"></span><br><span class="line">prime_end = prime_array + PRIME_ARRAY_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*pprime &gt; *pOldCapacity)</span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;capacity = pprime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;capacity++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=_rehash1(pHash, *pOldCapacity, pHash-&gt;capacity)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;capacity = pOldCapacity;  <span class="comment">//rollback</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;is_malloc_capacity)</span><br><span class="line">&#123;</span><br><span class="line">free(pOldCapacity);</span><br><span class="line">pHash-&gt;is_malloc_capacity = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;rehash, old_capacity=%d, new_capacity=%d\n&quot;, \</span></span><br><span class="line"><span class="comment">old_capacity, *pHash-&gt;capacity);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// rehash by new size: *new_capacity</span></span><br><span class="line">static int _rehash1(HashArray *pHash, <span class="keyword">const</span> int old_capacity, \</span><br><span class="line">unsigned int *new_capacity)</span><br><span class="line">&#123;</span><br><span class="line">HashData **old_buckets;</span><br><span class="line">HashData **ppBucket;</span><br><span class="line">HashData **bucket_end;</span><br><span class="line">HashData *hash_data;</span><br><span class="line">HashData *pNext;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">old_buckets = pHash-&gt;buckets;</span><br><span class="line">pHash-&gt;capacity = new_capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((result=_hash_alloc_buckets(pHash, old_capacity)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pHash-&gt;buckets = old_buckets;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;old: %d, new: %d\n&quot;, old_capacity, *pHash-&gt;capacity);</span></span><br><span class="line"></span><br><span class="line">pHash-&gt;item_count = <span class="number">0</span>;</span><br><span class="line">bucket_end = old_buckets + old_capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ppBucket=old_buckets; ppBucket&lt;bucket_end; ppBucket++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*ppBucket == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash_data = *ppBucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hash_data != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pNext = hash_data-&gt;next;</span><br><span class="line"></span><br><span class="line">ADD_TO_BUCKET(pHash, (pHash-&gt;buckets + \</span><br><span class="line">(HASH_CODE(pHash, hash_data) % \</span><br><span class="line">(*pHash-&gt;capacity))), hash_data)</span><br><span class="line"></span><br><span class="line">hash_data = pNext;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(old_buckets);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char *iniGetStrValue(<span class="keyword">const</span> char *szSectionName, <span class="keyword">const</span> char *szItemName, \</span><br><span class="line">IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">IniItem targetItem;</span><br><span class="line">IniSection *pSection;</span><br><span class="line">IniItem *pItem;</span><br><span class="line"></span><br><span class="line">INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \</span><br><span class="line">targetItem, pItem, NULL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pItem-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \</span><br><span class="line">targetItem, pItem, return_val) \</span><br><span class="line"><span class="keyword">if</span> (szSectionName == NULL || *szSectionName == <span class="string">&#x27;\0&#x27;</span>) \</span><br><span class="line">&#123; \</span><br><span class="line">pSection = &amp;pContext-&gt;global; \</span><br><span class="line">&#125; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">&#123; \</span><br><span class="line">pSection = (IniSection *)hash_find(&amp;pContext-&gt;sections, \</span><br><span class="line">szSectionName, strlen(szSectionName)); \</span><br><span class="line"><span class="keyword">if</span> (pSection == NULL) \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">return</span> return_val; \</span><br><span class="line">&#125; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line"><span class="keyword">if</span> (pSection-&gt;count &lt;= <span class="number">0</span>) \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">return</span> return_val; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">snprintf(targetItem.name, sizeof(targetItem.name), <span class="string">&quot;%s&quot;</span>, szItemName); \</span><br><span class="line">pItem = (IniItem *)bsearch(&amp;targetItem, pSection-&gt;items, \</span><br><span class="line">pSection-&gt;count, sizeof(IniItem), iniCompareByItemName); <span class="comment">// 二分查找</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void iniSortItems(IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pContext-&gt;global.count &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">qsort(pContext-&gt;global.items, pContext-&gt;global.count, \</span><br><span class="line">sizeof(IniItem), iniCompareByItemName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash_walk(&amp;pContext-&gt;sections, iniSortHashData, NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static int iniCompareByItemName(<span class="keyword">const</span> void *p1, <span class="keyword">const</span> void *p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> strcmp(((IniItem *)p1)-&gt;name, ((IniItem *)p2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int hash_walk(HashArray *pHash, HashWalkFunc walkFunc, void *args)</span><br><span class="line">&#123;</span><br><span class="line">HashData **ppBucket;</span><br><span class="line">HashData **bucket_end;</span><br><span class="line">HashData *hash_data;</span><br><span class="line">int index;</span><br><span class="line">int result;</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">bucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</span><br><span class="line">&#123;</span><br><span class="line">hash_data = *ppBucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hash_data != NULL)</span><br><span class="line">&#123;</span><br><span class="line">result = walkFunc(index, hash_data, args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index++;</span><br><span class="line">hash_data = hash_data-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void iniFreeContext(IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pContext == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pContext-&gt;global.items != NULL)</span><br><span class="line">&#123;</span><br><span class="line">free(pContext-&gt;global.items);</span><br><span class="line">memset(&amp;pContext-&gt;global, <span class="number">0</span>, sizeof(IniSection));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash_walk(&amp;pContext-&gt;sections, iniFreeHashData, NULL);</span><br><span class="line">hash_destroy(&amp;pContext-&gt;sections);</span><br><span class="line"></span><br><span class="line">    iniFreeDynamicContent(pContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void hash_destroy(HashArray *pHash)</span><br><span class="line">&#123;</span><br><span class="line">HashData **ppBucket;</span><br><span class="line">HashData **bucket_end;</span><br><span class="line">HashData *pNode;</span><br><span class="line">HashData *pDelete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash == NULL || pHash-&gt;buckets == NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</span><br><span class="line">&#123;</span><br><span class="line">pNode = *ppBucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pNode != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pDelete = pNode;</span><br><span class="line">pNode = pNode-&gt;next;</span><br><span class="line">free(pDelete);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(pHash-&gt;buckets);</span><br><span class="line">pHash-&gt;buckets = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pHash-&gt;is_malloc_capacity)</span><br><span class="line">&#123;</span><br><span class="line">free(pHash-&gt;capacity);</span><br><span class="line">pHash-&gt;capacity = NULL;</span><br><span class="line">pHash-&gt;is_malloc_capacity = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pHash-&gt;item_count = <span class="number">0</span>;</span><br><span class="line">pHash-&gt;bytes_used = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void iniFreeDynamicContent(IniContext *pContext)</span><br><span class="line">&#123;</span><br><span class="line">    CDCPair *pCDCPair;</span><br><span class="line">    DynamicContents *pDynamicContents;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_dynamic_content_count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</span><br><span class="line">    &#123;</span><br><span class="line">        pCDCPair = g_dynamic_contents + g_dynamic_content_index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pCDCPair = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g_dynamic_contents[i].context == pContext)</span><br><span class="line">            &#123;</span><br><span class="line">                pCDCPair = g_dynamic_contents + i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pCDCPair == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pCDCPair-&gt;used = <span class="literal">false</span>;</span><br><span class="line">    pCDCPair-&gt;context = NULL;</span><br><span class="line">    pDynamicContents = &amp;pCDCPair-&gt;dynamicContents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDynamicContents-&gt;contents != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pDynamicContents-&gt;count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pDynamicContents-&gt;contents[i] != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                free(pDynamicContents-&gt;contents[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        free(pDynamicContents-&gt;contents);</span><br><span class="line">        pDynamicContents-&gt;contents = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pDynamicContents-&gt;alloc_count = <span class="number">0</span>;</span><br><span class="line">    pDynamicContents-&gt;count = <span class="number">0</span>;</span><br><span class="line">    g_dynamic_content_count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;加载配置文件解析&quot;&gt;&lt;a href=&quot;#加载配置文件解析&quot; class=&quot;headerlink&quot; title=&quot;加载配置文件解析&quot;&gt;&lt;/a&gt;加载配置文件解析&lt;/h3&gt;&lt;p&gt;配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，&lt;br&gt;如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。&lt;br&gt;如：&lt;br&gt;result&amp;#x3D;iniLoadFromFileEx(filename, &amp;amp;iniContext, true)&lt;br&gt;pBasePath &amp;#x3D; iniGetStrValue(NULL, “base_path”, &amp;amp;iniContext); &amp;#x2F;&amp;#x2F;该函数就可以得到配置文件中base_path的值&lt;/p&gt;</summary>
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/categories/fastdfs/"/>
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>hexo之使用Travis自动部署hexo</title>
    <link href="http://damotiansheng.github.io/tools/2016-10-29/hexo%E4%B9%8B%E4%BD%BF%E7%94%A8Travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo.html"/>
    <id>http://damotiansheng.github.io/tools/2016-10-29/hexo%E4%B9%8B%E4%BD%BF%E7%94%A8Travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo.html</id>
    <published>2016-10-29T07:29:31.000Z</published>
    <updated>2023-06-28T13:34:11.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/xuezhisdc/article/details/53130423">参考文章1</a><br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/#">参考文章2</a><br>使用hexo+github搭建完自己的博客之后，每次新增文章，都需要hexo g-&gt;hexo d进行发布，此外为了进行备份，也需要将博客目录push到source repo上去(这里就有两个repo：source repo和content repo,我们的github博客网站的真实数据就保存在content repo,而source repo为我们本地博客目录的备份repo),有没有一种解决方案实现push到source repo上去时，自动进行发布呢？答案肯定是yes，这就是hexo的持续集成,实现工具有很多，如：appveyor(针对windows，linux下尝试未成功)，travis等，这里我们使用travis。</p><span id="more"></span><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><ul><li>一次性实现备份和发布；</li><li>方便在不同的电脑上进行博客发布。</li></ul></blockquote><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="新建Personal-Access-Tokens"><a href="#新建Personal-Access-Tokens" class="headerlink" title="新建Personal Access Tokens"></a>新建Personal Access Tokens</h3><p>到自己的github上，新建Personal access tokens，选择repo和admin:repo_hook权限，新建文件保存到本地。</p><h3 id="配置travis-ci"><a href="#配置travis-ci" class="headerlink" title="配置travis ci"></a>配置travis ci</h3><p>实现github账号登陆travis官网，并active自己的source reop，且将“Build only if .travis.yml is present”选项打开。</p><h3 id="本地安装travis"><a href="#本地安装travis" class="headerlink" title="本地安装travis"></a>本地安装travis</h3><p>执行命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ruby2.0</span><br><span class="line">sudo apt-<span class="built_in">get</span> install rubygems</span><br><span class="line">sudo gem install travis</span><br></pre></td></tr></table></figure><p>安装时可能出现相关文件版本号大于某个版本的错误，此时执行:sudo gem install xxx。</p><h3 id="配置travis"><a href="#配置travis" class="headerlink" title="配置travis"></a>配置travis</h3><p>git clone下自己的source repo, 到根目录执行:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">touch .travis.yml</span><br><span class="line"><span class="comment"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></span><br><span class="line"><span class="comment"># TOKEN 是上面github生成的Token</span></span><br><span class="line">travis <span class="built_in">encrypt</span> <span class="string">&#x27;REPO_TOKEN=&lt;TOKEN&gt;&#x27;</span> <span class="comment">--add</span></span><br><span class="line"><span class="comment"># 执行完后，.travis.yml文件中包含如下内容：</span></span><br><span class="line">env:</span><br><span class="line">  <span class="built_in">global</span>:</span><br><span class="line">    secure: Kl6AZLqFTGwm3CAktb3Idl2qNstdkC/SdYpyXJcehNnbubfur5Rqpjsy2UplG37+mzZW33UJszBwOrlu/YgNgMKfGPGGs55Wv...</span><br></pre></td></tr></table></figure><p>加入其他相关脚本到.travis.yml文件中去，完整的.travis.yml内容如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span><span class="punctuation">:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attribute">node_js</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;4&quot;  # nodejs的版本</span></span><br><span class="line"><span class="attribute">branches</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">only</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master  # 设置自动化部署的源码分支</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">env</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">global</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">secure</span><span class="punctuation">:</span> <span class="string">Kl6AZLqFTGwm3CAktb3Idl2qNstdkC/SdYpyXJcehNnbubfur5Rqpjsy2UplG37+mzZW33UJszBwOrlu/YgNgMKfGPGGs55WvrayaJrjvnXLetdVW4X7WraviCcWFAcHLTtkhF9gmz9DXWYr8FM+rp16AFKU2uWEx1S8/LhxGsRuMwO1SHJqZbWaMUnV88nvg19uN2mfzXzsukmv3cR+rSPa/ybauZj9qBaDb+y+1bsOGECC3TdiyikInRnX3IZDxf+YxSZGqMSl4wXzHWamVZB03LU3AhfUhfZEOhfFpcJG+nnLuS8h092BiEtpGixTewdtpdRPoil3CASGEQ8JvuZ90T/NaiD6m0HTxLZ4zXrWlPLbtCnPXwWli672XcNEiNgZB8COB0IkWv2FQoPl1H7B6UqdwxSxte3aN5YqVfkY7CiJtu+GAFH8u2JSO0OiK+V773vqz+xdt0fB1tXItL2AQtoSrhrr5QchJN5oZhFQpzr/g97O8gBgAQ2p0GLxY3BiFIccGX4hN1Lls/+0WKHPQ3dfFs49jvmelg6fhrYcYQhH/iVJtkIf3TjPq0CvQhiqzMjZoafle9U8RmuY/q/UaoswmkGHQ97qER5QpBWRpDH6JLQOJ63+aiWM53STyrJdraU+vJGGtc5KfTnkRd1Y82c=</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">before_install</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">export TZ=&#x27;Asia/Shanghai&#x27;  </span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm install -g hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm install -g hexo-cli </span></span><br><span class="line"><span class="attribute">before_script</span><span class="punctuation">:</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># 设置github账户信息 注意修改成自己的信息</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git config --global user.name &quot;damotiansheng&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git config --global user.email 974361900@qq.com</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># github仓库操作  注意将仓库修改成自己的</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed -i&#x27;&#x27; &quot;s~https://github.com/damotiansheng/damotiansheng.github.io.git~https://$&#123;REPO_TOKEN&#125;:x-oauth-basic@github.com/damotiansheng/damotiansheng.github.io.git~&quot; _config.yml</span></span><br><span class="line"><span class="comment"># 安装依赖组件</span></span><br><span class="line"><span class="attribute">install</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm install</span></span><br><span class="line"><span class="comment"># 执行的命令</span></span><br><span class="line"><span class="attribute">script</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo clean</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo generate</span></span><br><span class="line"><span class="comment"># 执行的成功后执行 </span></span><br><span class="line"><span class="attribute">after_success</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo deploy</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建一篇文章，然后执行：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> -A .</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> origin master</span><br></pre></td></tr></table></figure><p>执行文件完后，登陆到<a href="https://travis-ci.org/">travis官网</a>，可以看到类似下面的内容就代表成功了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Worker</span> <span class="string">information</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">i-8f64d817-precise-production-2-worker-org-docker.travisci.net:5de14ca3-fcc6-4e64-a6ac-bc0c8a588bd8</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">v2.5.0-8-g19ea9c2</span> <span class="string">https://github.com/travis-ci/worker/tree/19ea9c20425c78100500c7cc935892b47024922c</span></span><br><span class="line"><span class="attr">instance:</span> <span class="string">9f2c179:travis:node_js</span></span><br><span class="line"><span class="attr">startup:</span> <span class="number">481.</span><span class="string">157573ms</span></span><br><span class="line"><span class="string">system_info</span></span><br><span class="line"><span class="string">Build</span> <span class="string">system</span> <span class="string">information</span></span><br><span class="line"><span class="attr">Build language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">Build group:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">Build dist:</span> <span class="string">precise</span></span><br><span class="line"><span class="attr">Build id:</span> <span class="number">182467416</span></span><br><span class="line"><span class="attr">Job id:</span> <span class="number">182467417</span></span><br><span class="line"><span class="attr">travis-build version:</span> <span class="string">0501eac99</span></span><br><span class="line"><span class="string">Build</span> <span class="string">image</span> <span class="string">provisioning</span> <span class="string">date</span> <span class="string">and</span> <span class="string">time</span></span><br><span class="line"><span class="string">Thu</span> <span class="string">Feb</span>  <span class="number">5</span> <span class="number">15</span><span class="string">:09:33</span> <span class="string">UTC</span> <span class="number">2015</span></span><br><span class="line"><span class="string">Operating</span> <span class="string">System</span> <span class="string">Details</span></span><br><span class="line"><span class="attr">Distributor ID:</span><span class="string">Ubuntu</span></span><br><span class="line"><span class="attr">Description:</span><span class="string">Ubuntu</span> <span class="number">12.04</span><span class="number">.5</span> <span class="string">LTS</span></span><br><span class="line"><span class="attr">Release:</span><span class="number">12.04</span></span><br><span class="line"><span class="attr">Codename:</span><span class="string">precise</span></span><br><span class="line"><span class="string">Linux</span> <span class="string">Version</span></span><br><span class="line"><span class="number">3.13</span><span class="number">.0</span><span class="number">-29</span><span class="string">-generic</span></span><br><span class="line"><span class="string">Cookbooks</span> <span class="string">Version</span></span><br><span class="line"><span class="string">a68419e</span> <span class="string">https://github.com/travis-ci/travis-cookbooks/tree/a68419e</span></span><br><span class="line"><span class="string">GCC</span> <span class="string">version</span></span><br><span class="line"><span class="string">gcc</span> <span class="string">(Ubuntu/Linaro</span> <span class="number">4.6</span><span class="number">.3</span><span class="string">-1ubuntu5)</span> <span class="number">4.6</span><span class="number">.3</span></span><br><span class="line"><span class="string">Copyright</span> <span class="string">(C)</span> <span class="number">2011 </span><span class="string">Free</span> <span class="string">Software</span> <span class="string">Foundation,</span> <span class="string">Inc.</span></span><br><span class="line"><span class="string">This</span> <span class="string">is</span> <span class="string">free</span> <span class="string">software;</span> <span class="string">see</span> <span class="string">the</span> <span class="string">source</span> <span class="string">for</span> <span class="string">copying</span> <span class="string">conditions.</span>  <span class="string">There</span> <span class="string">is</span> <span class="literal">NO</span></span><br><span class="line"><span class="string">warranty;</span> <span class="string">not</span> <span class="string">even</span> <span class="string">for</span> <span class="string">MERCHANTABILITY</span> <span class="string">or</span> <span class="string">FITNESS</span> <span class="string">FOR</span> <span class="string">A</span> <span class="string">PARTICULAR</span> <span class="string">PURPOSE.</span></span><br><span class="line"><span class="string">Apache</span> <span class="string">Maven</span> <span class="number">3.2</span><span class="number">.5</span> <span class="string">(12a6b3acb947671f09b81f49094c53f426d8cea1;</span> <span class="number">2014-12-14T17:29:23+00:00</span><span class="string">)</span></span><br><span class="line"><span class="attr">Maven home:</span> <span class="string">/usr/local/maven</span></span><br><span class="line"><span class="attr">Java version:</span> <span class="number">1.7</span><span class="string">.0_76,</span> <span class="attr">vendor:</span> <span class="string">Oracle</span> <span class="string">Corporation</span></span><br><span class="line"><span class="attr">Java home:</span> <span class="string">/usr/lib/jvm/java-7-oracle/jre</span></span><br><span class="line"><span class="attr">Default locale:</span> <span class="string">en_US,</span> <span class="attr">platform encoding:</span> <span class="string">ANSI_X3.4-1968</span></span><br><span class="line"><span class="attr">OS name:</span> <span class="string">&quot;linux&quot;</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">&quot;3.13.0-29-generic&quot;</span><span class="string">,</span> <span class="attr">arch:</span> <span class="string">&quot;amd64&quot;</span><span class="string">,</span> <span class="attr">family:</span> <span class="string">&quot;unix&quot;</span></span><br><span class="line"><span class="string">fix.CVE-2015-7547</span></span><br><span class="line"><span class="string">$</span> <span class="string">export</span> <span class="string">DEBIAN_FRONTEND=noninteractive</span></span><br><span class="line"><span class="string">nvm</span> <span class="string">install</span> <span class="number">4</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="string">INFO</span>  <span class="string">Deleted</span> <span class="string">database.</span></span><br><span class="line"><span class="string">INFO</span>  <span class="string">Deleted</span> <span class="string">public</span> <span class="string">folder.</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Done.</span> <span class="string">Your</span> <span class="string">build</span> <span class="string">exited</span> <span class="string">with</span> <span class="number">0</span><span class="string">.</span></span><br></pre></td></tr></table></figure><p>此时到自己的github source repo和content repo均可看到最新的提交，访问自己github博客网站也可看到最新的文章了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/xuezhisdc/article/details/53130423&quot;&gt;参考文章1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://formulahendry.github.io/2016/12/04/hexo-ci/#&quot;&gt;参考文章2&lt;/a&gt;&lt;br&gt;使用hexo+github搭建完自己的博客之后，每次新增文章，都需要hexo g-&amp;gt;hexo d进行发布，此外为了进行备份，也需要将博客目录push到source repo上去(这里就有两个repo：source repo和content repo,我们的github博客网站的真实数据就保存在content repo,而source repo为我们本地博客目录的备份repo),有没有一种解决方案实现push到source repo上去时，自动进行发布呢？答案肯定是yes，这就是hexo的持续集成,实现工具有很多，如：appveyor(针对windows，linux下尝试未成功)，travis等，这里我们使用travis。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://damotiansheng.github.io/categories/tools/"/>
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/tags/hexo/"/>
    
    <category term="travis" scheme="http://damotiansheng.github.io/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs文件系统搭建</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-10-21/fastdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-10-21/fastdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA.html</id>
    <published>2016-10-21T08:54:20.000Z</published>
    <updated>2023-06-28T13:34:11.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）"><a href="#ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）" class="headerlink" title="ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）"></a>ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）</h2><span id="more"></span><h3 id="1-软件准备"><a href="#1-软件准备" class="headerlink" title="1. 软件准备"></a>1. 软件准备</h3><h4 id="1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；"><a href="#1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；" class="headerlink" title="1.1 从happyfish100下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；"></a>1.1 从<a href="https://github.com/happyfish100">happyfish100</a>下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；</h4><h4 id="1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz"><a href="#1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz" class="headerlink" title="1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz"></a>1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz</h4><h3 id="2-安装libfastcommon"><a href="#2-安装libfastcommon" class="headerlink" title="2. 安装libfastcommon"></a>2. 安装libfastcommon</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#./makesh</span></span><br><span class="line"><span class="comment">#./make.sh install</span></span><br></pre></td></tr></table></figure><h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><p>但是FastDFS主程序设置的lib目录是&#x2F;usr&#x2F;local&#x2F;lib<br>所以需要创建软链接.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</span><br><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so</span><br><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so </span><br></pre></td></tr></table></figure><h3 id="3-安装fastdfs主程序"><a href="#3-安装fastdfs主程序" class="headerlink" title="3. 安装fastdfs主程序"></a>3. 安装fastdfs主程序</h3><h4 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1  安装"></a>3.1  安装</h4><p>进入fastdfs主目录，依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./make.sh </span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>执行完毕后，可执行文件在&#x2F;usr&#x2F;bin&#x2F;下以fdfs开头，ll &#x2F;usr&#x2F;bin&#x2F;fdfs<em>，会看到一些可执行程序，如fdfs_upload_file等；<br>在&#x2F;etc&#x2F;fdfs&#x2F;目录下也有一些配置文件，如：storage.conf.sample等；<br>执行： cp fastdfs&#x2F;conf&#x2F;</em> &#x2F;etc&#x2F;fdfs，即将conf目录下的所有文件复制到&#x2F;etc&#x2F;fdfs目录下</p><h4 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h4><p>在fastdfs同级目录，新建目录storage_base_path，client_base_path，mod_fastdfs_base_path，store_path0，tracker_base_path<br>修改&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf(若没有，则cp &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf.sample &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf)<br>将base_path的值设置为tracker_base_path目录，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line">base_path=/home/hyp/Desktop/opensource/tracker_base_path</span><br><span class="line">http.server_port=8080</span><br><span class="line"></span><br><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line">group_name=group1</span><br><span class="line">base_path=/home/hyp/Desktop/opensource/storage_base_path</span><br><span class="line">store_path0=/home/hyp/Desktop/opensource/storage_base_path</span><br><span class="line">tracker_server=172.16.55.156:22122</span><br><span class="line">http.server_port=8080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line">base_path=/home/hyp/Desktop/opensource/client_base_path</span><br><span class="line">tracker_server=172.16.55.156:22122</span><br></pre></td></tr></table></figure><h4 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> fdfs_storaged </span><br><span class="line">/usr/bin/fdfs_storaged</span><br><span class="line"></span><br><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class="line">netstat -antp | grep trackerd</span><br><span class="line"></span><br><span class="line">fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class="line">netstat -antp | grep storage</span><br><span class="line"></span><br><span class="line">ps -ef|grep fdfs</span><br><span class="line"></span><br><span class="line">fdfs_upload_file client.conf ~/Desktop/fork.c</span><br><span class="line">group1/M00/00/00/rBA3nFgJeMCAUOjoAAAAxxbGNXU56061.c</span><br><span class="line">fdfs_upload_file client.conf ~/Desktop/kenan1.jpg </span><br><span class="line">group1/M00/00/00/rBA3nFgJxfKABNobAAITVP28J6s210.jpg</span><br><span class="line"></span><br><span class="line">终止命令：</span><br><span class="line">killall fdfs_storaged </span><br><span class="line">killall fdfs_trackerd </span><br></pre></td></tr></table></figure><h3 id="4-安装fastdfs-nginx-module"><a href="#4-安装fastdfs-nginx-module" class="headerlink" title="4. 安装fastdfs-nginx-module"></a>4. 安装fastdfs-nginx-module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修改fastdfs-nginx-module的config文件</span><br><span class="line">原来的内容是</span><br><span class="line">CORE_INCS=<span class="string">&quot;<span class="variable">$CORE_INCS</span> /usr/local/include/fastdfs /usr/local/include/fastcommon/&quot;</span></span><br><span class="line"></span><br><span class="line">vim /home/nginx/fastdfs-nginx-module/src/config,修改为</span><br><span class="line">CORE_INCS=<span class="string">&quot;<span class="variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon&quot;</span></span><br><span class="line"></span><br><span class="line">注：貌似github上的fastdfs-nginx-module无需修改</span><br></pre></td></tr></table></figure><h3 id="5-安装nginx并运行"><a href="#5-安装nginx并运行" class="headerlink" title="5. 安装nginx并运行"></a>5. 安装nginx并运行</h3><h4 id="5-1-解压nginx-1-10-2，并执行："><a href="#5-1-解压nginx-1-10-2，并执行：" class="headerlink" title="5.1 解压nginx-1.10.2，并执行："></a>5.1 解压nginx-1.10.2，并执行：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="5-2-配置"><a href="#5-2-配置" class="headerlink" title="5.2 配置"></a>5.2 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br><span class="line"></span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">将server字段的listen字段修改为8080</span><br><span class="line">并添加：</span><br><span class="line">location /group1/M00 &#123;</span><br><span class="line">            root /home/hyp/Desktop/opensource/storage_base_path/data;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">注：/home/hyp/Desktop/opensource/storage_base_path/data该目录是指向真正存储文件的地方</span><br><span class="line"></span><br><span class="line">修改fastdfs的nginx模块的配置文件mod_fastdfs.conf:</span><br><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line">base_path=/home/hyp/Desktop/opensource/mod_fastdfs_base_path      <span class="comment">#保存日志目录</span></span><br><span class="line">tracker_server=172.16.55.156:22122    <span class="comment">#tracker 服务器的 IP 地址以及端口号</span></span><br><span class="line">storage_server_port=23000            <span class="comment">#storage 服务器的端口号</span></span><br><span class="line">group_name=group1                    <span class="comment">#当前服务器的 group 名</span></span><br><span class="line">url_have_group_name = <span class="literal">true</span>           <span class="comment">#文件 url 中是否有 group 名</span></span><br><span class="line">store_path_count=1                   <span class="comment">#存储路径个数，需要和 store_path 个数匹配</span></span><br><span class="line">store_path0=/home/hyp/Desktop/opensource/mod_fastdfs_base_path    <span class="comment">#存储路径</span></span><br><span class="line">http.need_find_content_type=<span class="literal">true</span>     <span class="comment"># 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）,好像没有该字段</span></span><br><span class="line">group_count = 1                      <span class="comment">#设置组的个数</span></span><br><span class="line"></span><br><span class="line">然后在末尾添加分组信息，目前只有一个分组，就只写一个</span><br><span class="line">[group1]</span><br><span class="line">group_name=group1</span><br><span class="line">storage_server_port=23000</span><br><span class="line">store_path_count=1</span><br><span class="line">store_path0=/home/hyp/Desktop/opensource/storage_base_path</span><br><span class="line"></span><br><span class="line">建立M00至存储目录的符号连接</span><br><span class="line"><span class="built_in">ln</span> -s /home/hyp/Desktop/opensource/storage_base_path/data /home/hyp/Desktop/opensource/storage_base_path/M00 （好像删除也可以，因为上面</span><br><span class="line">/group1/M00的root已经指向data了）</span><br></pre></td></tr></table></figure><h4 id="5-3-运行"><a href="#5-3-运行" class="headerlink" title="5.3 运行"></a>5.3 运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class="line">fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf ~/Desktop/kenan.jpg </span><br><span class="line">group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg</span><br><span class="line">到/usr/local/nginx/sbin目录，执行: ./nginx</span><br><span class="line">./nginx</span><br><span class="line">ngx_http_fastdfs_set pid=22882</span><br><span class="line"></span><br><span class="line">lsof -i:8080</span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   22883   root    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</span><br><span class="line">nginx   22884 nobody    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</span><br><span class="line"></span><br><span class="line">输入http://localhost:8080/即可显示首页</span><br><span class="line">输入http://localhost:8080/group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg即可显示kenan.jpg图片了</span><br></pre></td></tr></table></figure><h3 id="6-遇到的问题"><a href="#6-遇到的问题" class="headerlink" title="6. 遇到的问题"></a>6. 遇到的问题</h3><h4 id="6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行"><a href="#6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行" class="headerlink" title="6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行"></a>6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep nginx</span><br><span class="line">出现：</span><br><span class="line">root      7421  0.0  0.0  28588   564 ?        Ss   09:42   0:00 nginx: master process ./nginx</span><br><span class="line">nobody    7422  0.0  0.0  29012  2552 ?        S    09:42   0:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>但是在我ubantu12.04 x64的笔记本上只出现了一个进程，怪了，在ubantu12.04上，添加模块–add-module&#x3D;&#x2F;home&#x2F;hyp&#x2F;Desktop&#x2F;opensource&#x2F;fastdfs-nginx-module&#x2F;src<br>后，也只有一个进程了，且此时浏览器访问<a href="http://localhost/">localhost</a>时，总是无法显示，浏览器总在转圈，可能原因是配置文件中的http.server_port端口没有配<br>置好，端口需要配置与nginx中监听的端口一致，或者是mod_fastdfs.conf文件没有配置好，如末尾没有添加分组信息，此问题困扰了两天；</p><h4 id="6-2-有时执行-fdfs-storaged-storage-conf"><a href="#6-2-有时执行-fdfs-storaged-storage-conf" class="headerlink" title="6.2 有时执行: fdfs_storaged storage.conf"></a>6.2 有时执行: fdfs_storaged storage.conf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[2016-10-21 10:30:12] ERROR - file: shared_func.c, line: 968, /storage.conf is not a regular file</span><br><span class="line">root@hyp-HP-Pro-3340-MT:/etc/fdfs<span class="comment"># [2016-10-21 10:30:12] ERROR - file: storage_func.c, line: 1076, load conf file &quot;storage.conf&quot; fail, ret code: 22</span></span><br><span class="line">[2016-10-21 10:30:12] CRIT - <span class="built_in">exit</span> abnormally!</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line">[2016-10-21 10:03:10] ERROR - file: shared_func.c, line: 968, /./storage.conf is not a regular file</span><br><span class="line">[2016-10-21 10:03:10] ERROR - file: storage_func.c, line: 1076, load conf file <span class="string">&quot;./storage.conf&quot;</span> fail, ret code: 22</span><br><span class="line">[2016-10-21 10:03:10] CRIT - <span class="built_in">exit</span> abnormally!</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">使用完整路径即可： fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h3 id="7-参考来源："><a href="#7-参考来源：" class="headerlink" title="7. 参考来源："></a>7. 参考来源：</h3><p><a href="http://www.tuicool.com/articles/q6ZvUn">http://www.tuicool.com/articles/q6ZvUn</a></p><p><a href="http://blog.itpub.net/7734666/viewspace-1292485/">http://www.tuicool.com/articles/q6ZvUn</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）&quot;&gt;&lt;a href=&quot;#ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）&quot; class=&quot;headerlink&quot; title=&quot;ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）&quot;&gt;&lt;/a&gt;ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）&lt;/h2&gt;</summary>
    
    
    
    
    <category term="fastdfs" scheme="http://damotiansheng.github.io/tags/fastdfs/"/>
    
    <category term="分布式文件系统" scheme="http://damotiansheng.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="nginx" scheme="http://damotiansheng.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://damotiansheng.github.io/tools/2016-10-21/hello-world.html"/>
    <id>http://damotiansheng.github.io/tools/2016-10-21/hello-world.html</id>
    <published>2016-10-21T07:29:31.000Z</published>
    <updated>2023-06-28T13:34:11.986Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="http://damotiansheng.github.io/categories/tools/"/>
    
    
    <category term="hexo" scheme="http://damotiansheng.github.io/tags/hexo/"/>
    
    <category term="github" scheme="http://damotiansheng.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>搭建github博客</title>
    <link href="http://damotiansheng.github.io/uncategorized/2016-10-14/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://damotiansheng.github.io/uncategorized/2016-10-14/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2.html</id>
    <published>2016-10-14T02:42:33.000Z</published>
    <updated>2023-06-28T13:34:11.995Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://damotiansheng.github.io/photos/damotiansheng.png" alt="Alt text"></p><h3 id="目的-利用hexo将个人博客搭建到github上"><a href="#目的-利用hexo将个人博客搭建到github上" class="headerlink" title="目的: 利用hexo将个人博客搭建到github上"></a>目的: 利用hexo将个人博客搭建到github上</h3><h3 id="参考的相关文章"><a href="#参考的相关文章" class="headerlink" title="参考的相关文章"></a><a href="http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/">参考的相关文章</a></h3><span id="more"></span><h3 id="1、下载node-v4-6-0-linux-x64-tar-xz"><a href="#1、下载node-v4-6-0-linux-x64-tar-xz" class="headerlink" title="1、下载node-v4.6.0-linux-x64.tar.xz"></a>1、下载node-v4.6.0-linux-x64.tar.xz</h3><p>该压缩包中包含了编译好的hexo,npm,node可执行文件，可以直接使用</p><h3 id="2、将hexo可执行文件路径添加到PATH中"><a href="#2、将hexo可执行文件路径添加到PATH中" class="headerlink" title="2、将hexo可执行文件路径添加到PATH中"></a>2、将hexo可执行文件路径添加到PATH中</h3><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>新建你要存放博客内容的目录，cd到该目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> init</span><br></pre></td></tr></table></figure><h3 id="4、生成静态页面"><a href="#4、生成静态页面" class="headerlink" title="4、生成静态页面"></a>4、生成静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> generate</span><br></pre></td></tr></table></figure><h3 id="5、本地启动"><a href="#5、本地启动" class="headerlink" title="5、本地启动"></a>5、本地启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> server</span><br></pre></td></tr></table></figure><h3 id="６、浏览器访问"><a href="#６、浏览器访问" class="headerlink" title="６、浏览器访问"></a>６、浏览器访问</h3><p>执行完hexo server之后，浏览器输入<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C">http://localhost:4000/查看页面效果</a></p><h3 id="７、部署博客到github上去"><a href="#７、部署博客到github上去" class="headerlink" title="７、部署博客到github上去"></a>７、部署博客到github上去</h3><h4 id="7-1-新建github仓库，命名规则：你的github账号-github-io"><a href="#7-1-新建github仓库，命名规则：你的github账号-github-io" class="headerlink" title="7.1 新建github仓库，命名规则：你的github账号.github.io"></a>7.1 新建github仓库，命名规则：你的github账号.github.io</h4><h4 id="7-2-修改-config-yml"><a href="#7-2-修改-config-yml" class="headerlink" title="7.2 修改_config.yml"></a>7.2 修改_config.yml</h4><p>到该文件末尾，添加内容如下：<br>deploy:<br>    type: git<br>    repo: 刚刚创建的github仓库地址.git<br>    branch: master<br>注意：type,repo,branch后面有一个空格</p><h4 id="7-3-部署到github上"><a href="#7-3-部署到github上" class="headerlink" title="7.3 部署到github上"></a>7.3 部署到github上</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> clean</span><br><span class="line"><span class="variable">$hexo</span> g</span><br><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure><h4 id="7-4-浏览器访问"><a href="#7-4-浏览器访问" class="headerlink" title="7.4 浏览器访问"></a>7.4 浏览器访问</h4><p>输入https:&#x2F;&#x2F;你的github账号.github.io即可访问你的博客了。</p><h3 id="8、hexo命令"><a href="#8、hexo命令" class="headerlink" title="8、hexo命令"></a>8、hexo命令</h3><h4 id="8-1-简写"><a href="#8-1-简写" class="headerlink" title="8.1 简写"></a>8.1 简写</h4><blockquote><ul><li>hexo n &#x3D;&#x3D; hexo new</li><li>hexo g &#x3D;&#x3D; hexo generate</li><li>hexo s &#x3D;&#x3D; hexo server</li><li>hexo d &#x3D;&#x3D; hexo deploy</li></ul></blockquote><h4 id="8-2-新建文章"><a href="#8-2-新建文章" class="headerlink" title="8.2 新建文章"></a>8.2 新建文章</h4><blockquote><ul><li>执行hexo new “标题”命令后会在_posts目录会生成文件标题.md，编辑该文件就是编辑该文章</li></ul></blockquote><h4 id="8-3-hexo部署"><a href="#8-3-hexo部署" class="headerlink" title="8.3 hexo部署"></a>8.3 hexo部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> g</span><br><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure><h3 id="9、添加评论和头像"><a href="#9、添加评论和头像" class="headerlink" title="9、添加评论和头像"></a>9、添加评论和头像</h3><h4 id="9-1-添加评论"><a href="#9-1-添加评论" class="headerlink" title="9.1 添加评论"></a>9.1 添加评论</h4><blockquote><ul><li>到<a href="http://duoshuo.com/create-site/">多说</a>申请站点</li><li>修改theme-yilia下的_config.yml文件，修改为：duoshuo: 站点名称</li><li>重新生成并部署即可</li><li>如果不行，请参考<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9">Hexo使用多说教程</a></li></ul></blockquote><h4 id="9-2-添加头像"><a href="#9-2-添加头像" class="headerlink" title="9.2 添加头像"></a>9.2 添加头像</h4><blockquote><ul><li>在主目录下的source文件夹下(与_posts同目录)新建photos目录，并将xxx.png放到该目录</li><li>修改theme-yilia下的_config.yml文件，修改为：avatar: &#x2F;photos&#x2F;xxx.png</li><li>重新生成并部署即可</li></ul></blockquote><h3 id="10、注意"><a href="#10、注意" class="headerlink" title="10、注意"></a>10、注意</h3><blockquote><ul><li>有时hexo new xxx文章后，发布后有乱码，此时删除该文章，然后直接vim新建，然后到博客主目录下执行hexo g -&gt; hexo d，有乱码可能就是由于没有在主目录下执行命令，而在_posts目录下执行命令进行发布了。</li></ul></blockquote><h3 id="11、参考文章"><a href="#11、参考文章" class="headerlink" title="11、参考文章"></a>11、参考文章</h3><p><a href="http://ijiaober.github.io/categories/hexo/">hexo使用攻略</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://damotiansheng.github.io/photos/damotiansheng.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;目的-利用hexo将个人博客搭建到github上&quot;&gt;&lt;a href=&quot;#目的-利用hexo将个人博客搭建到github上&quot; class=&quot;headerlink&quot; title=&quot;目的: 利用hexo将个人博客搭建到github上&quot;&gt;&lt;/a&gt;目的: 利用hexo将个人博客搭建到github上&lt;/h3&gt;&lt;h3 id=&quot;参考的相关文章&quot;&gt;&lt;a href=&quot;#参考的相关文章&quot; class=&quot;headerlink&quot; title=&quot;参考的相关文章&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/&quot;&gt;参考的相关文章&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    
    <category term="搭建github博客" scheme="http://damotiansheng.github.io/tags/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
